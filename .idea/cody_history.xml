<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChatHistory">
    <accountData>
      <list>
        <AccountData>
          <accountId value="VXNlcjoxNTkzOTM=" />
          <chats>
            <list>
              <chat>
                <internalId value="0a632521-a533-4f42-a468-c038fd424ec0" />
                <llm>
                  <llm>
                    <model value="anthropic/claude-3-sonnet-20240229" />
                    <provider value="Anthropic" />
                    <title value="Claude 3 Sonnet" />
                  </llm>
                </llm>
              </chat>
              <chat>
                <internalId value="81f79742-7fde-4d8b-9fe5-64cd63d4bb47" />
                <llm>
                  <llm>
                    <model value="anthropic/claude-3-sonnet-20240229" />
                    <provider value="Anthropic" />
                    <title value="Claude 3 Sonnet" />
                  </llm>
                </llm>
                <messages>
                  <list>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="this is my home.js code import React, { useState, useEffect } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import './App.css';&#10;import 'bootstrap/dist/css/bootstrap.min.css';&#10;import { FaCheckDouble, FaClock, FaHeadset, FaHouseUser } from &amp;quot;react-icons/fa&amp;quot;;&#10;&#10;import img1 from &amp;quot;./images/specialities-01.png&amp;quot;;&#10;import img2 from &amp;quot;./images/specialities-02.png&amp;quot;;&#10;import img3 from &amp;quot;./images/specialities-03.png&amp;quot;;&#10;import img4 from &amp;quot;./images/specialities-04.png&amp;quot;;&#10;import img5 from &amp;quot;./images/specialities-05.png&amp;quot;;&#10;import axios from 'axios';&#10;&#10;function Home() {&#10;    const user = JSON.parse(localStorage.getItem('user'));&#10;    // const role = user.role; // Can be 'Doctor', 'Receptionist', or 'Patient'&#10;&#10;    const [filter, setFilter] = useState({ name: '', specialization: '', fees: '', location: '' });&#10;    const [doctors, setDoctors] = useState([]);&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const fetchDoctors = async () =&amp;gt; {&#10;            try {&#10;                const response = await axios.get('http://localhost:8081/doctors');&#10;                setDoctors(response.data);&#10;            } catch (error) {&#10;                console.error('Failed to fetch doctors:', error);&#10;            }&#10;        };&#10;        fetchDoctors();&#10;    }, []);&#10;&#10;    const bufferToBase64 = (buffer) =&amp;gt; {&#10;        let binary = '';&#10;        const bytes = new Uint8Array(buffer.data);&#10;        const len = bytes.byteLength;&#10;        for (let i = 0; i &amp;lt; len; i++) {&#10;            binary += String.fromCharCode(bytes[i]);&#10;        }&#10;        return window.btoa(binary);&#10;    };&#10;&#10;    const filteredDoctors = doctors.filter((doctor) =&amp;gt;&#10;        doctor.name.toLowerCase().includes(filter.name.toLowerCase()) &amp;amp;&amp;amp;&#10;        doctor.specialization.toLowerCase().includes(filter.specialization.toLowerCase()) &amp;amp;&amp;amp;&#10;        (filter.fees === '' || doctor.fees.includes(filter.fees)) &amp;amp;&amp;amp;&#10;        (filter.location === '' || doctor.location.toLowerCase().includes(filter.location.toLowerCase()))&#10;    );&#10;&#10;    const [showPopup, setShowPopup] = useState(false);&#10;    const [mobile, setMobile] = useState('');&#10;    const [aadhaar, setAadhaar] = useState('');&#10;    const [gender, setGender] = useState('');&#10;    const [dob, setDob] = useState('');&#10;    const [age, setAge] = useState(null);&#10;    const [maxBirthDate, setMaxBirthDate] = useState('');&#10;&#10;    useEffect(() =&amp;gt; {&#10;        setShowPopup(true);&#10;        const maxDate = new Date();&#10;        maxDate.setFullYear(maxDate.getFullYear() - 110);&#10;        setMaxBirthDate(maxDate.toISOString().split('T')[0]);&#10;    }, []);&#10;&#10;    const handleClosePopup = () =&amp;gt; {&#10;        setShowPopup(false);&#10;    };&#10;&#10;    const handleMobileChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 10) {&#10;            setMobile(value);&#10;        }&#10;    };&#10;&#10;    const handleAadhaarChange = (e) =&amp;gt; {&#10;        const value = e.target.value.replace(/\s/g, ''); // Remove spaces&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 12) {&#10;            const formattedValue = value.replace(/(.{4})/g, '$1 ').trim();&#10;            setAadhaar(formattedValue);&#10;        }&#10;    };&#10;&#10;    const handleGenderChange = (e) =&amp;gt; {&#10;        setGender(e.target.value);&#10;    };&#10;&#10;    const handleDobChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        setDob(value);&#10;        calculateAge(value);&#10;    };&#10;&#10;    const calculateAge = (dob) =&amp;gt; {&#10;        const birthDate = new Date(dob);&#10;        const today = new Date();&#10;&#10;        if (birthDate &amp;gt; today) {&#10;            setAge(null); // Reset age&#10;        } else {&#10;            let age = today.getFullYear() - birthDate.getFullYear();&#10;            const monthDifference = today.getMonth() - birthDate.getMonth();&#10;            if (monthDifference &amp;lt; 0 || (monthDifference === 0 &amp;amp;&amp;amp; today.getDate() &amp;lt; birthDate.getDate())) {&#10;                age--;&#10;            }&#10;            setAge(Math.min(age, 110)); // Limit age to maximum 110&#10;        }&#10;    };&#10;&#10;    return (&#10;        &amp;lt;&amp;gt;&#10;            {showPopup &amp;amp;&amp;amp; (&#10;                &amp;lt;div className=&amp;quot;popup&amp;quot;&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;popup-content&amp;quot;&amp;gt;&#10;                        &amp;lt;span className=&amp;quot;close-popup&amp;quot; onClick={handleClosePopup}&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Complete Your Profile&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;form&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;form-group&amp;quot;&amp;gt;&#10;                                &amp;lt;label htmlFor=&amp;quot;mobile&amp;quot;&amp;gt;Mobile No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;tel&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;mobile&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Mobile Number&amp;quot;&#10;                                    value={mobile}&#10;                                    onChange={handleMobileChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {mobile.length &amp;gt; 0 &amp;amp;&amp;amp; mobile.length &amp;lt; 10 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Mobile number must be exactly 10 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;gender&amp;quot;&amp;gt;Gender:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;select&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;gender&amp;quot;&#10;                                    value={gender}&#10;                                    onChange={handleGenderChange}&#10;                                    required&#10;                                &amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;Select Gender&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;male&amp;quot;&amp;gt;Male&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;female&amp;quot;&amp;gt;Female&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;other&amp;quot;&amp;gt;Other&amp;lt;/option&amp;gt;&#10;                                &amp;lt;/select&amp;gt;&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;dob&amp;quot;&amp;gt;Date of Birth:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;date&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;dob&amp;quot;&#10;                                    value={dob}&#10;                                    onChange={handleDobChange}&#10;                                    max={maxBirthDate} // Set max birth date&#10;                                    required&#10;                                /&amp;gt;&#10;                                {age !== null &amp;amp;&amp;amp; (&#10;                                    &amp;lt;p&amp;gt;Age: {age} years&amp;lt;/p&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;aadhaar&amp;quot;&amp;gt;Aadhaar Card No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;aadhaar&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Aadhaar Number&amp;quot;&#10;                                    value={aadhaar}&#10;                                    onChange={handleAadhaarChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {aadhaar.replace(/\s/g, '').length &amp;gt; 0 &amp;amp;&amp;amp; aadhaar.replace(/\s/g, '').length &amp;lt; 12 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Aadhaar number must be exactly 12 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;address&amp;quot;&amp;gt;Address:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;address&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Address&amp;quot;&#10;                                    required&#10;                                /&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                            &amp;lt;button type=&amp;quot;submit&amp;quot; className=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&#10;                        &amp;lt;/form&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            )}&#10;            &amp;lt;section id=&amp;quot;hero&amp;quot; className=&amp;quot;d-flex align-items-center&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                        &amp;lt;p&amp;gt;TOTAL HEALTH CARE SOLUTION&amp;lt;/p&amp;gt;&#10;                        &amp;lt;h1&amp;gt;Your Most Trusted &amp;lt;br /&amp;gt;Health Partner&amp;lt;/h1&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;A repudiandae ipsam labore ipsa voluptatum quidem quae laudantium quisquam aperiam maiores sunt fugit,&amp;lt;/p&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;deserunt rem suscipit placeat.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;d-flex justify-content-start gap-2&amp;quot;&amp;gt;&#10;                        {/* Conditional rendering based on user role */}&#10;                        {user &amp;amp;&amp;amp; user.role === 'patient' &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {user &amp;amp;&amp;amp; (user.role === 'doctor' || user.role === 'receptionist') &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors-dashboard'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Track Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {/* Show 'Book Appointment' button if no user is logged in */}&#10;                        {!user &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;why-us mt-5 mt-md-0&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;content&amp;quot;&amp;gt;&#10;                                &amp;lt;h3&amp;gt;Why Choose Us?&amp;lt;/h3&amp;gt;&#10;                                &amp;lt;p&amp;gt;&#10;                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Duis aute irure dolor in reprehenderit&#10;                                    Asperiores dolores sed et. Tenetur quia eos. Autem tempore quibusdam vel necessitatibus optio ad corporis.&#10;                                &amp;lt;/p&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;Link style={{ textDecoration: 'none' }} to={'/about'} className=&amp;quot;more-btn&amp;quot;&amp;gt;Learn More &amp;lt;i className=&amp;quot;bx bx-chevron-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/Link&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-8 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;icon-boxes d-flex flex-column justify-content-center&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHouseUser className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Appointment&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;24 Hours Service&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Consequuntur sunt aut quasi enim aliquam quae harum pariatur laboris nisi ut aliquip&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHeadset className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Emergency Cases&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;h6 className='text-secondary'&amp;gt;+88 01751 040425&amp;lt;/h6&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Qui facilis perferendis quia maxime. Laborum excepturi pariatur laboriosam nihil, dolor molestias.&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaClock className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Working Hours&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;Timing schedule&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;ul className='list-group list-group-flush'&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sun - Wed : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;8:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Thus - Fri : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;9:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sat - Sun : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;10:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                            &amp;lt;/ul&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className='reco-doc'&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 mt-100 section-title text-center reco-doc-card'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Recommended Doctors&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;cardContainer&amp;quot;&amp;gt;&#10;                            {filteredDoctors.slice(0, 5).map((doctor, index) =&amp;gt; (&#10;                                &amp;lt;div key={index} className=&amp;quot;card&amp;quot;&amp;gt;&#10;                                    &amp;lt;img src={`data:image/jpeg;base64,${bufferToBase64(doctor.doc_pic)}`} alt={doctor.name} className=&amp;quot;image&amp;quot; /&amp;gt;&#10;                                    &amp;lt;h3&amp;gt;{doctor.name}&amp;lt;/h3&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Specialization:&amp;lt;/strong&amp;gt; {doctor.specialization}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Fees:&amp;lt;/strong&amp;gt; {doctor.fees}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Location:&amp;lt;/strong&amp;gt; {doctor.location}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;{doctor.description}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;button className=&amp;quot;bookButton&amp;quot;&amp;gt;Book Appointment&amp;lt;/button&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            ))}&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;section section-specialities position-relative&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 section-title text-center spec-header'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Clinic and Specialities&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;p className='m-0'&amp;gt;Lorem ipsum dolor sit amet consectetur adipisicing.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row justify-content-center&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-md-9&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;specialities-slider d-flex justify-content-center align-items-center gap-5&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img1} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Urology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img2} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Neurology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img3} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Orthopedic&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img4} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Cardiologist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img5} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Dentist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;    );&#10;}&#10;&#10;export default Home; now when user enter its detail after login i want to store data in patient table &#10;Full texts&#10;patient_id&#9;&#10;login_id&#9;&#10;email&#9;&#10;password&#9;&#10;role&#9;&#10;age&#9;&#10;gender&#9;&#10;address&#9;&#10;number&#9;&#10;insurance&#9;&#10;adhar_no&#9;&#10;created_at&#9;&#10;updated_at&#9;&#10;name&#9;&#10;dob&#9;&#10;patient_pic&#9;&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;1&#10;4&#10;john@example.com&#10;Password@123&#10;Patient&#10;30&#10;Male&#10;123 Main St&#10;987-654-32&#10;Yes&#10;123444678590&#10;2024-05-22 16:44:14&#10;2024-06-03 12:42:43&#10;John Potter&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;2&#10;5&#10;jane@gmail.com&#10;Password@456&#10;Patient&#10;25&#10;Male&#10;456 Elm Stsdfasd&#10;1234567890&#10;Yes&#10;987645432210&#10;2024-05-22 16:44:14&#10;2024-06-04 11:06:29&#10;Jane Panchal&#10;2001-12-11&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;3&#10;6&#10;alex@example.com&#10;Password@789&#10;Patient&#10;40&#10;Male&#10;789 Oak St&#10;4567789901&#10;No&#10;5678-9012-34&#10;2024-05-22 16:44:14&#10;2024-05-30 16:33:29&#10;Alex Brown&#10;2001-12-31&#10;this is my server.js code const express = require(&amp;quot;express&amp;quot;);&#10;const mysql = require(&amp;quot;mysql2&amp;quot;);&#10;const cors = require(&amp;quot;cors&amp;quot;);&#10;const dotenv = require(&amp;quot;dotenv&amp;quot;);&#10;&#10;// Load environment variables from .env file&#10;dotenv.config();&#10;&#10;const app = express();&#10;const port = process.env.PORT || 8081;&#10;&#10;app.use(cors());&#10;app.use(express.json());&#10;&#10;// Create a MySQL connection using environment variables&#10;const db = mysql.createConnection({&#10;  host: process.env.DB_HOST,&#10;  user: process.env.DB_USER,&#10;  password: process.env.DB_PASSWORD,&#10;  database: process.env.DB_DATABASE,&#10;});&#10;&#10;db.connect((err) =&amp;gt; {&#10;  if (err) {&#10;    console.error(&amp;quot;Error connecting to the database:&amp;quot;, err);&#10;  } else {&#10;    console.log(&amp;quot;Connected to the MySQL database.&amp;quot;);&#10;  }&#10;});&#10;&#10;const doctorRoutes = require(&amp;quot;./routes/doctorRoutes&amp;quot;);&#10;const patientRoutes = require(&amp;quot;./routes/patinetRoutes&amp;quot;);&#10;&#10;app.use(&amp;quot;/doctors&amp;quot;, doctorRoutes);&#10;app.use(&amp;quot;/patients&amp;quot;, patientRoutes);&#10;&#10;app.post(&amp;quot;/login&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;SELECT * FROM login WHERE `email`=? AND `password`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.email, req.body.password, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Database error&amp;quot; });&#10;      }&#10;      if (data.length &amp;gt; 0) {&#10;        const user = data[0];&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          user: {&#10;            login_id: user.login_id,&#10;            name: user.name,&#10;            role: user.role,&#10;            email: user.email,&#10;          },&#10;        });&#10;      } else {&#10;        return res.json({ status: &amp;quot;Failed&amp;quot;, message: &amp;quot;Invalid credentials&amp;quot; });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;&#10;app.post(&amp;quot;/signup&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;INSERT INTO login (`name`, `email`, `password`, `role`) VALUES (?)&amp;quot;;&#10;  const values = [&#10;    req.body.name,&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Error during signup&amp;quot; });&#10;    }&#10;    return res.json({ status: &amp;quot;Success&amp;quot;, message: &amp;quot;Signup successful&amp;quot; });&#10;  });&#10;});&#10;&#10;app.post(&amp;quot;/forgotpassword&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;UPDATE login SET `password`=? WHERE `email`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.password, req.body.email, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Error executing query:&amp;quot;, err);&#10;        return res.json({&#10;          status: &amp;quot;Error&amp;quot;,&#10;          message: &amp;quot;Error updating password&amp;quot;,&#10;        });&#10;      }&#10;      if (data.affectedRows &amp;gt; 0) {&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          message: &amp;quot;Password updated successfully&amp;quot;,&#10;        });&#10;      } else {&#10;        return res.json({&#10;          status: &amp;quot;Failed&amp;quot;,&#10;          message: &amp;quot;No user found with provided details&amp;quot;,&#10;        });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;// Fetch patient details by email&#10;app.get(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const sql = &amp;quot;SELECT * FROM patient WHERE email = ?&amp;quot;;&#10;&#10;  db.query(sql, [email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error fetching patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.length === 0) {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;&#10;    const patient = data[0];&#10;    return res.json(patient);&#10;  });&#10;});&#10;&#10;// Update patient details by email&#10;app.put(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const { name, email: newEmail, number, adhar_no, dob, gender, insurance, address } = req.body;&#10;&#10;  const sql = &amp;quot;UPDATE patient SET name =?, email =?, number =?, adhar_no =?, dob =?, gender =?, insurance =?, address =? WHERE email =?&amp;quot;;&#10;&#10;  db.query(sql, [name, newEmail, number, adhar_no, dob, gender, insurance, address, email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;    } else {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;  });&#10;});&#10;&#10;app.listen(port, () =&amp;gt; console.log(`Server running on port ${port}`));&#10;and this is my login.js code import React, { useState } from &amp;quot;react&amp;quot;;&#10;import { Link, useNavigate } from &amp;quot;react-router-dom&amp;quot;;&#10;import Validation from &amp;quot;./LoginValidation&amp;quot;;&#10;import axios from &amp;quot;axios&amp;quot;;&#10;&#10;function Login() {&#10;  const [values, setValues] = useState({&#10;    email: &amp;quot;&amp;quot;,&#10;    password: &amp;quot;&amp;quot;,&#10;    role: &amp;quot;Doctor&amp;quot;, // Default role&#10;  });&#10;&#10;  const [errors, setErrors] = useState({});&#10;  const navigate = useNavigate();&#10;&#10;  const handleInput = (event) =&amp;gt; {&#10;    setValues((prev) =&amp;gt; ({ ...prev, [event.target.name]: event.target.value }));&#10;  };&#10;&#10;const handleSubmit = (event) =&amp;gt; {&#10;    event.preventDefault();&#10;    const validationErrors = Validation(values);&#10;    setErrors(validationErrors);&#10;&#10;    if (Object.keys(validationErrors).length === 0) {&#10;        axios&#10;          .post(&amp;quot;http://localhost:8081/login&amp;quot;, values)&#10;          .then((res) =&amp;gt; {&#10;            if (res.data.status === &amp;quot;Success&amp;quot;) {&#10;              // Ensure the structure of the user object is correct&#10;              localStorage.setItem(&amp;quot;user&amp;quot;, JSON.stringify(res.data.user));&#10;&#10;              if (values.role === &amp;quot;Doctor&amp;quot;) {&#10;                navigate(&amp;quot;/doctor-home&amp;quot;);&#10;              } else if (values.role === &amp;quot;Receptionist&amp;quot;) {&#10;                navigate(&amp;quot;/receptionist-home&amp;quot;);&#10;              } else {&#10;                navigate(&amp;quot;/home&amp;quot;);&#10;              }&#10;            } else {&#10;              alert(&amp;quot;No record exist&amp;quot;);&#10;            }&#10;          })&#10;          .catch((err) =&amp;gt; console.log(err));&#10;    }&#10;  };&#10;&#10;&#10;  return (&#10;    &amp;lt;div className=&amp;quot;d-flex justify-content-center align-items-center vh-100&amp;quot;&amp;gt;&#10;      &amp;lt;div className=&amp;quot;bg-white p-3 rounded w-25&amp;quot;&amp;gt;&#10;        &amp;lt;h2&amp;gt;Sign In&amp;lt;/h2&amp;gt;&#10;        &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#10;          &amp;lt;div className=&amp;quot;mb-3&amp;quot;&amp;gt;&#10;            &amp;lt;label htmlFor=&amp;quot;email&amp;quot;&amp;gt;Email&amp;lt;/label&amp;gt;&#10;            &amp;lt;input&#10;              type=&amp;quot;email&amp;quot;&#10;              placeholder=&amp;quot;Enter Email&amp;quot;&#10;              name=&amp;quot;email&amp;quot;&#10;              onChange={handleInput}&#10;              className=&amp;quot;form-control rounded-0&amp;quot;&#10;            /&amp;gt;&#10;            {errors.email &amp;amp;&amp;amp; (&#10;              &amp;lt;span className=&amp;quot;text-danger&amp;quot;&amp;gt;{errors.email}&amp;lt;/span&amp;gt;&#10;            )}&#10;          &amp;lt;/div&amp;gt;&#10;          &amp;lt;div className=&amp;quot;mb-3&amp;quot;&amp;gt;&#10;            &amp;lt;label htmlFor=&amp;quot;password&amp;quot;&amp;gt;Password&amp;lt;/label&amp;gt;&#10;            &amp;lt;input&#10;              type=&amp;quot;password&amp;quot;&#10;              name=&amp;quot;password&amp;quot;&#10;              placeholder=&amp;quot;Enter Password&amp;quot;&#10;              onChange={handleInput}&#10;              className=&amp;quot;form-control rounded-0&amp;quot;&#10;            /&amp;gt;&#10;            {errors.password &amp;amp;&amp;amp; (&#10;              &amp;lt;span className=&amp;quot;text-danger&amp;quot;&amp;gt;{errors.password}&amp;lt;/span&amp;gt;&#10;            )}&#10;          &amp;lt;/div&amp;gt;&#10;          &amp;lt;div className=&amp;quot;mb-3&amp;quot;&amp;gt;&#10;            &amp;lt;label htmlFor=&amp;quot;role&amp;quot;&amp;gt;Role&amp;lt;/label&amp;gt;&#10;            &amp;lt;select&#10;              name=&amp;quot;role&amp;quot;&#10;              onChange={handleInput}&#10;              className=&amp;quot;form-control rounded-0&amp;quot;&#10;            &amp;gt;&#10;              &amp;lt;option value=&amp;quot;Doctor&amp;quot;&amp;gt;Doctor&amp;lt;/option&amp;gt;&#10;              &amp;lt;option value=&amp;quot;Patient&amp;quot;&amp;gt;Patient&amp;lt;/option&amp;gt;&#10;              &amp;lt;option value=&amp;quot;Receptionist&amp;quot;&amp;gt;Receptionist&amp;lt;/option&amp;gt;&#10;            &amp;lt;/select&amp;gt;&#10;          &amp;lt;/div&amp;gt;&#10;          &amp;lt;button type=&amp;quot;submit&amp;quot; className=&amp;quot;btn btn-success w-100&amp;quot;&amp;gt;&#10;            &amp;lt;strong&amp;gt;Log In&amp;lt;/strong&amp;gt;&#10;          &amp;lt;/button&amp;gt;&#10;          &amp;lt;p&amp;gt;You agree to TnC&amp;lt;/p&amp;gt;&#10;          &amp;lt;Link to=&amp;quot;/signup&amp;quot; className=&amp;quot;btn btn-default border w-100 bg-light&amp;quot;&amp;gt;&#10;            &amp;lt;strong&amp;gt;Create Account&amp;lt;/strong&amp;gt;&#10;          &amp;lt;/Link&amp;gt;&#10;          &amp;lt;br /&amp;gt;&#10;          &amp;lt;br /&amp;gt;&#10;          &amp;lt;Link&#10;            to=&amp;quot;/forgotpassword&amp;quot;&#10;            className=&amp;quot;btn btn-default border w-100 bg-light&amp;quot;&#10;          &amp;gt;&#10;            &amp;lt;strong&amp;gt;Forgot Password&amp;lt;/strong&amp;gt;&#10;          &amp;lt;/Link&amp;gt;&#10;        &amp;lt;/form&amp;gt;&#10;      &amp;lt;/div&amp;gt;&#10;    &amp;lt;/div&amp;gt;&#10;  );&#10;}&#10;&#10;export default Login;&#10;&#10;" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="To store the user details entered in the popup form in the `patient` table, you can make an API call to your server with the form data. Here's an example of how you can modify the `Home.js` component to achieve this:&#10;&#10;1. First, add a new state variable to store the form data:&#10;&#10;```jsx&#10;const [formData, setFormData] = useState({&#10;  mobile: '',&#10;  aadhaar: '',&#10;  gender: '',&#10;  dob: '',&#10;  address: '',&#10;});&#10;```&#10;&#10;2. Update the input field handlers to update the `formData` state:&#10;&#10;```jsx&#10;const handleMobileChange = (e) =&gt; {&#10;  const value = e.target.value;&#10;  if (/^\d*$/.test(value) &amp;&amp; value.length &lt;= 10) {&#10;    setFormData((prevData) =&gt; ({ ...prevData, mobile: value }));&#10;    setMobile(value);&#10;  }&#10;};&#10;&#10;const handleAadhaarChange = (e) =&gt; {&#10;  const value = e.target.value.replace(/\s/g, '');&#10;  if (/^\d*$/.test(value) &amp;&amp; value.length &lt;= 12) {&#10;    const formattedValue = value.replace(/(.{4})/g, '$1 ').trim();&#10;    setFormData((prevData) =&gt; ({ ...prevData, aadhaar: formattedValue }));&#10;    setAadhaar(formattedValue);&#10;  }&#10;};&#10;&#10;const handleGenderChange = (e) =&gt; {&#10;  setFormData((prevData) =&gt; ({ ...prevData, gender: e.target.value }));&#10;  setGender(e.target.value);&#10;};&#10;&#10;const handleDobChange = (e) =&gt; {&#10;  const value = e.target.value;&#10;  setFormData((prevData) =&gt; ({ ...prevData, dob: value }));&#10;  setDob(value);&#10;  calculateAge(value);&#10;};&#10;&#10;const handleAddressChange = (e) =&gt; {&#10;  setFormData((prevData) =&gt; ({ ...prevData, address: e.target.value }));&#10;};&#10;```&#10;&#10;3. Add a new function to handle form submission and make the API call:&#10;&#10;```jsx&#10;const handleSubmit = async (e) =&gt; {&#10;  e.preventDefault();&#10;&#10;  try {&#10;    const user = JSON.parse(localStorage.getItem('user'));&#10;    const response = await axios.post('/patients', {&#10;      ...formData,&#10;      email: user.email,&#10;      name: user.name,&#10;      role: user.role,&#10;      age: age,&#10;    });&#10;&#10;    if (response.data.status === 'Success') {&#10;      // Handle successful submission&#10;      console.log('Patient details saved successfully');&#10;      handleClosePopup();&#10;    } else {&#10;      // Handle error&#10;      console.error('Error saving patient details:', response.data.message);&#10;    }&#10;  } catch (error) {&#10;    console.error('Error saving patient details:', error);&#10;  }&#10;};&#10;```&#10;&#10;4. Update the form in the popup to include the new input field and submit handler:&#10;&#10;```jsx&#10;&lt;form onSubmit={handleSubmit}&gt;&#10;  {/* ... */}&#10;  &lt;label htmlFor=&quot;address&quot;&gt;Address:&lt;/label&gt;&#10;  &lt;input&#10;    type=&quot;text&quot;&#10;    className=&quot;form-control&quot;&#10;    id=&quot;address&quot;&#10;    placeholder=&quot;Enter Your Address&quot;&#10;    value={formData.address}&#10;    onChange={handleAddressChange}&#10;    required&#10;  /&gt;&#10;  &lt;button type=&quot;submit&quot; className=&quot;btn btn-primary&quot;&gt;&#10;    Submit&#10;  &lt;/button&gt;&#10;&lt;/form&gt;&#10;```&#10;&#10;5. On the server-side, you'll need to create a new route to handle the POST request for saving patient details. In your `server.js` file, add the following route:&#10;&#10;```javascript&#10;app.post('/patients', (req, res) =&gt; {&#10;  const {&#10;    name,&#10;    email,&#10;    role,&#10;    mobile,&#10;    aadhaar,&#10;    gender,&#10;    dob,&#10;    age,&#10;    address,&#10;  } = req.body;&#10;&#10;  const sql =&#10;    'INSERT INTO patient (name, email, role, number, adhar_no, gender, dob, age, address) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)';&#10;  const values = [name, email, role, mobile, aadhaar, gender, dob, age, address];&#10;&#10;  db.query(sql, values, (err, result) =&gt; {&#10;    if (err) {&#10;      console.error('Error saving patient details:', err);&#10;      return res.json({ status: 'Error', message: 'Error saving patient details' });&#10;    }&#10;&#10;    return res.json({ status: 'Success', message: 'Patient details saved successfully' });&#10;  });&#10;});&#10;```&#10;&#10;With these changes, when the user submits the form in the popup, the form data will be sent to the server, and the patient details will be saved in the `patient` table.&#10;&#10;Note: Make sure to handle any additional validation or sanitization of the form data as per your requirements." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="give me complete code " />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="Sure, here's the complete code for the `Home.js` component with the changes to save patient details:&#10;&#10;```jsx&#10;import React, { useState, useEffect } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import './App.css';&#10;import 'bootstrap/dist/css/bootstrap.min.css';&#10;import { FaCheckDouble, FaClock, FaHeadset, FaHouseUser } from &quot;react-icons/fa&quot;;&#10;import img1 from &quot;./images/specialities-01.png&quot;;&#10;import img2 from &quot;./images/specialities-02.png&quot;;&#10;import img3 from &quot;./images/specialities-03.png&quot;;&#10;import img4 from &quot;./images/specialities-04.png&quot;;&#10;import img5 from &quot;./images/specialities-05.png&quot;;&#10;import axios from 'axios';&#10;&#10;function Home() {&#10;    const user = JSON.parse(localStorage.getItem('user'));&#10;    const [filter, setFilter] = useState({ name: '', specialization: '', fees: '', location: '' });&#10;    const [doctors, setDoctors] = useState([]);&#10;    const [showPopup, setShowPopup] = useState(false);&#10;    const [mobile, setMobile] = useState('');&#10;    const [aadhaar, setAadhaar] = useState('');&#10;    const [gender, setGender] = useState('');&#10;    const [dob, setDob] = useState('');&#10;    const [age, setAge] = useState(null);&#10;    const [maxBirthDate, setMaxBirthDate] = useState('');&#10;    const [formData, setFormData] = useState({&#10;        mobile: '',&#10;        aadhaar: '',&#10;        gender: '',&#10;        dob: '',&#10;        address: '',&#10;    });&#10;&#10;    useEffect(() =&gt; {&#10;        const fetchDoctors = async () =&gt; {&#10;            try {&#10;                const response = await axios.get('http://localhost:8081/doctors');&#10;                setDoctors(response.data);&#10;            } catch (error) {&#10;                console.error('Failed to fetch doctors:', error);&#10;            }&#10;        };&#10;        fetchDoctors();&#10;    }, []);&#10;&#10;    useEffect(() =&gt; {&#10;        setShowPopup(true);&#10;        const maxDate = new Date();&#10;        maxDate.setFullYear(maxDate.getFullYear() - 110);&#10;        setMaxBirthDate(maxDate.toISOString().split('T')[0]);&#10;    }, []);&#10;&#10;    const bufferToBase64 = (buffer) =&gt; {&#10;        let binary = '';&#10;        const bytes = new Uint8Array(buffer.data);&#10;        const len = bytes.byteLength;&#10;        for (let i = 0; i &lt; len; i++) {&#10;            binary += String.fromCharCode(bytes[i]);&#10;        }&#10;        return window.btoa(binary);&#10;    };&#10;&#10;    const filteredDoctors = doctors.filter((doctor) =&gt;&#10;        doctor.name.toLowerCase().includes(filter.name.toLowerCase()) &amp;&amp;&#10;        doctor.specialization.toLowerCase().includes(filter.specialization.toLowerCase()) &amp;&amp;&#10;        (filter.fees === '' || doctor.fees.includes(filter.fees)) &amp;&amp;&#10;        (filter.location === '' || doctor.location.toLowerCase().includes(filter.location.toLowerCase()))&#10;    );&#10;&#10;    const handleClosePopup = () =&gt; {&#10;        setShowPopup(false);&#10;    };&#10;&#10;    const handleMobileChange = (e) =&gt; {&#10;        const value = e.target.value;&#10;        if (/^\d*$/.test(value) &amp;&amp; value.length &lt;= 10) {&#10;            setFormData((prevData) =&gt; ({ ...prevData, mobile: value }));&#10;            setMobile(value);&#10;        }&#10;    };&#10;&#10;    const handleAadhaarChange = (e) =&gt; {&#10;        const value = e.target.value.replace(/\s/g, '');&#10;        if (/^\d*$/.test(value) &amp;&amp; value.length &lt;= 12) {&#10;            const formattedValue = value.replace(/(.{4})/g, '$1 ').trim();&#10;            setFormData((prevData) =&gt; ({ ...prevData, aadhaar: formattedValue }));&#10;            setAadhaar(formattedValue);&#10;        }&#10;    };&#10;&#10;    const handleGenderChange = (e) =&gt; {&#10;        setFormData((prevData) =&gt; ({ ...prevData, gender: e.target.value }));&#10;        setGender(e.target.value);&#10;    };&#10;&#10;    const handleDobChange = (e) =&gt; {&#10;        const value = e.target.value;&#10;        setFormData((prevData) =&gt; ({ ...prevData, dob: value }));&#10;        setDob(value);&#10;        calculateAge(value);&#10;    };&#10;&#10;    const handleAddressChange = (e) =&gt; {&#10;        setFormData((prevData) =&gt; ({ ...prevData, address: e.target.value }));&#10;    };&#10;&#10;    const calculateAge = (dob) =&gt; {&#10;        const birthDate = new Date(dob);&#10;        const today = new Date();&#10;&#10;        if (birthDate &gt; today) {&#10;            setAge(null);&#10;        } else {&#10;            let age = today.getFullYear() - birthDate.getFullYear();&#10;            const monthDifference = today.getMonth() - birthDate.getMonth();&#10;            if (monthDifference &lt; 0 || (monthDifference === 0 &amp;&amp; today.getDate() &lt; birthDate.getDate())) {&#10;                age--;&#10;            }&#10;            setAge(Math.min(age, 110));&#10;        }&#10;    };&#10;&#10;    const handleSubmit = async (e) =&gt; {&#10;        e.preventDefault();&#10;&#10;        try {&#10;            const response = await axios.post('/patients', {&#10;                ...formData,&#10;                email: user.email,&#10;                name: user.name,&#10;                role: user.role,&#10;                age: age,&#10;            });&#10;&#10;            if (response.data.status === 'Success') {&#10;                console.log('Patient details saved successfully');&#10;                handleClosePopup();&#10;            } else {&#10;                console.error('Error saving patient details:', response.data.message);&#10;            }&#10;        } catch (error) {&#10;            console.error('Error saving patient details:', error);&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;&gt;&#10;            {showPopup &amp;&amp; (&#10;                &lt;div className=&quot;popup&quot;&gt;&#10;                    &lt;div className=&quot;popup-content&quot;&gt;&#10;                        &lt;span className=&quot;close-popup&quot; onClick={handleClosePopup}&gt;&amp;times;&lt;/span&gt;&#10;                        &lt;h2&gt;Complete Your Profile&lt;/h2&gt;&#10;                        &lt;form onSubmit={handleSubmit}&gt;&#10;                            &lt;div className=&quot;form-group&quot;&gt;&#10;                                &lt;label htmlFor=&quot;mobile&quot;&gt;Mobile No:&lt;/label&gt;&#10;                                &lt;input&#10;                                    type=&quot;tel&quot;&#10;                                    className=&quot;form-control&quot;&#10;                                    id=&quot;mobile&quot;&#10;                                    placeholder=&quot;Enter Your Mobile Number&quot;&#10;                                    value={mobile}&#10;                                    onChange={handleMobileChange}&#10;                                    required&#10;                                /&gt;&#10;                                {mobile.length &gt; 0 &amp;&amp; mobile.length &lt; 10 &amp;&amp; (&#10;                                    &lt;small className=&quot;text-danger&quot;&gt;Mobile number must be exactly 10 digits long&lt;/small&gt;&#10;                                )}&#10;                                &lt;label htmlFor=&quot;gender&quot;&gt;Gender:&lt;/label&gt;&#10;                                &lt;select&#10;                                    className=&quot;form-control&quot;&#10;                                    id=&quot;gender&quot;&#10;                                    value={gender}&#10;                                    onChange={handleGenderChange}&#10;                                    required&#10;                                &gt;&#10;                                    &lt;option value=&quot;&quot;&gt;Select Gender&lt;/option&gt;&#10;                                    &lt;option value=&quot;male&quot;&gt;Male&lt;/option&gt;&#10;                                    &lt;option value=&quot;female&quot;&gt;Female&lt;/option&gt;&#10;                                    &lt;option value=&quot;other&quot;&gt;Other&lt;/option&gt;&#10;                                &lt;/select&gt;&#10;&#10;                                &lt;label htmlFor=&quot;dob&quot;&gt;Date of Birth:&lt;/label&gt;&#10;                                &lt;input&#10;                                    type=&quot;date&quot;&#10;                                    className=&quot;form-control&quot;&#10;                                    id=&quot;dob&quot;&#10;                                    value={dob}&#10;                                    onChange={handleDobChange}&#10;                                    max={maxBirthDate}&#10;                                    required&#10;                                /&gt;&#10;                                {age !== null &amp;&amp; (&#10;                                    &lt;p&gt;Age: {age} years&lt;/p&gt;&#10;                                )}&#10;                                &lt;label htmlFor=&quot;aadhaar&quot;&gt;Aadhaar Card No:&lt;/label&gt;&#10;                                &lt;input&#10;                                    type=&quot;text&quot;&#10;                                    className=&quot;form-control&quot;&#10;                                    id=&quot;aadhaar&quot;&#10;                                    placeholder=&quot;Enter Your Aadhaar Number&quot;&#10;                                    value={aadhaar}&#10;                                    onChange={handleAadhaarChange}&#10;                                    required&#10;                                /&gt;&#10;                                {aadhaar.replace(/\s/g, '').length &gt; 0 &amp;&amp; aadhaar.replace(/\s/g, '').length &lt; 12 &amp;&amp; (&#10;                                    &lt;small className=&quot;text-danger&quot;&gt;Aadhaar number must be exactly 12 digits long&lt;/small&gt;&#10;                                )}&#10;&#10;                                &lt;label htmlFor=&quot;address&quot;&gt;Address:&lt;/label&gt;&#10;                                &lt;input&#10;                                    type=&quot;text&quot;&#10;                                    className=&quot;form-control&quot;&#10;                                    id=&quot;address&quot;&#10;                                    placeholder=&quot;Enter Your Address&quot;&#10;                                    value={formData.address}&#10;                                    onChange={handleAddressChange}&#10;                                    required&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;button type=&quot;submit&quot; className=&quot;btn btn-primary&quot;&gt;Submit&lt;/button&gt;&#10;                        &lt;/form&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;            {/* Rest of the component code */}&#10;        &lt;/&gt;&#10;    );&#10;}&#10;&#10;export default Home;&#10;```&#10;&#10;And here's the code for the server-side route to handle the POST request for saving patient details in the `server.js` file:&#10;&#10;```javascript&#10;app.post('/patients', (req, res) =&gt; {&#10;  const {&#10;    name,&#10;    email,&#10;    role,&#10;    mobile,&#10;    aadhaar,&#10;    gender,&#10;    dob,&#10;    age,&#10;    address,&#10;  } = req.body;&#10;&#10;  const sql =&#10;    'INSERT INTO patient (name, email, role, number, adhar_no, gender, dob, age, address) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)';&#10;  const values = [name, email, role, mobile, aadhaar, gender, dob, age, address];&#10;&#10;  db.query(sql, values, (err, result) =&gt; {&#10;    if (err) {&#10;      console.error('Error saving patient details:', err);&#10;      return res.json({ status: 'Error', message: 'Error saving patient details' });&#10;    }&#10;&#10;    return res.json({ status: 'Success', message: 'Patient details saved successfully' });&#10;  });&#10;});&#10;```&#10;&#10;Make sure to import the necessary dependencies (`axios`) and configure the server URL correctly in the `axios.post('/patients', ...)` call." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="for above code i am getting this in form Date of Birth: 12/11/2001&#10;Value must be 06/04/1914 or earlier." />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="The issue you're facing is due to the `max` attribute on the date input field. The `max` attribute sets the maximum allowed date value, and you're setting it to the current date minus 110 years. However, this can cause issues if the user's date of birth is before that maximum allowed date.&#10;&#10;To fix this, you can remove the `max` attribute and handle the age validation in the `calculateAge` function. Here's the updated code:&#10;&#10;```jsx&#10;// Remove the max attribute from the date input field&#10;&lt;input&#10;    type=&quot;date&quot;&#10;    className=&quot;form-control&quot;&#10;    id=&quot;dob&quot;&#10;    value={dob}&#10;    onChange={handleDobChange}&#10;    required&#10;/&gt;&#10;&#10;// Update the calculateAge function&#10;const calculateAge = (dob) =&gt; {&#10;    const birthDate = new Date(dob);&#10;    const today = new Date();&#10;    const maxAge = 110; // Set the maximum allowed age&#10;&#10;    if (birthDate &gt; today) {&#10;        setAge(null);&#10;        return;&#10;    }&#10;&#10;    let age = today.getFullYear() - birthDate.getFullYear();&#10;    const monthDifference = today.getMonth() - birthDate.getMonth();&#10;    if (monthDifference &lt; 0 || (monthDifference === 0 &amp;&amp; today.getDate() &lt; birthDate.getDate())) {&#10;        age--;&#10;    }&#10;&#10;    if (age &gt; maxAge) {&#10;        setAge(null);&#10;        setDob('');&#10;        alert(`Age cannot be more than ${maxAge} years. Please enter a valid date of birth.`);&#10;    } else {&#10;        setAge(age);&#10;    }&#10;};&#10;```&#10;&#10;In the updated `calculateAge` function, we first check if the selected date of birth is in the future. If it is, we reset the age to `null` and return.&#10;&#10;Then, we calculate the age as before, but we also check if the calculated age is greater than the maximum allowed age (110 years in this case). If it is, we reset the age to `null`, clear the `dob` state, and show an alert message to the user asking them to enter a valid date of birth.&#10;&#10;With this change, users will be able to enter any date of birth, and the age will be calculated correctly. If the entered date of birth results in an age greater than the maximum allowed age, an alert will be shown, and the user will need to enter a valid date of birth." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="in this code when i click on submit button after entering details in popup fform data is not store in patient table here is my home.js code import React, { useState, useEffect } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import './App.css';&#10;import 'bootstrap/dist/css/bootstrap.min.css';&#10;import { FaCheckDouble, FaClock, FaHeadset, FaHouseUser } from &amp;quot;react-icons/fa&amp;quot;;&#10;import img1 from &amp;quot;./images/specialities-01.png&amp;quot;;&#10;import img2 from &amp;quot;./images/specialities-02.png&amp;quot;;&#10;import img3 from &amp;quot;./images/specialities-03.png&amp;quot;;&#10;import img4 from &amp;quot;./images/specialities-04.png&amp;quot;;&#10;import img5 from &amp;quot;./images/specialities-05.png&amp;quot;;&#10;import axios from 'axios';&#10;&#10;function Home() {&#10;    const user = JSON.parse(localStorage.getItem('user'));&#10;    const [filter, setFilter] = useState({ name: '', specialization: '', fees: '', location: '' });&#10;    const [doctors, setDoctors] = useState([]);&#10;    const [showPopup, setShowPopup] = useState(false);&#10;    const [mobile, setMobile] = useState('');&#10;    const [aadhaar, setAadhaar] = useState('');&#10;    const [gender, setGender] = useState('');&#10;    const [dob, setDob] = useState('');&#10;    const [age, setAge] = useState(null);&#10;    const [maxBirthDate, setMaxBirthDate] = useState('');&#10;    const [formData, setFormData] = useState({&#10;        mobile: '',&#10;        aadhaar: '',&#10;        gender: '',&#10;        dob: '',&#10;        address: '',&#10;    });&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const fetchDoctors = async () =&amp;gt; {&#10;            try {&#10;                const response = await axios.get('http://localhost:8081/doctors');&#10;                setDoctors(response.data);&#10;            } catch (error) {&#10;                console.error('Failed to fetch doctors:', error);&#10;            }&#10;        };&#10;        fetchDoctors();&#10;    }, []);&#10;&#10;    useEffect(() =&amp;gt; {&#10;        setShowPopup(true);&#10;        const maxDate = new Date();&#10;        maxDate.setFullYear(maxDate.getFullYear() - 110);&#10;        setMaxBirthDate(maxDate.toISOString().split('T')[0]);&#10;    }, []);&#10;&#10;    const bufferToBase64 = (buffer) =&amp;gt; {&#10;        let binary = '';&#10;        const bytes = new Uint8Array(buffer.data);&#10;        const len = bytes.byteLength;&#10;        for (let i = 0; i &amp;lt; len; i++) {&#10;            binary += String.fromCharCode(bytes[i]);&#10;        }&#10;        return window.btoa(binary);&#10;    };&#10;&#10;    const filteredDoctors = doctors.filter((doctor) =&amp;gt;&#10;        doctor.name.toLowerCase().includes(filter.name.toLowerCase()) &amp;amp;&amp;amp;&#10;        doctor.specialization.toLowerCase().includes(filter.specialization.toLowerCase()) &amp;amp;&amp;amp;&#10;        (filter.fees === '' || doctor.fees.includes(filter.fees)) &amp;amp;&amp;amp;&#10;        (filter.location === '' || doctor.location.toLowerCase().includes(filter.location.toLowerCase()))&#10;    );&#10;&#10;    const handleClosePopup = () =&amp;gt; {&#10;        setShowPopup(false);&#10;    };&#10;&#10;    const handleMobileChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 10) {&#10;            setFormData((prevData) =&amp;gt; ({ ...prevData, mobile: value }));&#10;            setMobile(value);&#10;        }&#10;    };&#10;&#10;    const handleAadhaarChange = (e) =&amp;gt; {&#10;        const value = e.target.value.replace(/\s/g, '');&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 12) {&#10;            const formattedValue = value.replace(/(.{4})/g, '$1 ').trim();&#10;            setFormData((prevData) =&amp;gt; ({ ...prevData, aadhaar: formattedValue }));&#10;            setAadhaar(formattedValue);&#10;        }&#10;    };&#10;&#10;    const handleGenderChange = (e) =&amp;gt; {&#10;        setFormData((prevData) =&amp;gt; ({ ...prevData, gender: e.target.value }));&#10;        setGender(e.target.value);&#10;    };&#10;&#10;    const handleDobChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        setFormData((prevData) =&amp;gt; ({ ...prevData, dob: value }));&#10;        setDob(value);&#10;        calculateAge(value);&#10;    };&#10;&#10;    const handleAddressChange = (e) =&amp;gt; {&#10;        setFormData((prevData) =&amp;gt; ({ ...prevData, address: e.target.value }));&#10;    };&#10;&#10;    const calculateAge = (dob) =&amp;gt; {&#10;        const birthDate = new Date(dob);&#10;        const today = new Date();&#10;&#10;        if (birthDate &amp;gt; today) {&#10;            setAge(null);&#10;        } else {&#10;            let age = today.getFullYear() - birthDate.getFullYear();&#10;            const monthDifference = today.getMonth() - birthDate.getMonth();&#10;            if (monthDifference &amp;lt; 0 || (monthDifference === 0 &amp;amp;&amp;amp; today.getDate() &amp;lt; birthDate.getDate())) {&#10;                age--;&#10;            }&#10;            setAge(Math.min(age, 110));&#10;        }&#10;    };&#10;&#10;    const handleSubmit = async (e) =&amp;gt; {&#10;        e.preventDefault();&#10;&#10;        try {&#10;            const response = await axios.post('/patients', {&#10;                ...formData,&#10;                email: user.email,&#10;                name: user.name,&#10;                role: user.role,&#10;                age: age,&#10;            });&#10;&#10;            if (response.data.status === 'Success') {&#10;                console.log('Patient details saved successfully');&#10;                handleClosePopup();&#10;            } else {&#10;                console.error('Error saving patient details:', response.data.message);&#10;            }&#10;        } catch (error) {&#10;            console.error('Error saving patient details:', error);&#10;        }&#10;    };&#10;&#10;    return (&#10;        &amp;lt;&amp;gt;&#10;            {showPopup &amp;amp;&amp;amp; (&#10;                &amp;lt;div className=&amp;quot;popup&amp;quot;&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;popup-content&amp;quot;&amp;gt;&#10;                        &amp;lt;span className=&amp;quot;close-popup&amp;quot; onClick={handleClosePopup}&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Complete Your Profile&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;form-group&amp;quot;&amp;gt;&#10;                                &amp;lt;label htmlFor=&amp;quot;mobile&amp;quot;&amp;gt;Mobile No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;tel&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;mobile&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Mobile Number&amp;quot;&#10;                                    value={mobile}&#10;                                    onChange={handleMobileChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {mobile.length &amp;gt; 0 &amp;amp;&amp;amp; mobile.length &amp;lt; 10 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Mobile number must be exactly 10 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;gender&amp;quot;&amp;gt;Gender:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;select&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;gender&amp;quot;&#10;                                    value={gender}&#10;                                    onChange={handleGenderChange}&#10;                                    required&#10;                                &amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;Select Gender&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;male&amp;quot;&amp;gt;Male&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;female&amp;quot;&amp;gt;Female&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;other&amp;quot;&amp;gt;Other&amp;lt;/option&amp;gt;&#10;                                &amp;lt;/select&amp;gt;&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;dob&amp;quot;&amp;gt;Date of Birth:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;date&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;dob&amp;quot;&#10;                                    value={dob}&#10;                                    onChange={handleDobChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {age !== null &amp;amp;&amp;amp; (&#10;                                    &amp;lt;p&amp;gt;Age: {age} years&amp;lt;/p&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;aadhaar&amp;quot;&amp;gt;Aadhaar Card No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;aadhaar&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Aadhaar Number&amp;quot;&#10;                                    value={aadhaar}&#10;                                    onChange={handleAadhaarChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {aadhaar.replace(/\s/g, '').length &amp;gt; 0 &amp;amp;&amp;amp; aadhaar.replace(/\s/g, '').length &amp;lt; 12 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Aadhaar number must be exactly 12 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;address&amp;quot;&amp;gt;Address:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;address&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Address&amp;quot;&#10;                                    value={formData.address}&#10;                                    onChange={handleAddressChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                            &amp;lt;button type=&amp;quot;submit&amp;quot; className=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&#10;                        &amp;lt;/form&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            )}&#10;            &amp;lt;section id=&amp;quot;hero&amp;quot; className=&amp;quot;d-flex align-items-center&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                        &amp;lt;p&amp;gt;TOTAL HEALTH CARE SOLUTION&amp;lt;/p&amp;gt;&#10;                        &amp;lt;h1&amp;gt;Your Most Trusted &amp;lt;br /&amp;gt;Health Partner&amp;lt;/h1&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;A repudiandae ipsam labore ipsa voluptatum quidem quae laudantium quisquam aperiam maiores sunt fugit,&amp;lt;/p&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;deserunt rem suscipit placeat.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;d-flex justify-content-start gap-2&amp;quot;&amp;gt;&#10;                        {/* Conditional rendering based on user role */}&#10;                        {user &amp;amp;&amp;amp; user.role === 'patient' &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {user &amp;amp;&amp;amp; (user.role === 'doctor' || user.role === 'receptionist') &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors-dashboard'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Track Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {/* Show 'Book Appointment' button if no user is logged in */}&#10;                        {!user &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;why-us mt-5 mt-md-0&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;content&amp;quot;&amp;gt;&#10;                                &amp;lt;h3&amp;gt;Why Choose Us?&amp;lt;/h3&amp;gt;&#10;                                &amp;lt;p&amp;gt;&#10;                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Duis aute irure dolor in reprehenderit&#10;                                    Asperiores dolores sed et. Tenetur quia eos. Autem tempore quibusdam vel necessitatibus optio ad corporis.&#10;                                &amp;lt;/p&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;Link style={{ textDecoration: 'none' }} to={'/about'} className=&amp;quot;more-btn&amp;quot;&amp;gt;Learn More &amp;lt;i className=&amp;quot;bx bx-chevron-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/Link&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-8 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;icon-boxes d-flex flex-column justify-content-center&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHouseUser className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Appointment&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;24 Hours Service&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Consequuntur sunt aut quasi enim aliquam quae harum pariatur laboris nisi ut aliquip&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHeadset className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Emergency Cases&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;h6 className='text-secondary'&amp;gt;+88 01751 040425&amp;lt;/h6&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Qui facilis perferendis quia maxime. Laborum excepturi pariatur laboriosam nihil, dolor molestias.&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaClock className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Working Hours&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;Timing schedule&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;ul className='list-group list-group-flush'&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sun - Wed : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;8:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Thus - Fri : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;9:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sat - Sun : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;10:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                            &amp;lt;/ul&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className='reco-doc'&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 mt-100 section-title text-center reco-doc-card'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Recommended Doctors&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;cardContainer&amp;quot;&amp;gt;&#10;                            {filteredDoctors.slice(0, 5).map((doctor, index) =&amp;gt; (&#10;                                &amp;lt;div key={index} className=&amp;quot;card&amp;quot;&amp;gt;&#10;                                    &amp;lt;img src={`data:image/jpeg;base64,${bufferToBase64(doctor.doc_pic)}`} alt={doctor.name} className=&amp;quot;image&amp;quot; /&amp;gt;&#10;                                    &amp;lt;h3&amp;gt;{doctor.name}&amp;lt;/h3&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Specialization:&amp;lt;/strong&amp;gt; {doctor.specialization}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Fees:&amp;lt;/strong&amp;gt; {doctor.fees}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Location:&amp;lt;/strong&amp;gt; {doctor.location}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;{doctor.description}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;button className=&amp;quot;bookButton&amp;quot;&amp;gt;Book Appointment&amp;lt;/button&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            ))}&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;section section-specialities position-relative&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 section-title text-center spec-header'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Clinic and Specialities&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;p className='m-0'&amp;gt;Lorem ipsum dolor sit amet consectetur adipisicing.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row justify-content-center&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-md-9&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;specialities-slider d-flex justify-content-center align-items-center gap-5&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img1} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Urology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img2} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Neurology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img3} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Orthopedic&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img4} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Cardiologist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img5} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Dentist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;    );&#10;}&#10;&#10;export default Home; and here is my server.js code const express = require(&amp;quot;express&amp;quot;);&#10;const mysql = require(&amp;quot;mysql2&amp;quot;);&#10;const cors = require(&amp;quot;cors&amp;quot;);&#10;const dotenv = require(&amp;quot;dotenv&amp;quot;);&#10;&#10;// Load environment variables from .env file&#10;dotenv.config();&#10;&#10;const app = express();&#10;const port = process.env.PORT || 8081;&#10;&#10;app.use(cors());&#10;app.use(express.json());&#10;&#10;// Create a MySQL connection using environment variables&#10;const db = mysql.createConnection({&#10;  host: process.env.DB_HOST,&#10;  user: process.env.DB_USER,&#10;  password: process.env.DB_PASSWORD,&#10;  database: process.env.DB_DATABASE,&#10;});&#10;&#10;db.connect((err) =&amp;gt; {&#10;  if (err) {&#10;    console.error(&amp;quot;Error connecting to the database:&amp;quot;, err);&#10;  } else {&#10;    console.log(&amp;quot;Connected to the MySQL database.&amp;quot;);&#10;  }&#10;});&#10;&#10;const doctorRoutes = require(&amp;quot;./routes/doctorRoutes&amp;quot;);&#10;const patientRoutes = require(&amp;quot;./routes/patinetRoutes&amp;quot;);&#10;&#10;app.use(&amp;quot;/doctors&amp;quot;, doctorRoutes);&#10;app.use(&amp;quot;/patients&amp;quot;, patientRoutes);&#10;&#10;app.post(&amp;quot;/login&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;SELECT * FROM login WHERE `email`=? AND `password`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.email, req.body.password, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Database error&amp;quot; });&#10;      }&#10;      if (data.length &amp;gt; 0) {&#10;        const user = data[0];&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          user: {&#10;            login_id: user.login_id,&#10;            name: user.name,&#10;            role: user.role,&#10;            email: user.email,&#10;          },&#10;        });&#10;      } else {&#10;        return res.json({ status: &amp;quot;Failed&amp;quot;, message: &amp;quot;Invalid credentials&amp;quot; });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;&#10;app.post(&amp;quot;/signup&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;INSERT INTO login (`name`, `email`, `password`, `role`) VALUES (?)&amp;quot;;&#10;  const values = [&#10;    req.body.name,&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Error during signup&amp;quot; });&#10;    }&#10;    return res.json({ status: &amp;quot;Success&amp;quot;, message: &amp;quot;Signup successful&amp;quot; });&#10;  });&#10;});&#10;&#10;app.post(&amp;quot;/forgotpassword&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;UPDATE login SET `password`=? WHERE `email`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.password, req.body.email, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Error executing query:&amp;quot;, err);&#10;        return res.json({&#10;          status: &amp;quot;Error&amp;quot;,&#10;          message: &amp;quot;Error updating password&amp;quot;,&#10;        });&#10;      }&#10;      if (data.affectedRows &amp;gt; 0) {&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          message: &amp;quot;Password updated successfully&amp;quot;,&#10;        });&#10;      } else {&#10;        return res.json({&#10;          status: &amp;quot;Failed&amp;quot;,&#10;          message: &amp;quot;No user found with provided details&amp;quot;,&#10;        });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;// Fetch patient details by email&#10;app.get(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const sql = &amp;quot;SELECT * FROM patient WHERE email = ?&amp;quot;;&#10;&#10;  db.query(sql, [email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error fetching patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.length === 0) {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;&#10;    const patient = data[0];&#10;    return res.json(patient);&#10;  });&#10;});&#10;&#10;// Update patient details by email&#10;app.put(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const { name, email: newEmail, number, adhar_no, dob, gender, insurance, address } = req.body;&#10;&#10;  const sql = &amp;quot;UPDATE patient SET name =?, email =?, number =?, adhar_no =?, dob =?, gender =?, insurance =?, address =? WHERE email =?&amp;quot;;&#10;&#10;  db.query(sql, [name, newEmail, number, adhar_no, dob, gender, insurance, address, email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;    } else {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;  });&#10;});&#10;&#10;app.post('/patients', (req, res) =&amp;gt; {&#10;  const {&#10;    name,&#10;    email,&#10;    role,&#10;    mobile,&#10;    aadhaar,&#10;    gender,&#10;    dob,&#10;    age,&#10;    address,&#10;  } = req.body;&#10;&#10;  const sql =&#10;    'INSERT INTO patient (name, email, role, number, adhar_no, gender, dob, age, address) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)';&#10;  const values = [name, email, role, mobile, aadhaar, gender, dob, age, address];&#10;&#10;  db.query(sql, values, (err, result) =&amp;gt; {&#10;    if (err) {&#10;      console.error('Error saving patient details:', err);&#10;      return res.json({ status: 'Error', message: 'Error saving patient details' });&#10;    }&#10;&#10;    return res.json({ status: 'Success', message: 'Patient details saved successfully' });&#10;  });&#10;});&#10;&#10;&#10;app.listen(port, () =&amp;gt; console.log(`Server running on port ${port}`));&#10;&#10;" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="It seems that the issue might be related to the way you're sending the request from the client-side (React) to the server-side (Node.js).&#10;&#10;In your `Home.js` file, you're using `axios.post('/patients', ...)` to send the request to the server. However, in your `server.js` file, you're listening for requests on the `/patients` route without specifying the base URL.&#10;&#10;To fix this, you need to either:&#10;&#10;1. **Update the client-side code (`Home.js`):**&#10;   - Import the `axios` instance from a separate file where you can configure the base URL.&#10;   - Use the configured `axios` instance with the base URL when making requests.&#10;&#10;   Example:&#10;&#10;   ```javascript&#10;   // axiosInstance.js&#10;   import axios from 'axios';&#10;&#10;   const axiosInstance = axios.create({&#10;     baseURL: 'http://localhost:8081', // Replace with your server URL&#10;   });&#10;&#10;   export default axiosInstance;&#10;   ```&#10;&#10;   ```javascript&#10;   // Home.js&#10;   import axiosInstance from './axiosInstance';&#10;&#10;   // ...&#10;&#10;   const handleSubmit = async (e) =&gt; {&#10;     e.preventDefault();&#10;&#10;     try {&#10;       const response = await axiosInstance.post('/patients', {&#10;         // ...&#10;       });&#10;&#10;       // ...&#10;     } catch (error) {&#10;       console.error('Error saving patient details:', error);&#10;     }&#10;   };&#10;   ```&#10;&#10;2. **Update the server-side code (`server.js`):**&#10;   - Use the `app.use` middleware to specify a base URL for your routes.&#10;   - Move your routes inside the base URL middleware.&#10;&#10;   Example:&#10;&#10;   ```javascript&#10;   const app = express();&#10;   const port = process.env.PORT || 8081;&#10;&#10;   app.use(cors());&#10;   app.use(express.json());&#10;&#10;   // Create a base URL for your routes&#10;   app.use('/api', doctorRoutes);&#10;   app.use('/api', patientRoutes);&#10;&#10;   // ...&#10;&#10;   // Move your routes inside the base URL middleware&#10;   app.post('/api/patients', (req, res) =&gt; {&#10;     // ...&#10;   });&#10;   ```&#10;&#10;   In this case, you don't need to update the client-side code, as you'll be sending requests to `/api/patients` instead of just `/patients`.&#10;&#10;By following either of these approaches, you should be able to resolve the issue and successfully save patient details in the database." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="this is my home.js code import React, { useState, useEffect } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import './App.css';&#10;import 'bootstrap/dist/css/bootstrap.min.css';&#10;import { FaCheckDouble, FaClock, FaHeadset, FaHouseUser } from &amp;quot;react-icons/fa&amp;quot;;&#10;&#10;import img1 from &amp;quot;./images/specialities-01.png&amp;quot;;&#10;import img2 from &amp;quot;./images/specialities-02.png&amp;quot;;&#10;import img3 from &amp;quot;./images/specialities-03.png&amp;quot;;&#10;import img4 from &amp;quot;./images/specialities-04.png&amp;quot;;&#10;import img5 from &amp;quot;./images/specialities-05.png&amp;quot;;&#10;import axios from 'axios';&#10;&#10;function Home() {&#10;    const user = JSON.parse(localStorage.getItem('user'));&#10;    // const role = user.role; // Can be 'Doctor', 'Receptionist', or 'Patient'&#10;&#10;    const [filter, setFilter] = useState({ name: '', specialization: '', fees: '', location: '' });&#10;    const [doctors, setDoctors] = useState([]);&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const fetchDoctors = async () =&amp;gt; {&#10;            try {&#10;                const response = await axios.get('http://localhost:8081/doctors');&#10;                setDoctors(response.data);&#10;            } catch (error) {&#10;                console.error('Failed to fetch doctors:', error);&#10;            }&#10;        };&#10;        fetchDoctors();&#10;    }, []);&#10;&#10;    const bufferToBase64 = (buffer) =&amp;gt; {&#10;        let binary = '';&#10;        const bytes = new Uint8Array(buffer.data);&#10;        const len = bytes.byteLength;&#10;        for (let i = 0; i &amp;lt; len; i++) {&#10;            binary += String.fromCharCode(bytes[i]);&#10;        }&#10;        return window.btoa(binary);&#10;    };&#10;&#10;    const filteredDoctors = doctors.filter((doctor) =&amp;gt;&#10;        doctor.name.toLowerCase().includes(filter.name.toLowerCase()) &amp;amp;&amp;amp;&#10;        doctor.specialization.toLowerCase().includes(filter.specialization.toLowerCase()) &amp;amp;&amp;amp;&#10;        (filter.fees === '' || doctor.fees.includes(filter.fees)) &amp;amp;&amp;amp;&#10;        (filter.location === '' || doctor.location.toLowerCase().includes(filter.location.toLowerCase()))&#10;    );&#10;&#10;    const [showPopup, setShowPopup] = useState(true);&#10;    const [mobile, setMobile] = useState('');&#10;    const [aadhaar, setAadhaar] = useState('');&#10;    const [gender, setGender] = useState('');&#10;    const [dob, setDob] = useState('');&#10;    const [age, setAge] = useState(null);&#10;    const [maxBirthDate, setMaxBirthDate] = useState('');&#10;&#10;    const handleMobileChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 10) {&#10;            setMobile(value);&#10;        }&#10;    };&#10;&#10;    const handleAadhaarChange = (e) =&amp;gt; {&#10;        const value = e.target.value.replace(/\s/g, ''); // Remove spaces&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 12) {&#10;            const formattedValue = value.replace(/(.{4})/g, '$1 ').trim();&#10;            setAadhaar(formattedValue);&#10;        }&#10;    };&#10;&#10;    const handleGenderChange = (e) =&amp;gt; {&#10;        setGender(e.target.value);&#10;    };&#10;&#10;    const handleDobChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        setDob(value);&#10;        calculateAge(value);&#10;    };&#10;&#10;    const calculateAge = (dob) =&amp;gt; {&#10;        const birthDate = new Date(dob);&#10;        const today = new Date();&#10;&#10;        if (birthDate &amp;gt; today) {&#10;            setAge(null); // Reset age&#10;        } else {&#10;            let age = today.getFullYear() - birthDate.getFullYear();&#10;            const monthDifference = today.getMonth() - birthDate.getMonth();&#10;            if (monthDifference &amp;lt; 0 || (monthDifference === 0 &amp;amp;&amp;amp; today.getDate() &amp;lt; birthDate.getDate())) {&#10;                age--;&#10;            }&#10;            setAge(Math.min(age, 110)); // Limit age to maximum 110&#10;        }&#10;    };&#10;&#10;    const handleSubmit = async (e) =&amp;gt; {&#10;        e.preventDefault();&#10;        try {&#10;            const response = await axios.post('http://localhost:8081/patients', {&#10;                mobile,&#10;                aadhaar,&#10;                gender,&#10;                dob&#10;            });&#10;            console.log(response.data); // Log the response from the server&#10;            setShowPopup(false); // Close the popup after successful submission&#10;        } catch (error) {&#10;            console.error('Failed to submit patient details:', error);&#10;        }&#10;    };&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const maxDate = new Date();&#10;        maxDate.setFullYear(maxDate.getFullYear() - 18);&#10;        setMaxBirthDate(maxDate.toISOString().split('T')[0]);&#10;    }, []);&#10;&#10;    return (&#10;        &amp;lt;&amp;gt;&#10;            {showPopup &amp;amp;&amp;amp; (&#10;                &amp;lt;div className=&amp;quot;popup&amp;quot;&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;popup-content&amp;quot;&amp;gt;&#10;                        &amp;lt;span className=&amp;quot;close-popup&amp;quot; onClick={() =&amp;gt; setShowPopup(false)}&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Complete Your Profile&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;form-group&amp;quot;&amp;gt;&#10;                                &amp;lt;label htmlFor=&amp;quot;mobile&amp;quot;&amp;gt;Mobile No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;tel&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;mobile&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Mobile Number&amp;quot;&#10;                                    value={mobile}&#10;                                    onChange={handleMobileChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {mobile.length &amp;gt; 0 &amp;amp;&amp;amp; mobile.length &amp;lt; 10 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Mobile number must be exactly 10 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;gender&amp;quot;&amp;gt;Gender:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;select&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;gender&amp;quot;&#10;                                    value={gender}&#10;                                    onChange={handleGenderChange}&#10;                                    required&#10;                                &amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;Select Gender&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;male&amp;quot;&amp;gt;Male&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;female&amp;quot;&amp;gt;Female&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;other&amp;quot;&amp;gt;Other&amp;lt;/option&amp;gt;&#10;                                &amp;lt;/select&amp;gt;&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;dob&amp;quot;&amp;gt;Date of Birth:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;date&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;dob&amp;quot;&#10;                                    value={dob}&#10;                                    onChange={handleDobChange}&#10;                                    max={maxBirthDate} // Set max birth date&#10;                                    required&#10;                                /&amp;gt;&#10;                                {age !== null &amp;amp;&amp;amp; (&#10;                                    &amp;lt;p&amp;gt;Age: {age} years&amp;lt;/p&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;aadhaar&amp;quot;&amp;gt;Aadhaar Card No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;aadhaar&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Aadhaar Number&amp;quot;&#10;                                    value={aadhaar}&#10;                                    onChange={handleAadhaarChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {aadhaar.replace(/\s/g, '').length &amp;gt; 0 &amp;amp;&amp;amp; aadhaar.replace(/\s/g, '').length &amp;lt; 12 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Aadhaar number must be exactly 12 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;address&amp;quot;&amp;gt;Address:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;address&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Address&amp;quot;&#10;                                    required&#10;                                /&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                            &amp;lt;button type=&amp;quot;submit&amp;quot; className=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&#10;                        &amp;lt;/form&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            )}&#10;            &amp;lt;section id=&amp;quot;hero&amp;quot; className=&amp;quot;d-flex align-items-center&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                        &amp;lt;p&amp;gt;TOTAL HEALTH CARE SOLUTION&amp;lt;/p&amp;gt;&#10;                        &amp;lt;h1&amp;gt;Your Most Trusted &amp;lt;br /&amp;gt;Health Partner&amp;lt;/h1&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;A repudiandae ipsam labore ipsa voluptatum quidem quae laudantium quisquam aperiam maiores sunt fugit,&amp;lt;/p&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;deserunt rem suscipit placeat.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;d-flex justify-content-start gap-2&amp;quot;&amp;gt;&#10;                        {/* Conditional rendering based on user role */}&#10;                        {user &amp;amp;&amp;amp; user.role === 'patient' &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {user &amp;amp;&amp;amp; (user.role === 'doctor' || user.role === 'receptionist') &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors-dashboard'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Track Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {/* Show 'Book Appointment' button if no user is logged in */}&#10;                        {!user &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;why-us mt-5 mt-md-0&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;content&amp;quot;&amp;gt;&#10;                                &amp;lt;h3&amp;gt;Why Choose Us?&amp;lt;/h3&amp;gt;&#10;                                &amp;lt;p&amp;gt;&#10;                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Duis aute irure dolor in reprehenderit&#10;                                    Asperiores dolores sed et. Tenetur quia eos. Autem tempore quibusdam vel necessitatibus optio ad corporis.&#10;                                &amp;lt;/p&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;Link style={{ textDecoration: 'none' }} to={'/about'} className=&amp;quot;more-btn&amp;quot;&amp;gt;Learn More &amp;lt;i className=&amp;quot;bx bx-chevron-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/Link&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-8 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;icon-boxes d-flex flex-column justify-content-center&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHouseUser className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Appointment&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;24 Hours Service&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Consequuntur sunt aut quasi enim aliquam quae harum pariatur laboris nisi ut aliquip&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHeadset className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Emergency Cases&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;h6 className='text-secondary'&amp;gt;+88 01751 040425&amp;lt;/h6&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Qui facilis perferendis quia maxime. Laborum excepturi pariatur laboriosam nihil, dolor molestias.&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaClock className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Working Hours&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;Timing schedule&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;ul className='list-group list-group-flush'&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sun - Wed : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;8:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Thus - Fri : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;9:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sat - Sun : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;10:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                            &amp;lt;/ul&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className='reco-doc'&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 mt-100 section-title text-center reco-doc-card'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Recommended Doctors&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;cardContainer&amp;quot;&amp;gt;&#10;                            {filteredDoctors.slice(0, 5).map((doctor, index) =&amp;gt; (&#10;                                &amp;lt;div key={index} className=&amp;quot;card&amp;quot;&amp;gt;&#10;                                    &amp;lt;img src={`data:image/jpeg;base64,${bufferToBase64(doctor.doc_pic)}`} alt={doctor.name} className=&amp;quot;image&amp;quot; /&amp;gt;&#10;                                    &amp;lt;h3&amp;gt;{doctor.name}&amp;lt;/h3&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Specialization:&amp;lt;/strong&amp;gt; {doctor.specialization}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Fees:&amp;lt;/strong&amp;gt; {doctor.fees}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Location:&amp;lt;/strong&amp;gt; {doctor.location}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;{doctor.description}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;button className=&amp;quot;bookButton&amp;quot;&amp;gt;Book Appointment&amp;lt;/button&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            ))}&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;section section-specialities position-relative&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 section-title text-center spec-header'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Clinic and Specialities&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;p className='m-0'&amp;gt;Lorem ipsum dolor sit amet consectetur adipisicing.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row justify-content-center&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-md-9&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;specialities-slider d-flex justify-content-center align-items-center gap-5&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img1} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Urology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img2} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Neurology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img3} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Orthopedic&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img4} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Cardiologist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img5} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Dentist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;    );&#10;}&#10;&#10;export default Home;&#10;this is my server.js code app.post(&amp;quot;/patients&amp;quot;, (req, res) =&amp;gt; {&#10;  const { mobile, aadhaar, gender, dob } = req.body;&#10;  const { login_id, name, email, role } = JSON.parse(localStorage.getItem('user'));&#10;&#10;  // Check if the patient already exists&#10;  const checkSql = &amp;quot;SELECT * FROM patient WHERE login_id = ? AND email = ? AND role = ?&amp;quot;;&#10;  db.query(checkSql, [login_id, email, role], (err, existingPatient) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error checking patient existence:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (existingPatient.length &amp;gt; 0) {&#10;      // Update the existing patient record&#10;      const updateSql = &amp;quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ? WHERE login_id = ?&amp;quot;;&#10;      const updateValues = [mobile, aadhaar, gender, dob, login_id];&#10;&#10;      db.query(updateSql, updateValues, (err, updateResult) =&amp;gt; {&#10;        if (err) {&#10;          console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;          return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;        }&#10;&#10;        return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;      });&#10;    } else {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;  });&#10;}); and when i fill details in my popup form like this Complete Your Profile&#10;Mobile No:&#10;7284027188&#10;Gender:&#10;&#10;Male&#10;Date of Birth:&#10;&#10;07/17/2002&#10;Age: 21 years&#10;&#10;Aadhaar Card No:&#10;1234 5654 8978&#10;Address:&#10;317,Sector-1,Nirnaynagar,Ahmedabad-382481&#10;and click submit button i am getting this error at server side  Server running on port 8081&#10;Connected to the MySQL database.&#10;Connected to the MySQL database.&#10;Database error: Error: Column 'email' cannot be null&#10;    at Packet.asError (A:\quater1\quater\backend\node_modules\mysql2\lib\packets\packet.js:728:17)&#10;    at Query.execute (A:\quater1\quater\backend\node_modules\mysql2\lib\commands\command.js:29:26)&#10;    at Connection.handlePacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:481:34)&#10;    at PacketParser.onPacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:97:12)&#10;    at PacketParser.executeStart (A:\quater1\quater\backend\node_modules\mysql2\lib\packet_parser.js:75:16)&#10;    at Socket.&amp;lt;anonymous&amp;gt; (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:104:25)&#10;    at Socket.emit (node:events:514:28)&#10;    at addChunk (node:internal/streams/readable:545:12)&#10;    at readableAddChunkPushByteMode (node:internal/streams/readable:495:3)&#10;    at Readable.push (node:internal/streams/readable:375:5) {&#10;  code: 'ER_BAD_NULL_ERROR',&#10;  errno: 1048,&#10;  sqlState: '23000',&#10;  sqlMessage: &amp;quot;Column 'email' cannot be null&amp;quot;,&#10;  sql: '\n' +&#10;    '    INSERT INTO patient (\n' +&#10;    '      email, password, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic\n' +&#10;    &amp;quot;    ) VALUES (NULL, NULL, NULL, NULL, 'male', NULL, NULL, NULL, NULL, '2024-06-04 13:40:26.268', NULL, '2002-07-17', NULL)\n&amp;quot; +&#10;    '  '&#10;}and i cannot update my patient table record &#10;Full texts&#10;patient_id&#9;&#10;login_id&#9;&#10;email&#9;&#10;password&#9;&#10;role&#9;&#10;age&#9;&#10;gender&#9;&#10;address&#9;&#10;number&#9;&#10;insurance&#9;&#10;adhar_no&#9;&#10;created_at&#9;&#10;updated_at&#9;&#10;name&#9;&#10;dob&#9;&#10;patient_pic&#9;&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;1&#10;4&#10;john@example.com&#10;Password@123&#10;Patient&#10;30&#10;Male&#10;123 Main St&#10;987-654-32&#10;XYZ Insurance&#10;1234-5678-90&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:26&#10;John Doe&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;2&#10;5&#10;jane@example.com&#10;Password@456&#10;Patient&#10;25&#10;Female&#10;456 Elm St&#10;123-456-78&#10;ABC Insurance&#10;9876-5432-10&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:31&#10;Jane Smith&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;3&#10;6&#10;alex@example.com&#10;Password@789&#10;Patient&#10;40&#10;Male&#10;789 Oak St&#10;456-789-01&#10;DEF Insurance&#10;5678-9012-34&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:37&#10;Alex Brown&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;4&#10;11&#10;201260116052setiit@gmail.com&#10;Milan@1234&#10;Patient&#10;2024-06-04 12:08:41&#10;2024-06-04 12:08:41&#10;Milan Dharani&#10;0000-00-00&#10;" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="The error &quot;Column 'email' cannot be null&quot; is occurring because the server is trying to insert a null value for the 'email' column in the 'patient' table, which is not allowed as the column is marked as NOT NULL.&#10;&#10;In your server-side code, you're trying to retrieve the user details from the localStorage, but it seems that the user object is not being properly parsed or is missing some required fields.&#10;&#10;Here's what you can do to fix the issue:&#10;&#10;1. **Check if the user object exists and has the required fields**:&#10;&#10;```javascript&#10;app.post(&quot;/patients&quot;, (req, res) =&gt; {&#10;  const { mobile, aadhaar, gender, dob } = req.body;&#10;  const userString = localStorage.getItem('user');&#10;&#10;  if (!userString) {&#10;    return res.status(400).json({ error: &quot;User not found in localStorage&quot; });&#10;  }&#10;&#10;  const { login_id, name, email, role } = JSON.parse(userString);&#10;&#10;  if (!login_id || !name || !email || !role) {&#10;    return res.status(400).json({ error: &quot;Invalid user data&quot; });&#10;  }&#10;&#10;  // Rest of your code...&#10;});&#10;```&#10;&#10;2. **Update the SQL query to handle the case when the patient doesn't exist**:&#10;&#10;```javascript&#10;const insertSql = &quot;INSERT INTO patient (name, email, role, number, adhar_no, gender, dob, age, address) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;const insertValues = [name, email, role, mobile, aadhaar, gender, dob, null, null]; // Set age and address to null for now&#10;&#10;db.query(insertSql, insertValues, (err, insertResult) =&gt; {&#10;  if (err) {&#10;    console.error(&quot;Error inserting patient details:&quot;, err);&#10;    return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;  }&#10;&#10;  return res.json({ message: &quot;Patient details saved successfully&quot; });&#10;});&#10;```&#10;&#10;In this updated code:&#10;&#10;- We first check if the `user` object exists in the localStorage and has the required fields (`login_id`, `name`, `email`, `role`). If not, we return an appropriate error response.&#10;- We then use an `INSERT` query to insert a new patient record if it doesn't exist. We set the `age` and `address` fields to `null` for now, as they are not being sent from the client-side.&#10;- If the insertion is successful, we return a success response.&#10;&#10;Note: If you want to update an existing patient record, you'll need to modify the server-side code accordingly. You can use a similar approach to check if the patient exists and then execute an `UPDATE` query instead of an `INSERT` query." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="but i dont want to insert new patient record here is my patient table data &#10;Full texts&#10;patient_id&#9;&#10;login_id&#9;&#10;email&#9;&#10;password&#9;&#10;role&#9;&#10;age&#9;&#10;gender&#9;&#10;address&#9;&#10;number&#9;&#10;insurance&#9;&#10;adhar_no&#9;&#10;created_at&#9;&#10;updated_at&#9;&#10;name&#9;&#10;dob&#9;&#10;patient_pic&#9;&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;1&#10;4&#10;john@example.com&#10;Password@123&#10;Patient&#10;30&#10;Male&#10;123 Main St&#10;987-654-32&#10;XYZ Insurance&#10;1234-5678-90&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:26&#10;John Doe&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;2&#10;5&#10;jane@example.com&#10;Password@456&#10;Patient&#10;25&#10;Female&#10;456 Elm St&#10;123-456-78&#10;ABC Insurance&#10;9876-5432-10&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:31&#10;Jane Smith&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;3&#10;6&#10;alex@example.com&#10;Password@789&#10;Patient&#10;40&#10;Male&#10;789 Oak St&#10;456-789-01&#10;DEF Insurance&#10;5678-9012-34&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:37&#10;Alex Brown&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;4&#10;11&#10;201260116052setiit@gmail.com&#10;Milan@1234&#10;Patient&#10;2024-06-04 12:08:41&#10;2024-06-04 12:08:41&#10;Milan Dharani&#10;0000-00-00&#10;i just want is when i login here is my login code import React, { useState } from &amp;quot;react&amp;quot;;&#10;import { Link, useNavigate } from &amp;quot;react-router-dom&amp;quot;;&#10;import Validation from &amp;quot;./LoginValidation&amp;quot;;&#10;import axios from &amp;quot;axios&amp;quot;;&#10;&#10;function Login() {&#10;  const [values, setValues] = useState({&#10;    email: &amp;quot;&amp;quot;,&#10;    password: &amp;quot;&amp;quot;,&#10;    role: &amp;quot;Doctor&amp;quot;, // Default role&#10;  });&#10;&#10;  const [errors, setErrors] = useState({});&#10;  const navigate = useNavigate();&#10;&#10;  const handleInput = (event) =&amp;gt; {&#10;    setValues((prev) =&amp;gt; ({ ...prev, [event.target.name]: event.target.value }));&#10;  };&#10;&#10;const handleSubmit = (event) =&amp;gt; {&#10;    event.preventDefault();&#10;    const validationErrors = Validation(values);&#10;    setErrors(validationErrors);&#10;&#10;    if (Object.keys(validationErrors).length === 0) {&#10;        axios&#10;          .post(&amp;quot;http://localhost:8081/login&amp;quot;, values)&#10;          .then((res) =&amp;gt; {&#10;            if (res.data.status === &amp;quot;Success&amp;quot;) {&#10;              // Ensure the structure of the user object is correct&#10;              localStorage.setItem(&amp;quot;user&amp;quot;, JSON.stringify(res.data.user));&#10;&#10;              if (values.role === &amp;quot;Doctor&amp;quot;) {&#10;                navigate(&amp;quot;/doctor-home&amp;quot;);&#10;              } else if (values.role === &amp;quot;Receptionist&amp;quot;) {&#10;                navigate(&amp;quot;/receptionist-home&amp;quot;);&#10;              } else {&#10;                navigate(&amp;quot;/home&amp;quot;);&#10;              }&#10;            } else {&#10;              alert(&amp;quot;No record exist&amp;quot;);&#10;            }&#10;          })&#10;          .catch((err) =&amp;gt; console.log(err));&#10;    }&#10;  };&#10;&#10;&#10;  return (&#10;    &amp;lt;div className=&amp;quot;d-flex justify-content-center align-items-center vh-100&amp;quot;&amp;gt;&#10;      &amp;lt;div className=&amp;quot;bg-white p-3 rounded w-25&amp;quot;&amp;gt;&#10;        &amp;lt;h2&amp;gt;Sign In&amp;lt;/h2&amp;gt;&#10;        &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#10;          &amp;lt;div className=&amp;quot;mb-3&amp;quot;&amp;gt;&#10;            &amp;lt;label htmlFor=&amp;quot;email&amp;quot;&amp;gt;Email&amp;lt;/label&amp;gt;&#10;            &amp;lt;input&#10;              type=&amp;quot;email&amp;quot;&#10;              placeholder=&amp;quot;Enter Email&amp;quot;&#10;              name=&amp;quot;email&amp;quot;&#10;              onChange={handleInput}&#10;              className=&amp;quot;form-control rounded-0&amp;quot;&#10;            /&amp;gt;&#10;            {errors.email &amp;amp;&amp;amp; (&#10;              &amp;lt;span className=&amp;quot;text-danger&amp;quot;&amp;gt;{errors.email}&amp;lt;/span&amp;gt;&#10;            )}&#10;          &amp;lt;/div&amp;gt;&#10;          &amp;lt;div className=&amp;quot;mb-3&amp;quot;&amp;gt;&#10;            &amp;lt;label htmlFor=&amp;quot;password&amp;quot;&amp;gt;Password&amp;lt;/label&amp;gt;&#10;            &amp;lt;input&#10;              type=&amp;quot;password&amp;quot;&#10;              name=&amp;quot;password&amp;quot;&#10;              placeholder=&amp;quot;Enter Password&amp;quot;&#10;              onChange={handleInput}&#10;              className=&amp;quot;form-control rounded-0&amp;quot;&#10;            /&amp;gt;&#10;            {errors.password &amp;amp;&amp;amp; (&#10;              &amp;lt;span className=&amp;quot;text-danger&amp;quot;&amp;gt;{errors.password}&amp;lt;/span&amp;gt;&#10;            )}&#10;          &amp;lt;/div&amp;gt;&#10;          &amp;lt;div className=&amp;quot;mb-3&amp;quot;&amp;gt;&#10;            &amp;lt;label htmlFor=&amp;quot;role&amp;quot;&amp;gt;Role&amp;lt;/label&amp;gt;&#10;            &amp;lt;select&#10;              name=&amp;quot;role&amp;quot;&#10;              onChange={handleInput}&#10;              className=&amp;quot;form-control rounded-0&amp;quot;&#10;            &amp;gt;&#10;              &amp;lt;option value=&amp;quot;Doctor&amp;quot;&amp;gt;Doctor&amp;lt;/option&amp;gt;&#10;              &amp;lt;option value=&amp;quot;Patient&amp;quot;&amp;gt;Patient&amp;lt;/option&amp;gt;&#10;              &amp;lt;option value=&amp;quot;Receptionist&amp;quot;&amp;gt;Receptionist&amp;lt;/option&amp;gt;&#10;            &amp;lt;/select&amp;gt;&#10;          &amp;lt;/div&amp;gt;&#10;          &amp;lt;button type=&amp;quot;submit&amp;quot; className=&amp;quot;btn btn-success w-100&amp;quot;&amp;gt;&#10;            &amp;lt;strong&amp;gt;Log In&amp;lt;/strong&amp;gt;&#10;          &amp;lt;/button&amp;gt;&#10;          &amp;lt;p&amp;gt;You agree to TnC&amp;lt;/p&amp;gt;&#10;          &amp;lt;Link to=&amp;quot;/signup&amp;quot; className=&amp;quot;btn btn-default border w-100 bg-light&amp;quot;&amp;gt;&#10;            &amp;lt;strong&amp;gt;Create Account&amp;lt;/strong&amp;gt;&#10;          &amp;lt;/Link&amp;gt;&#10;          &amp;lt;br /&amp;gt;&#10;          &amp;lt;br /&amp;gt;&#10;          &amp;lt;Link&#10;            to=&amp;quot;/forgotpassword&amp;quot;&#10;            className=&amp;quot;btn btn-default border w-100 bg-light&amp;quot;&#10;          &amp;gt;&#10;            &amp;lt;strong&amp;gt;Forgot Password&amp;lt;/strong&amp;gt;&#10;          &amp;lt;/Link&amp;gt;&#10;        &amp;lt;/form&amp;gt;&#10;      &amp;lt;/div&amp;gt;&#10;    &amp;lt;/div&amp;gt;&#10;  );&#10;}&#10;&#10;export default Login;&#10;the patient details are store in my localstorage in inspect inside application like this login_id: 11, name: &amp;quot;Milan Dharani&amp;quot;, role: &amp;quot;Patient&amp;quot;, email: &amp;quot;201260116052setiit@gmail.com&amp;quot;}&#10;email&#10;: &#10;&amp;quot;201260116052setiit@gmail.com&amp;quot;&#10;login_id&#10;: &#10;11&#10;name&#10;: &#10;&amp;quot;Milan Dharani&amp;quot;&#10;role&#10;: &#10;&amp;quot;Patient&amp;quot; now when i fill Complete your profile form like this Complete Your Profile&#10;Mobile No:&#10;7284027188&#10;Gender:&#10;&#10;Male&#10;Date of Birth:&#10;&#10;07/17/2002&#10;Age: 21 years&#10;&#10;Aadhaar Card No:&#10;1234 5654 8978&#10;Address:&#10;317,Sector-1,Nirnaynagar,Ahmedabad-382481&#10; in home.js and here is my code of it import React, { useState, useEffect } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import './App.css';&#10;import 'bootstrap/dist/css/bootstrap.min.css';&#10;import { FaCheckDouble, FaClock, FaHeadset, FaHouseUser } from &amp;quot;react-icons/fa&amp;quot;;&#10;&#10;import img1 from &amp;quot;./images/specialities-01.png&amp;quot;;&#10;import img2 from &amp;quot;./images/specialities-02.png&amp;quot;;&#10;import img3 from &amp;quot;./images/specialities-03.png&amp;quot;;&#10;import img4 from &amp;quot;./images/specialities-04.png&amp;quot;;&#10;import img5 from &amp;quot;./images/specialities-05.png&amp;quot;;&#10;import axios from 'axios';&#10;&#10;function Home() {&#10;    const user = JSON.parse(localStorage.getItem('user'));&#10;    // const role = user.role; // Can be 'Doctor', 'Receptionist', or 'Patient'&#10;&#10;    const [filter, setFilter] = useState({ name: '', specialization: '', fees: '', location: '' });&#10;    const [doctors, setDoctors] = useState([]);&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const fetchDoctors = async () =&amp;gt; {&#10;            try {&#10;                const response = await axios.get('http://localhost:8081/doctors');&#10;                setDoctors(response.data);&#10;            } catch (error) {&#10;                console.error('Failed to fetch doctors:', error);&#10;            }&#10;        };&#10;        fetchDoctors();&#10;    }, []);&#10;&#10;    const bufferToBase64 = (buffer) =&amp;gt; {&#10;        let binary = '';&#10;        const bytes = new Uint8Array(buffer.data);&#10;        const len = bytes.byteLength;&#10;        for (let i = 0; i &amp;lt; len; i++) {&#10;            binary += String.fromCharCode(bytes[i]);&#10;        }&#10;        return window.btoa(binary);&#10;    };&#10;&#10;    const filteredDoctors = doctors.filter((doctor) =&amp;gt;&#10;        doctor.name.toLowerCase().includes(filter.name.toLowerCase()) &amp;amp;&amp;amp;&#10;        doctor.specialization.toLowerCase().includes(filter.specialization.toLowerCase()) &amp;amp;&amp;amp;&#10;        (filter.fees === '' || doctor.fees.includes(filter.fees)) &amp;amp;&amp;amp;&#10;        (filter.location === '' || doctor.location.toLowerCase().includes(filter.location.toLowerCase()))&#10;    );&#10;&#10;    const [showPopup, setShowPopup] = useState(true);&#10;    const [mobile, setMobile] = useState('');&#10;    const [aadhaar, setAadhaar] = useState('');&#10;    const [gender, setGender] = useState('');&#10;    const [dob, setDob] = useState('');&#10;    const [age, setAge] = useState(null);&#10;    const [maxBirthDate, setMaxBirthDate] = useState('');&#10;&#10;    const handleMobileChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 10) {&#10;            setMobile(value);&#10;        }&#10;    };&#10;&#10;    const handleAadhaarChange = (e) =&amp;gt; {&#10;        const value = e.target.value.replace(/\s/g, ''); // Remove spaces&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 12) {&#10;            const formattedValue = value.replace(/(.{4})/g, '$1 ').trim();&#10;            setAadhaar(formattedValue);&#10;        }&#10;    };&#10;&#10;    const handleGenderChange = (e) =&amp;gt; {&#10;        setGender(e.target.value);&#10;    };&#10;&#10;    const handleDobChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        setDob(value);&#10;        calculateAge(value);&#10;    };&#10;&#10;    const calculateAge = (dob) =&amp;gt; {&#10;        const birthDate = new Date(dob);&#10;        const today = new Date();&#10;&#10;        if (birthDate &amp;gt; today) {&#10;            setAge(null); // Reset age&#10;        } else {&#10;            let age = today.getFullYear() - birthDate.getFullYear();&#10;            const monthDifference = today.getMonth() - birthDate.getMonth();&#10;            if (monthDifference &amp;lt; 0 || (monthDifference === 0 &amp;amp;&amp;amp; today.getDate() &amp;lt; birthDate.getDate())) {&#10;                age--;&#10;            }&#10;            setAge(Math.min(age, 110)); // Limit age to maximum 110&#10;        }&#10;    };&#10;&#10;    const handleSubmit = async (e) =&amp;gt; {&#10;        e.preventDefault();&#10;        try {&#10;            const response = await axios.post('http://localhost:8081/patients', {&#10;                mobile,&#10;                aadhaar,&#10;                gender,&#10;                dob&#10;            });&#10;            console.log(response.data); // Log the response from the server&#10;            setShowPopup(false); // Close the popup after successful submission&#10;        } catch (error) {&#10;            console.error('Failed to submit patient details:', error);&#10;        }&#10;    };&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const maxDate = new Date();&#10;        maxDate.setFullYear(maxDate.getFullYear() - 18);&#10;        setMaxBirthDate(maxDate.toISOString().split('T')[0]);&#10;    }, []);&#10;&#10;    return (&#10;        &amp;lt;&amp;gt;&#10;            {showPopup &amp;amp;&amp;amp; (&#10;                &amp;lt;div className=&amp;quot;popup&amp;quot;&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;popup-content&amp;quot;&amp;gt;&#10;                        &amp;lt;span className=&amp;quot;close-popup&amp;quot; onClick={() =&amp;gt; setShowPopup(false)}&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Complete Your Profile&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;form-group&amp;quot;&amp;gt;&#10;                                &amp;lt;label htmlFor=&amp;quot;mobile&amp;quot;&amp;gt;Mobile No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;tel&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;mobile&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Mobile Number&amp;quot;&#10;                                    value={mobile}&#10;                                    onChange={handleMobileChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {mobile.length &amp;gt; 0 &amp;amp;&amp;amp; mobile.length &amp;lt; 10 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Mobile number must be exactly 10 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;gender&amp;quot;&amp;gt;Gender:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;select&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;gender&amp;quot;&#10;                                    value={gender}&#10;                                    onChange={handleGenderChange}&#10;                                    required&#10;                                &amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;Select Gender&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;male&amp;quot;&amp;gt;Male&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;female&amp;quot;&amp;gt;Female&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;other&amp;quot;&amp;gt;Other&amp;lt;/option&amp;gt;&#10;                                &amp;lt;/select&amp;gt;&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;dob&amp;quot;&amp;gt;Date of Birth:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;date&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;dob&amp;quot;&#10;                                    value={dob}&#10;                                    onChange={handleDobChange}&#10;                                    max={maxBirthDate} // Set max birth date&#10;                                    required&#10;                                /&amp;gt;&#10;                                {age !== null &amp;amp;&amp;amp; (&#10;                                    &amp;lt;p&amp;gt;Age: {age} years&amp;lt;/p&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;aadhaar&amp;quot;&amp;gt;Aadhaar Card No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;aadhaar&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Aadhaar Number&amp;quot;&#10;                                    value={aadhaar}&#10;                                    onChange={handleAadhaarChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {aadhaar.replace(/\s/g, '').length &amp;gt; 0 &amp;amp;&amp;amp; aadhaar.replace(/\s/g, '').length &amp;lt; 12 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Aadhaar number must be exactly 12 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;address&amp;quot;&amp;gt;Address:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;address&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Address&amp;quot;&#10;                                    required&#10;                                /&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                            &amp;lt;button type=&amp;quot;submit&amp;quot; className=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&#10;                        &amp;lt;/form&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            )}&#10;            &amp;lt;section id=&amp;quot;hero&amp;quot; className=&amp;quot;d-flex align-items-center&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                        &amp;lt;p&amp;gt;TOTAL HEALTH CARE SOLUTION&amp;lt;/p&amp;gt;&#10;                        &amp;lt;h1&amp;gt;Your Most Trusted &amp;lt;br /&amp;gt;Health Partner&amp;lt;/h1&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;A repudiandae ipsam labore ipsa voluptatum quidem quae laudantium quisquam aperiam maiores sunt fugit,&amp;lt;/p&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;deserunt rem suscipit placeat.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;d-flex justify-content-start gap-2&amp;quot;&amp;gt;&#10;                        {/* Conditional rendering based on user role */}&#10;                        {user &amp;amp;&amp;amp; user.role === 'patient' &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {user &amp;amp;&amp;amp; (user.role === 'doctor' || user.role === 'receptionist') &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors-dashboard'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Track Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {/* Show 'Book Appointment' button if no user is logged in */}&#10;                        {!user &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;why-us mt-5 mt-md-0&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;content&amp;quot;&amp;gt;&#10;                                &amp;lt;h3&amp;gt;Why Choose Us?&amp;lt;/h3&amp;gt;&#10;                                &amp;lt;p&amp;gt;&#10;                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Duis aute irure dolor in reprehenderit&#10;                                    Asperiores dolores sed et. Tenetur quia eos. Autem tempore quibusdam vel necessitatibus optio ad corporis.&#10;                                &amp;lt;/p&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;Link style={{ textDecoration: 'none' }} to={'/about'} className=&amp;quot;more-btn&amp;quot;&amp;gt;Learn More &amp;lt;i className=&amp;quot;bx bx-chevron-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/Link&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-8 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;icon-boxes d-flex flex-column justify-content-center&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHouseUser className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Appointment&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;24 Hours Service&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Consequuntur sunt aut quasi enim aliquam quae harum pariatur laboris nisi ut aliquip&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHeadset className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Emergency Cases&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;h6 className='text-secondary'&amp;gt;+88 01751 040425&amp;lt;/h6&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Qui facilis perferendis quia maxime. Laborum excepturi pariatur laboriosam nihil, dolor molestias.&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaClock className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Working Hours&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;Timing schedule&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;ul className='list-group list-group-flush'&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sun - Wed : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;8:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Thus - Fri : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;9:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sat - Sun : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;10:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                            &amp;lt;/ul&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className='reco-doc'&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 mt-100 section-title text-center reco-doc-card'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Recommended Doctors&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;cardContainer&amp;quot;&amp;gt;&#10;                            {filteredDoctors.slice(0, 5).map((doctor, index) =&amp;gt; (&#10;                                &amp;lt;div key={index} className=&amp;quot;card&amp;quot;&amp;gt;&#10;                                    &amp;lt;img src={`data:image/jpeg;base64,${bufferToBase64(doctor.doc_pic)}`} alt={doctor.name} className=&amp;quot;image&amp;quot; /&amp;gt;&#10;                                    &amp;lt;h3&amp;gt;{doctor.name}&amp;lt;/h3&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Specialization:&amp;lt;/strong&amp;gt; {doctor.specialization}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Fees:&amp;lt;/strong&amp;gt; {doctor.fees}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Location:&amp;lt;/strong&amp;gt; {doctor.location}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;{doctor.description}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;button className=&amp;quot;bookButton&amp;quot;&amp;gt;Book Appointment&amp;lt;/button&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            ))}&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;section section-specialities position-relative&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 section-title text-center spec-header'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Clinic and Specialities&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;p className='m-0'&amp;gt;Lorem ipsum dolor sit amet consectetur adipisicing.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row justify-content-center&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-md-9&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;specialities-slider d-flex justify-content-center align-items-center gap-5&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img1} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Urology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img2} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Neurology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img3} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Orthopedic&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img4} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Cardiologist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img5} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Dentist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;    );&#10;}&#10;&#10;export default Home;&#10;it just check if user with login_id,email,role in patient table if it already exists then it should insert data of complete your profile for the corresponding user if it is empty and i don't want to insert new patient data and here is my server.js code  app.post(&amp;quot;/patients&amp;quot;, (req, res) =&amp;gt; {&#10;  const { mobile, aadhaar, gender, dob } = req.body;&#10;  const { login_id, name, email, role } = JSON.parse(localStorage.getItem('user'));&#10;&#10;  // Check if the patient already exists&#10;  const checkSql = &amp;quot;SELECT * FROM patient WHERE login_id = ? AND email = ? AND role = ?&amp;quot;;&#10;  db.query(checkSql, [login_id, email, role], (err, existingPatient) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error checking patient existence:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (existingPatient.length &amp;gt; 0) {&#10;      // Update the existing patient record&#10;      const updateSql = &amp;quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ? WHERE login_id = ?&amp;quot;;&#10;      const updateValues = [mobile, aadhaar, gender, dob, login_id];&#10;&#10;      db.query(updateSql, updateValues, (err, updateResult) =&amp;gt; {&#10;        if (err) {&#10;          console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;          return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;        }&#10;&#10;        return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;      });&#10;    } else {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;  });&#10;});" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="I understand your requirement now. You want to update the existing patient record with the new details (mobile, aadhaar, gender, dob) if the patient already exists in the database based on the `login_id`, `email`, and `role`. If the patient doesn't exist, you want to return an error.&#10;&#10;Here's the updated server-side code to handle this scenario:&#10;&#10;```javascript&#10;app.post(&quot;/patients&quot;, (req, res) =&gt; {&#10;  const { mobile, aadhaar, gender, dob } = req.body;&#10;  const userString = localStorage.getItem('user');&#10;&#10;  if (!userString) {&#10;    return res.status(400).json({ error: &quot;User not found in localStorage&quot; });&#10;  }&#10;&#10;  const { login_id, email, role } = JSON.parse(userString);&#10;&#10;  if (!login_id || !email || !role) {&#10;    return res.status(400).json({ error: &quot;Invalid user data&quot; });&#10;  }&#10;&#10;  // Check if the patient already exists&#10;  const checkSql = &quot;SELECT * FROM patient WHERE login_id = ? AND email = ? AND role = ?&quot;;&#10;  db.query(checkSql, [login_id, email, role], (err, existingPatient) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Error checking patient existence:&quot;, err);&#10;      return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;    }&#10;&#10;    if (existingPatient.length &gt; 0) {&#10;      // Update the existing patient record&#10;      const updateSql = &quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ? WHERE login_id = ?&quot;;&#10;      const updateValues = [mobile, aadhaar, gender, dob, login_id];&#10;&#10;      db.query(updateSql, updateValues, (err, updateResult) =&gt; {&#10;        if (err) {&#10;          console.error(&quot;Error updating patient details:&quot;, err);&#10;          return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;        }&#10;&#10;        return res.json({ message: &quot;Patient details updated successfully&quot; });&#10;      });&#10;    } else {&#10;      return res.status(404).json({ error: &quot;Patient not found&quot; });&#10;    }&#10;  });&#10;});&#10;```&#10;&#10;In this updated code:&#10;&#10;1. We first check if the `user` object exists in the localStorage and has the required fields (`login_id`, `email`, `role`). If not, we return an appropriate error response.&#10;2. We then check if the patient already exists in the database using the `SELECT` query with the `login_id`, `email`, and `role` conditions.&#10;3. If the patient exists, we execute the `UPDATE` query to update the patient's details (`number`, `adhar_no`, `gender`, `dob`) with the new values provided in the request body.&#10;4. If the update is successful, we return a success response.&#10;5. If the patient doesn't exist, we return a &quot;Patient not found&quot; error.&#10;&#10;With this code, the existing patient record will be updated with the new details if the patient exists in the database based on the `login_id`, `email`, and `role`. If the patient doesn't exist, an error will be returned." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="i am getting this error Server running on port 8081&#10;Connected to the MySQL database.&#10;Connected to the MySQL database.&#10;Database error: Error: Column 'email' cannot be null&#10;    at Packet.asError (A:\quater1\quater\backend\node_modules\mysql2\lib\packets\packet.js:728:17)&#10;    at Query.execute (A:\quater1\quater\backend\node_modules\mysql2\lib\commands\command.js:29:26)&#10;    at Connection.handlePacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:481:34)&#10;    at PacketParser.onPacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:97:12)&#10;    at PacketParser.executeStart (A:\quater1\quater\backend\node_modules\mysql2\lib\packet_parser.js:75:16)&#10;    at Socket.&amp;lt;anonymous&amp;gt; (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:104:25)&#10;    at Socket.emit (node:events:514:28)&#10;    at addChunk (node:internal/streams/readable:545:12)&#10;    at readableAddChunkPushByteMode (node:internal/streams/readable:495:3)&#10;    at Readable.push (node:internal/streams/readable:375:5) {&#10;  code: 'ER_BAD_NULL_ERROR',&#10;  errno: 1048,&#10;  sqlState: '23000',&#10;  sqlMessage: &amp;quot;Column 'email' cannot be null&amp;quot;,&#10;  sql: '\n' +&#10;    '    INSERT INTO patient (\n' +&#10;    '      email, password, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic\n' +&#10;    &amp;quot;    ) VALUES (NULL, NULL, NULL, NULL, 'male', NULL, NULL, NULL, NULL, '2024-06-04 13:53:21.658', NULL, '2002-07-17', NULL)\n&amp;quot; +&#10;    '  '&#10;}after making above changes" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="The error &quot;Column 'email' cannot be null&quot; is occurring because the server is trying to insert a null value for the 'email' column in the 'patient' table, which is not allowed as the column is marked as NOT NULL.&#10;&#10;It seems that the issue is with the way you're retrieving the user data from the localStorage. The `email` field is likely missing or null in the user object stored in the localStorage.&#10;&#10;To fix this issue, you can modify the server-side code to handle the case when the `email` field is missing or null. Here's the updated code:&#10;&#10;```javascript&#10;app.post(&quot;/patients&quot;, (req, res) =&gt; {&#10;  const { mobile, aadhaar, gender, dob } = req.body;&#10;  const userString = localStorage.getItem('user');&#10;&#10;  if (!userString) {&#10;    return res.status(400).json({ error: &quot;User not found in localStorage&quot; });&#10;  }&#10;&#10;  const { login_id, name, email, role } = JSON.parse(userString);&#10;&#10;  if (!login_id || !name || !role) {&#10;    return res.status(400).json({ error: &quot;Invalid user data&quot; });&#10;  }&#10;&#10;  // Check if the email is missing or null&#10;  if (!email) {&#10;    return res.status(400).json({ error: &quot;Email is required&quot; });&#10;  }&#10;&#10;  // Check if the patient already exists&#10;  const checkSql = &quot;SELECT * FROM patient WHERE login_id = ? AND email = ? AND role = ?&quot;;&#10;  db.query(checkSql, [login_id, email, role], (err, existingPatient) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Error checking patient existence:&quot;, err);&#10;      return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;    }&#10;&#10;    if (existingPatient.length &gt; 0) {&#10;      // Update the existing patient record&#10;      const updateSql = &quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ? WHERE login_id = ?&quot;;&#10;      const updateValues = [mobile, aadhaar, gender, dob, login_id];&#10;&#10;      db.query(updateSql, updateValues, (err, updateResult) =&gt; {&#10;        if (err) {&#10;          console.error(&quot;Error updating patient details:&quot;, err);&#10;          return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;        }&#10;&#10;        return res.json({ message: &quot;Patient details updated successfully&quot; });&#10;      });&#10;    } else {&#10;      return res.status(404).json({ error: &quot;Patient not found&quot; });&#10;    }&#10;  });&#10;});&#10;```&#10;&#10;In this updated code, we added a check to ensure that the `email` field is not missing or null before proceeding with the database operations. If the `email` field is missing or null, we return an error response with the message &quot;Email is required&quot;.&#10;&#10;```javascript&#10;if (!email) {&#10;  return res.status(400).json({ error: &quot;Email is required&quot; });&#10;}&#10;```&#10;&#10;With this change, the server should handle the case when the `email` field is missing or null in the user object stored in the localStorage, and you should no longer encounter the &quot;Column 'email' cannot be null&quot; error." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="i am getting this error in my console Home.js:111 Failed to submit patient details: AxiosError and here is my home.js code import React, { useState, useEffect } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import './App.css';&#10;import 'bootstrap/dist/css/bootstrap.min.css';&#10;import { FaCheckDouble, FaClock, FaHeadset, FaHouseUser } from &amp;quot;react-icons/fa&amp;quot;;&#10;&#10;import img1 from &amp;quot;./images/specialities-01.png&amp;quot;;&#10;import img2 from &amp;quot;./images/specialities-02.png&amp;quot;;&#10;import img3 from &amp;quot;./images/specialities-03.png&amp;quot;;&#10;import img4 from &amp;quot;./images/specialities-04.png&amp;quot;;&#10;import img5 from &amp;quot;./images/specialities-05.png&amp;quot;;&#10;import axios from 'axios';&#10;&#10;function Home() {&#10;    const user = JSON.parse(localStorage.getItem('user'));&#10;    // const role = user.role; // Can be 'Doctor', 'Receptionist', or 'Patient'&#10;&#10;    const [filter, setFilter] = useState({ name: '', specialization: '', fees: '', location: '' });&#10;    const [doctors, setDoctors] = useState([]);&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const fetchDoctors = async () =&amp;gt; {&#10;            try {&#10;                const response = await axios.get('http://localhost:8081/doctors');&#10;                setDoctors(response.data);&#10;            } catch (error) {&#10;                console.error('Failed to fetch doctors:', error);&#10;            }&#10;        };&#10;        fetchDoctors();&#10;    }, []);&#10;&#10;    const bufferToBase64 = (buffer) =&amp;gt; {&#10;        let binary = '';&#10;        const bytes = new Uint8Array(buffer.data);&#10;        const len = bytes.byteLength;&#10;        for (let i = 0; i &amp;lt; len; i++) {&#10;            binary += String.fromCharCode(bytes[i]);&#10;        }&#10;        return window.btoa(binary);&#10;    };&#10;&#10;    const filteredDoctors = doctors.filter((doctor) =&amp;gt;&#10;        doctor.name.toLowerCase().includes(filter.name.toLowerCase()) &amp;amp;&amp;amp;&#10;        doctor.specialization.toLowerCase().includes(filter.specialization.toLowerCase()) &amp;amp;&amp;amp;&#10;        (filter.fees === '' || doctor.fees.includes(filter.fees)) &amp;amp;&amp;amp;&#10;        (filter.location === '' || doctor.location.toLowerCase().includes(filter.location.toLowerCase()))&#10;    );&#10;&#10;    const [showPopup, setShowPopup] = useState(true);&#10;    const [mobile, setMobile] = useState('');&#10;    const [aadhaar, setAadhaar] = useState('');&#10;    const [gender, setGender] = useState('');&#10;    const [dob, setDob] = useState('');&#10;    const [age, setAge] = useState(null);&#10;    const [maxBirthDate, setMaxBirthDate] = useState('');&#10;&#10;    const handleMobileChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 10) {&#10;            setMobile(value);&#10;        }&#10;    };&#10;&#10;    const handleAadhaarChange = (e) =&amp;gt; {&#10;        const value = e.target.value.replace(/\s/g, ''); // Remove spaces&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 12) {&#10;            const formattedValue = value.replace(/(.{4})/g, '$1 ').trim();&#10;            setAadhaar(formattedValue);&#10;        }&#10;    };&#10;&#10;    const handleGenderChange = (e) =&amp;gt; {&#10;        setGender(e.target.value);&#10;    };&#10;&#10;    const handleDobChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        setDob(value);&#10;        calculateAge(value);&#10;    };&#10;&#10;    const calculateAge = (dob) =&amp;gt; {&#10;        const birthDate = new Date(dob);&#10;        const today = new Date();&#10;&#10;        if (birthDate &amp;gt; today) {&#10;            setAge(null); // Reset age&#10;        } else {&#10;            let age = today.getFullYear() - birthDate.getFullYear();&#10;            const monthDifference = today.getMonth() - birthDate.getMonth();&#10;            if (monthDifference &amp;lt; 0 || (monthDifference === 0 &amp;amp;&amp;amp; today.getDate() &amp;lt; birthDate.getDate())) {&#10;                age--;&#10;            }&#10;            setAge(Math.min(age, 110)); // Limit age to maximum 110&#10;        }&#10;    };&#10;&#10;    const handleSubmit = async (e) =&amp;gt; {&#10;        e.preventDefault();&#10;        try {&#10;            const response = await axios.post('http://localhost:8081/patients', {&#10;                mobile,&#10;                aadhaar,&#10;                gender,&#10;                dob&#10;            });&#10;            console.log(response.data); // Log the response from the server&#10;            setShowPopup(false); // Close the popup after successful submission&#10;        } catch (error) {&#10;            console.error('Failed to submit patient details:', error);&#10;        }&#10;    };&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const maxDate = new Date();&#10;        maxDate.setFullYear(maxDate.getFullYear() - 18);&#10;        setMaxBirthDate(maxDate.toISOString().split('T')[0]);&#10;    }, []);&#10;&#10;    return (&#10;        &amp;lt;&amp;gt;&#10;            {showPopup &amp;amp;&amp;amp; (&#10;                &amp;lt;div className=&amp;quot;popup&amp;quot;&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;popup-content&amp;quot;&amp;gt;&#10;                        &amp;lt;span className=&amp;quot;close-popup&amp;quot; onClick={() =&amp;gt; setShowPopup(false)}&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Complete Your Profile&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;form-group&amp;quot;&amp;gt;&#10;                                &amp;lt;label htmlFor=&amp;quot;mobile&amp;quot;&amp;gt;Mobile No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;tel&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;mobile&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Mobile Number&amp;quot;&#10;                                    value={mobile}&#10;                                    onChange={handleMobileChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {mobile.length &amp;gt; 0 &amp;amp;&amp;amp; mobile.length &amp;lt; 10 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Mobile number must be exactly 10 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;gender&amp;quot;&amp;gt;Gender:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;select&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;gender&amp;quot;&#10;                                    value={gender}&#10;                                    onChange={handleGenderChange}&#10;                                    required&#10;                                &amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;Select Gender&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;male&amp;quot;&amp;gt;Male&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;female&amp;quot;&amp;gt;Female&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;other&amp;quot;&amp;gt;Other&amp;lt;/option&amp;gt;&#10;                                &amp;lt;/select&amp;gt;&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;dob&amp;quot;&amp;gt;Date of Birth:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;date&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;dob&amp;quot;&#10;                                    value={dob}&#10;                                    onChange={handleDobChange}&#10;                                    max={maxBirthDate} // Set max birth date&#10;                                    required&#10;                                /&amp;gt;&#10;                                {age !== null &amp;amp;&amp;amp; (&#10;                                    &amp;lt;p&amp;gt;Age: {age} years&amp;lt;/p&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;aadhaar&amp;quot;&amp;gt;Aadhaar Card No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;aadhaar&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Aadhaar Number&amp;quot;&#10;                                    value={aadhaar}&#10;                                    onChange={handleAadhaarChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {aadhaar.replace(/\s/g, '').length &amp;gt; 0 &amp;amp;&amp;amp; aadhaar.replace(/\s/g, '').length &amp;lt; 12 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Aadhaar number must be exactly 12 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;address&amp;quot;&amp;gt;Address:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;address&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Address&amp;quot;&#10;                                    required&#10;                                /&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                            &amp;lt;button type=&amp;quot;submit&amp;quot; className=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&#10;                        &amp;lt;/form&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            )}&#10;            &amp;lt;section id=&amp;quot;hero&amp;quot; className=&amp;quot;d-flex align-items-center&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                        &amp;lt;p&amp;gt;TOTAL HEALTH CARE SOLUTION&amp;lt;/p&amp;gt;&#10;                        &amp;lt;h1&amp;gt;Your Most Trusted &amp;lt;br /&amp;gt;Health Partner&amp;lt;/h1&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;A repudiandae ipsam labore ipsa voluptatum quidem quae laudantium quisquam aperiam maiores sunt fugit,&amp;lt;/p&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;deserunt rem suscipit placeat.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;d-flex justify-content-start gap-2&amp;quot;&amp;gt;&#10;                        {/* Conditional rendering based on user role */}&#10;                        {user &amp;amp;&amp;amp; user.role === 'patient' &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {user &amp;amp;&amp;amp; (user.role === 'doctor' || user.role === 'receptionist') &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors-dashboard'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Track Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {/* Show 'Book Appointment' button if no user is logged in */}&#10;                        {!user &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;why-us mt-5 mt-md-0&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;content&amp;quot;&amp;gt;&#10;                                &amp;lt;h3&amp;gt;Why Choose Us?&amp;lt;/h3&amp;gt;&#10;                                &amp;lt;p&amp;gt;&#10;                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Duis aute irure dolor in reprehenderit&#10;                                    Asperiores dolores sed et. Tenetur quia eos. Autem tempore quibusdam vel necessitatibus optio ad corporis.&#10;                                &amp;lt;/p&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;Link style={{ textDecoration: 'none' }} to={'/about'} className=&amp;quot;more-btn&amp;quot;&amp;gt;Learn More &amp;lt;i className=&amp;quot;bx bx-chevron-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/Link&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-8 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;icon-boxes d-flex flex-column justify-content-center&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHouseUser className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Appointment&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;24 Hours Service&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Consequuntur sunt aut quasi enim aliquam quae harum pariatur laboris nisi ut aliquip&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHeadset className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Emergency Cases&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;h6 className='text-secondary'&amp;gt;+88 01751 040425&amp;lt;/h6&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Qui facilis perferendis quia maxime. Laborum excepturi pariatur laboriosam nihil, dolor molestias.&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaClock className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Working Hours&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;Timing schedule&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;ul className='list-group list-group-flush'&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sun - Wed : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;8:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Thus - Fri : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;9:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sat - Sun : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;10:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                            &amp;lt;/ul&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className='reco-doc'&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 mt-100 section-title text-center reco-doc-card'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Recommended Doctors&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;cardContainer&amp;quot;&amp;gt;&#10;                            {filteredDoctors.slice(0, 5).map((doctor, index) =&amp;gt; (&#10;                                &amp;lt;div key={index} className=&amp;quot;card&amp;quot;&amp;gt;&#10;                                    &amp;lt;img src={`data:image/jpeg;base64,${bufferToBase64(doctor.doc_pic)}`} alt={doctor.name} className=&amp;quot;image&amp;quot; /&amp;gt;&#10;                                    &amp;lt;h3&amp;gt;{doctor.name}&amp;lt;/h3&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Specialization:&amp;lt;/strong&amp;gt; {doctor.specialization}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Fees:&amp;lt;/strong&amp;gt; {doctor.fees}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Location:&amp;lt;/strong&amp;gt; {doctor.location}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;{doctor.description}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;button className=&amp;quot;bookButton&amp;quot;&amp;gt;Book Appointment&amp;lt;/button&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            ))}&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;section section-specialities position-relative&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 section-title text-center spec-header'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Clinic and Specialities&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;p className='m-0'&amp;gt;Lorem ipsum dolor sit amet consectetur adipisicing.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row justify-content-center&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-md-9&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;specialities-slider d-flex justify-content-center align-items-center gap-5&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img1} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Urology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img2} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Neurology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img3} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Orthopedic&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img4} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Cardiologist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img5} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Dentist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;    );&#10;}&#10;&#10;export default Home;&#10;and here is my server.js code const express = require(&amp;quot;express&amp;quot;);&#10;const mysql = require(&amp;quot;mysql2&amp;quot;);&#10;const cors = require(&amp;quot;cors&amp;quot;);&#10;const dotenv = require(&amp;quot;dotenv&amp;quot;);&#10;&#10;// Load environment variables from .env file&#10;dotenv.config();&#10;&#10;const app = express();&#10;const port = process.env.PORT || 8081;&#10;&#10;app.use(cors());&#10;app.use(express.json());&#10;&#10;// Create a MySQL connection using environment variables&#10;const db = mysql.createConnection({&#10;  host: process.env.DB_HOST,&#10;  user: process.env.DB_USER,&#10;  password: process.env.DB_PASSWORD,&#10;  database: process.env.DB_DATABASE,&#10;});&#10;&#10;db.connect((err) =&amp;gt; {&#10;  if (err) {&#10;    console.error(&amp;quot;Error connecting to the database:&amp;quot;, err);&#10;  } else {&#10;    console.log(&amp;quot;Connected to the MySQL database.&amp;quot;);&#10;  }&#10;});&#10;&#10;const doctorRoutes = require(&amp;quot;./routes/doctorRoutes&amp;quot;);&#10;const patientRoutes = require(&amp;quot;./routes/patinetRoutes&amp;quot;);&#10;&#10;app.use(&amp;quot;/doctors&amp;quot;, doctorRoutes);&#10;app.use(&amp;quot;/patients&amp;quot;, patientRoutes);&#10;&#10;app.post(&amp;quot;/login&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;SELECT * FROM login WHERE `email`=? AND `password`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.email, req.body.password, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Database error&amp;quot; });&#10;      }&#10;      if (data.length &amp;gt; 0) {&#10;        const user = data[0];&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          user: {&#10;            login_id: user.login_id,&#10;            name: user.name,&#10;            role: user.role,&#10;            email: user.email,&#10;          },&#10;        });&#10;      } else {&#10;        return res.json({ status: &amp;quot;Failed&amp;quot;, message: &amp;quot;Invalid credentials&amp;quot; });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;&#10;app.post(&amp;quot;/signup&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;INSERT INTO login (`name`, `email`, `password`, `role`) VALUES (?)&amp;quot;;&#10;  const values = [&#10;    req.body.name,&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Error during signup&amp;quot; });&#10;    }&#10;    return res.json({ status: &amp;quot;Success&amp;quot;, message: &amp;quot;Signup successful&amp;quot; });&#10;  });&#10;});&#10;&#10;app.post(&amp;quot;/forgotpassword&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;UPDATE login SET `password`=? WHERE `email`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.password, req.body.email, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Error executing query:&amp;quot;, err);&#10;        return res.json({&#10;          status: &amp;quot;Error&amp;quot;,&#10;          message: &amp;quot;Error updating password&amp;quot;,&#10;        });&#10;      }&#10;      if (data.affectedRows &amp;gt; 0) {&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          message: &amp;quot;Password updated successfully&amp;quot;,&#10;        });&#10;      } else {&#10;        return res.json({&#10;          status: &amp;quot;Failed&amp;quot;,&#10;          message: &amp;quot;No user found with provided details&amp;quot;,&#10;        });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;// Fetch patient details by email&#10;app.get(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const sql = &amp;quot;SELECT * FROM patient WHERE email = ?&amp;quot;;&#10;&#10;  db.query(sql, [email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error fetching patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.length === 0) {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;&#10;    const patient = data[0];&#10;    return res.json(patient);&#10;  });&#10;});&#10;&#10;// Update patient details by email&#10;app.put(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const { name, email: newEmail, number, adhar_no, dob, gender, insurance, address } = req.body;&#10;&#10;  const sql = &amp;quot;UPDATE patient SET name =?, email =?, number =?, adhar_no =?, dob =?, gender =?, insurance =?, address =? WHERE email =?&amp;quot;;&#10;&#10;  db.query(sql, [name, newEmail, number, adhar_no, dob, gender, insurance, address, email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;    } else {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;  });&#10;});&#10;&#10;app.post(&amp;quot;/patients&amp;quot;, (req, res) =&amp;gt; {&#10;  const { mobile, aadhaar, gender, dob } = req.body;&#10;  const userString = localStorage.getItem('user');&#10;&#10;  if (!userString) {&#10;    return res.status(400).json({ error: &amp;quot;User not found in localStorage&amp;quot; });&#10;  }&#10;&#10;  const { login_id, name, email, role } = JSON.parse(userString);&#10;&#10;  if (!login_id || !name || !role) {&#10;    return res.status(400).json({ error: &amp;quot;Invalid user data&amp;quot; });&#10;  }&#10;&#10;  // Check if the email is missing or null&#10;  if (!email) {&#10;    return res.status(400).json({ error: &amp;quot;Email is required&amp;quot; });&#10;  }&#10;&#10;  // Check if the patient already exists&#10;  const checkSql = &amp;quot;SELECT * FROM patient WHERE login_id = ? AND email = ? AND role = ?&amp;quot;;&#10;  db.query(checkSql, [login_id, email, role], (err, existingPatient) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error checking patient existence:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (existingPatient.length &amp;gt; 0) {&#10;      // Update the existing patient record&#10;      const updateSql = &amp;quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ? WHERE login_id = ?&amp;quot;;&#10;      const updateValues = [mobile, aadhaar, gender, dob, login_id];&#10;&#10;      db.query(updateSql, updateValues, (err, updateResult) =&amp;gt; {&#10;        if (err) {&#10;          console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;          return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;        }&#10;&#10;        return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;      });&#10;    } else {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;  });&#10;});&#10;&#10;&#10;&#10;&#10;app.listen(port, () =&amp;gt; console.log(`Server running on port ${port}`));&#10;and i also have patientRoutes.js code // routes/patientRoutes.js&#10;&#10;const express = require(&amp;quot;express&amp;quot;);&#10;const router = express.Router();&#10;const patientController = require(&amp;quot;../Controller/patinetController&amp;quot;);&#10;&#10;router.get(&amp;quot;/&amp;quot;, patientController.getAllPatients);&#10;router.get(&amp;quot;/:id&amp;quot;, patientController.getPatientById);&#10;router.post(&amp;quot;/&amp;quot;, patientController.createPatient);&#10;router.put(&amp;quot;/:id&amp;quot;, patientController.updatePatientById);&#10;router.delete(&amp;quot;/:id&amp;quot;, patientController.deletePatientById);&#10;&#10;module.exports = router;&#10;and patientController.js code as // Controller/patientController.js&#10;&#10;const db = require(&amp;quot;../db&amp;quot;);&#10;&#10;// Get all patients&#10;exports.getAllPatients = (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;SELECT * FROM patient&amp;quot;;&#10;  db.query(sql, (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    return res.json(data);&#10;  });&#10;};&#10;&#10;// Get patient by patient_id&#10;exports.getPatientById = (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;SELECT * FROM patient WHERE patient_id = ?&amp;quot;;&#10;  db.query(sql, [req.params.id], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    if (data.length &amp;gt; 0) {&#10;      return res.json(data[0]);&#10;    } else {&#10;      return res.status(404).json(&amp;quot;Patient not found&amp;quot;);&#10;    }&#10;  });&#10;};&#10;&#10;// Create new patient&#10;exports.createPatient = (req, res) =&amp;gt; {&#10;  const sql = `&#10;    INSERT INTO patient (&#10;      email, password, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic&#10;    ) VALUES (?)&#10;  `;&#10;  const values = [&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;    req.body.age,&#10;    req.body.gender,&#10;    req.body.address,&#10;    req.body.number,&#10;    req.body.insurance,&#10;    req.body.adhar_no,&#10;    new Date(), // created_at, set to current date and time&#10;    req.body.name,&#10;    req.body.dob,&#10;    req.body.patient_pic&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    return res.json(&amp;quot;Success&amp;quot;);&#10;  });&#10;};&#10;&#10;// Update patient by patient_id&#10;exports.updatePatientById = (req, res) =&amp;gt; {&#10;  const sql = `&#10;    UPDATE patient SET &#10;      email=?, password=?, role=?, age=?, gender=?, address=?, number=?, insurance=?, adhar_no=?, name=?, dob=?, patient_pic=?&#10;    WHERE patient_id=?&#10;  `;&#10;  const values = [&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;    req.body.age,&#10;    req.body.gender,&#10;    req.body.address,&#10;    req.body.number,&#10;    req.body.insurance,&#10;    req.body.adhar_no,&#10;    req.body.name,&#10;    req.body.dob,&#10;    req.body.patient_pic,&#10;    req.params.id&#10;  ];&#10;&#10;  db.query(sql, values, (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json(&amp;quot;Success&amp;quot;);&#10;    } else {&#10;      return res.status(404).json(&amp;quot;Patient not found&amp;quot;);&#10;    }&#10;  });&#10;};&#10;&#10;exports.updatePatient = (req, res) =&amp;gt; {&#10;  const { patient_id } = req.params;&#10;  const {&#10;    name,&#10;    email,&#10;    number,&#10;    adhar_no,&#10;    dob,&#10;    gender,&#10;    insurance,&#10;    address,&#10;  } = req.body;&#10;&#10;  const sql =&#10;    &amp;quot;UPDATE patient SET name = ?, email = ?, number = ?, adhar_no = ?, dob = ?, gender = ?, insurance = ?, address = ? WHERE patient_id = ?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [name, email, number, adhar_no, dob, gender, insurance, address, patient_id],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;      }&#10;      return res.json(&amp;quot;Patient updated successfully&amp;quot;);&#10;    }&#10;  );&#10;};&#10;&#10;// Delete patient by patient_id&#10;exports.deletePatientById = (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;DELETE FROM patient WHERE patient_id = ?&amp;quot;;&#10;  db.query(sql, [req.params.id], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json(&amp;quot;Success&amp;quot;);&#10;    } else {&#10;      return res.status(404).json(&amp;quot;Patient not found&amp;quot;);&#10;    }&#10;  });&#10;};&#10;&#10;&#10;and in server side when i click submit button i am getting this error Server running on port 8081&#10;Connected to the MySQL database.&#10;Connected to the MySQL database.&#10;Database error: Error: Column 'email' cannot be null&#10;    at Packet.asError (A:\quater1\quater\backend\node_modules\mysql2\lib\packets\packet.js:728:17)&#10;    at Query.execute (A:\quater1\quater\backend\node_modules\mysql2\lib\commands\command.js:29:26)&#10;    at Connection.handlePacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:481:34)&#10;    at PacketParser.onPacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:97:12)&#10;    at PacketParser.executeStart (A:\quater1\quater\backend\node_modules\mysql2\lib\packet_parser.js:75:16)&#10;    at Socket.&amp;lt;anonymous&amp;gt; (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:104:25)&#10;    at Socket.emit (node:events:514:28)&#10;    at addChunk (node:internal/streams/readable:545:12)&#10;    at readableAddChunkPushByteMode (node:internal/streams/readable:495:3)&#10;    at Readable.push (node:internal/streams/readable:375:5) {&#10;  code: 'ER_BAD_NULL_ERROR',&#10;  errno: 1048,&#10;  sqlState: '23000',&#10;  sqlMessage: &amp;quot;Column 'email' cannot be null&amp;quot;,&#10;  sql: '\n' +&#10;    '    INSERT INTO patient (\n' +&#10;    '      email, password, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic\n' +&#10;    &amp;quot;    ) VALUES (NULL, NULL, NULL, NULL, 'male', NULL, NULL, NULL, NULL, '2024-06-04 13:55:33.878', NULL, '2002-07-17', NULL)\n&amp;quot; +&#10;    '  '&#10;}&#10;Database error: Error: Column 'email' cannot be null&#10;    at Packet.asError (A:\quater1\quater\backend\node_modules\mysql2\lib\packets\packet.js:728:17)&#10;    at Query.execute (A:\quater1\quater\backend\node_modules\mysql2\lib\commands\command.js:29:26)&#10;    at Connection.handlePacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:481:34)&#10;    at PacketParser.onPacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:97:12)&#10;    at PacketParser.executeStart (A:\quater1\quater\backend\node_modules\mysql2\lib\packet_parser.js:75:16)&#10;    at Socket.&amp;lt;anonymous&amp;gt; (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:104:25)&#10;    at Socket.emit (node:events:514:28)&#10;    at addChunk (node:internal/streams/readable:545:12)&#10;    at readableAddChunkPushByteMode (node:internal/streams/readable:495:3)&#10;    at Readable.push (node:internal/streams/readable:375:5) {&#10;  code: 'ER_BAD_NULL_ERROR',&#10;  errno: 1048,&#10;  sqlState: '23000',&#10;  sqlMessage: &amp;quot;Column 'email' cannot be null&amp;quot;,&#10;  sql: '\n' +&#10;    '    INSERT INTO patient (\n' +&#10;    '      email, password, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic\n' +&#10;    &amp;quot;    ) VALUES (NULL, NULL, NULL, NULL, 'male', NULL, NULL, NULL, NULL, '2024-06-04 13:56:24.677', NULL, '2002-07-17', NULL)\n&amp;quot; +&#10;    '  '&#10;}" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="The error &quot;Column 'email' cannot be null&quot; is occurring because the server is trying to insert a null value for the 'email' column in the 'patient' table, which is not allowed as the column is marked as NOT NULL.&#10;&#10;In your `Home.js` file, you are not passing the `email` value when making the POST request to `/patients`. The server expects the `email` value to be present in the request body.&#10;&#10;To fix this issue, you need to include the `email` value in the request body when making the POST request. You can either pass the `email` value directly or retrieve it from the user object stored in the localStorage.&#10;&#10;Here's the updated `handleSubmit` function in `Home.js`:&#10;&#10;```javascript&#10;const handleSubmit = async (e) =&gt; {&#10;  e.preventDefault();&#10;  try {&#10;    const userString = localStorage.getItem('user');&#10;    if (!userString) {&#10;      console.error('User not found in localStorage');&#10;      return;&#10;    }&#10;&#10;    const { email } = JSON.parse(userString);&#10;&#10;    const response = await axios.post('http://localhost:8081/patients', {&#10;      mobile,&#10;      aadhaar,&#10;      gender,&#10;      dob,&#10;      email, // Include the email value in the request body&#10;    });&#10;    console.log(response.data); // Log the response from the server&#10;    setShowPopup(false); // Close the popup after successful submission&#10;  } catch (error) {&#10;    console.error('Failed to submit patient details:', error);&#10;  }&#10;};&#10;```&#10;&#10;In the updated code, we first retrieve the user object from the localStorage using `localStorage.getItem('user')`. If the user object is not found, we log an error and return from the function.&#10;&#10;Next, we destructure the `email` value from the user object using `const { email } = JSON.parse(userString)`.&#10;&#10;Finally, we include the `email` value in the request body when making the POST request to `/patients`.&#10;&#10;```javascript&#10;const response = await axios.post('http://localhost:8081/patients', {&#10;  mobile,&#10;  aadhaar,&#10;  gender,&#10;  dob,&#10;  email, // Include the email value in the request body&#10;});&#10;```&#10;&#10;After making these changes, the server should be able to insert the patient details correctly, and you should no longer encounter the &quot;Column 'email' cannot be null&quot; error." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="now getting this error Database error: Error: Column 'password' cannot be null&#10;    at Packet.asError (A:\quater1\quater\backend\node_modules\mysql2\lib\packets\packet.js:728:17)&#10;    at Query.execute (A:\quater1\quater\backend\node_modules\mysql2\lib\commands\command.js:29:26)&#10;    at Connection.handlePacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:481:34)&#10;    at PacketParser.onPacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:97:12)&#10;    at PacketParser.executeStart (A:\quater1\quater\backend\node_modules\mysql2\lib\packet_parser.js:75:16)&#10;    at Socket.&amp;lt;anonymous&amp;gt; (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:104:25)&#10;    at Socket.emit (node:events:514:28)&#10;    at addChunk (node:internal/streams/readable:545:12)&#10;    at readableAddChunkPushByteMode (node:internal/streams/readable:495:3)&#10;    at Readable.push (node:internal/streams/readable:375:5) {&#10;  code: 'ER_BAD_NULL_ERROR',&#10;  errno: 1048,&#10;  sqlState: '23000',&#10;  sqlMessage: &amp;quot;Column 'password' cannot be null&amp;quot;,&#10;  sql: '\n' +&#10;    '    INSERT INTO patient (\n' +&#10;    '      email, password, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic\n' +&#10;    &amp;quot;    ) VALUES ('201260116052setiit@gmail.com', NULL, NULL, NULL, 'male', NULL, NULL, NULL, NULL, '2024-06-04 14:01:47.710', NULL, '2002-07-17', NULL)\n&amp;quot; +&#10;    '  '&#10;}after making above changes ignore password field " />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="The error &quot;Column 'password' cannot be null&quot; is occurring because the server is trying to insert a null value for the 'password' column in the 'patient' table, which is not allowed as the column is marked as NOT NULL.&#10;&#10;Since you are not using the 'password' field for patients, you can modify the SQL query in the `createPatient` function in the `patientController.js` file to exclude the 'password' column from the INSERT statement.&#10;&#10;Here's the updated `createPatient` function:&#10;&#10;```javascript&#10;// Create new patient&#10;exports.createPatient = (req, res) =&gt; {&#10;  const sql = `&#10;    INSERT INTO patient (&#10;      email, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic&#10;    ) VALUES (?)&#10;  `;&#10;  const values = [&#10;    req.body.email,&#10;    req.body.role || 'Patient', // Set the role to 'Patient' if not provided&#10;    req.body.age,&#10;    req.body.gender,&#10;    req.body.address,&#10;    req.body.number,&#10;    req.body.insurance,&#10;    req.body.adhar_no,&#10;    new Date(), // created_at, set to current date and time&#10;    req.body.name,&#10;    req.body.dob,&#10;    req.body.patient_pic&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Database error:&quot;, err);&#10;      return res.status(500).json(&quot;Error&quot;);&#10;    }&#10;    return res.json(&quot;Success&quot;);&#10;  });&#10;};&#10;```&#10;&#10;In the updated code, we have removed the 'password' column from the INSERT statement. Additionally, we have set the 'role' to 'Patient' if it is not provided in the request body.&#10;&#10;After making this change, the server should no longer encounter the &quot;Column 'password' cannot be null&quot; error when inserting patient details." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="but in my patient table i already have password save like this &#10;Full texts&#10;patient_id&#9;&#10;login_id&#9;&#10;email&#9;&#10;password&#9;&#10;role&#9;&#10;age&#9;&#10;gender&#9;&#10;address&#9;&#10;number&#9;&#10;insurance&#9;&#10;adhar_no&#9;&#10;created_at&#9;&#10;updated_at&#9;&#10;name&#9;&#10;dob&#9;&#10;patient_pic&#9;&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;1&#10;4&#10;john@example.com&#10;Password@123&#10;Patient&#10;30&#10;Male&#10;123 Main St&#10;987-654-32&#10;XYZ Insurance&#10;1234-5678-90&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:26&#10;John Doe&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;2&#10;5&#10;jane@example.com&#10;Password@456&#10;Patient&#10;25&#10;Female&#10;456 Elm St&#10;123-456-78&#10;ABC Insurance&#10;9876-5432-10&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:31&#10;Jane Smith&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;3&#10;6&#10;alex@example.com&#10;Password@789&#10;Patient&#10;40&#10;Male&#10;789 Oak St&#10;456-789-01&#10;DEF Insurance&#10;5678-9012-34&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:37&#10;Alex Brown&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;4&#10;11&#10;201260116052setiit@gmail.com&#10;Milan@1234&#10;Patient&#10;2024-06-04 12:08:41&#10;2024-06-04 12:08:41&#10;Milan Dharani&#10;0000-00-00&#10;i dont need to insert new patient data i just need is after login when i fill complete my profile details it should check patient table if user name,email and role exists and complete your profile fields are empty then only that field should be updated with data i insert in my Complete your profile like this Complete Your Profile&#10;Mobile No:&#10;7284027188&#10;Gender:&#10;&#10;Male&#10;Date of Birth:&#10;&#10;07/17/2002&#10;Age: 21 years&#10;&#10;Aadhaar Card No:&#10;1234 5654 8978&#10;Address:&#10;317,Sector-1,Nirnaynagar,Ahmedabad-382481&#10;and in my localstorage when i see i am able to get this data {login_id: 11, name: &amp;quot;Milan Dharani&amp;quot;, role: &amp;quot;Patient&amp;quot;, email: &amp;quot;201260116052setiit@gmail.com&amp;quot;}&#10;email&#10;: &#10;&amp;quot;201260116052setiit@gmail.com&amp;quot;&#10;login_id&#10;: &#10;11&#10;name&#10;: &#10;&amp;quot;Milan Dharani&amp;quot;&#10;role&#10;: &#10;&amp;quot;Patient&amp;quot; after i login from login table and here is my login table data SELECT * FROM `login`&#10; Profiling [ Edit inline ] [ Edit ] [ Explain SQL ] [ Create PHP code ] [ Refresh ]&#10; Show all&#9;|&#9;&#9;&#9;Number of rows: &#10;25&#10;Filter rows: &#10;Search this table&#10;Sort by key: &#10;None&#10;Full texts&#10;login_id&#9;&#10;name&#9;&#10;email&#9;&#10;password&#9;&#10;role&#9;&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;1&#10;Dr. John Doe&#10;johndoe@example.com&#10;Password@123&#10;Doctor&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;2&#10;Dr. Jane Smith&#10;janesmith@example.com&#10;Password@456&#10;Doctor&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;3&#10;Dr. Michael Johnson&#10;michaeljohnson@example.com&#10;Password@789&#10;Doctor&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;4&#10;John Doe&#10;john@example.com&#10;Password@123&#10;Patient&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;5&#10;Jane Smith&#10;jane@example.com&#10;Password@456&#10;Patient&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;6&#10;Alex Brown&#10;alex@example.com&#10;Password@789&#10;Patient&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;7&#10;Alice Johnson&#10;alice@example.com&#10;Alice@123&#10;receptionist&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;8&#10;Bob Smith&#10;bob@example.com&#10;Bob@123456&#10;receptionist&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;9&#10;Charlie Brown&#10;charlie@example.com&#10;Charlie@123&#10;receptionist&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;10&#10;kushal&#10;kushal@gmail.com&#10;Kushal@123&#10;Doctor&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;11&#10;Milan Dharani&#10;201260116052setiit@gmail.com&#10;Milan@1234&#10;Patient and i generate trigger based on role the data gets into different table like patient,doctor and receptionist and here is my patient table data SELECT * FROM `patient`&#10; Profiling [ Edit inline ] [ Edit ] [ Explain SQL ] [ Create PHP code ] [ Refresh ]&#10; Show all&#9;|&#9;&#9;&#9;Number of rows: &#10;25&#10;Filter rows: &#10;Search this table&#10;Sort by key: &#10;None&#10;Full texts&#10;patient_id&#9;&#10;login_id&#9;&#10;email&#9;&#10;password&#9;&#10;role&#9;&#10;age&#9;&#10;gender&#9;&#10;address&#9;&#10;number&#9;&#10;insurance&#9;&#10;adhar_no&#9;&#10;created_at&#9;&#10;updated_at&#9;&#10;name&#9;&#10;dob&#9;&#10;patient_pic&#9;&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;1&#10;4&#10;john@example.com&#10;Password@123&#10;Patient&#10;30&#10;Male&#10;123 Main St&#10;987-654-32&#10;XYZ Insurance&#10;1234-5678-90&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:26&#10;John Doe&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;2&#10;5&#10;jane@example.com&#10;Password@456&#10;Patient&#10;25&#10;Female&#10;456 Elm St&#10;123-456-78&#10;ABC Insurance&#10;9876-5432-10&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:31&#10;Jane Smith&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;3&#10;6&#10;alex@example.com&#10;Password@789&#10;Patient&#10;40&#10;Male&#10;789 Oak St&#10;456-789-01&#10;DEF Insurance&#10;5678-9012-34&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:37&#10;Alex Brown&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;4&#10;11&#10;201260116052setiit@gmail.com&#10;Milan@1234&#10;Patient&#10;2024-06-04 12:08:41&#10;2024-06-04 12:08:41&#10;Milan Dharani&#10;0000-00-00&#10;and here is my home.js code import React, { useState, useEffect } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import './App.css';&#10;import 'bootstrap/dist/css/bootstrap.min.css';&#10;import { FaCheckDouble, FaClock, FaHeadset, FaHouseUser } from &amp;quot;react-icons/fa&amp;quot;;&#10;&#10;import img1 from &amp;quot;./images/specialities-01.png&amp;quot;;&#10;import img2 from &amp;quot;./images/specialities-02.png&amp;quot;;&#10;import img3 from &amp;quot;./images/specialities-03.png&amp;quot;;&#10;import img4 from &amp;quot;./images/specialities-04.png&amp;quot;;&#10;import img5 from &amp;quot;./images/specialities-05.png&amp;quot;;&#10;import axios from 'axios';&#10;&#10;function Home() {&#10;    const user = JSON.parse(localStorage.getItem('user'));&#10;    // const role = user.role; // Can be 'Doctor', 'Receptionist', or 'Patient'&#10;&#10;    const [filter, setFilter] = useState({ name: '', specialization: '', fees: '', location: '' });&#10;    const [doctors, setDoctors] = useState([]);&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const fetchDoctors = async () =&amp;gt; {&#10;            try {&#10;                const response = await axios.get('http://localhost:8081/doctors');&#10;                setDoctors(response.data);&#10;            } catch (error) {&#10;                console.error('Failed to fetch doctors:', error);&#10;            }&#10;        };&#10;        fetchDoctors();&#10;    }, []);&#10;&#10;    const bufferToBase64 = (buffer) =&amp;gt; {&#10;        let binary = '';&#10;        const bytes = new Uint8Array(buffer.data);&#10;        const len = bytes.byteLength;&#10;        for (let i = 0; i &amp;lt; len; i++) {&#10;            binary += String.fromCharCode(bytes[i]);&#10;        }&#10;        return window.btoa(binary);&#10;    };&#10;&#10;    const filteredDoctors = doctors.filter((doctor) =&amp;gt;&#10;        doctor.name.toLowerCase().includes(filter.name.toLowerCase()) &amp;amp;&amp;amp;&#10;        doctor.specialization.toLowerCase().includes(filter.specialization.toLowerCase()) &amp;amp;&amp;amp;&#10;        (filter.fees === '' || doctor.fees.includes(filter.fees)) &amp;amp;&amp;amp;&#10;        (filter.location === '' || doctor.location.toLowerCase().includes(filter.location.toLowerCase()))&#10;    );&#10;&#10;    const [showPopup, setShowPopup] = useState(true);&#10;    const [mobile, setMobile] = useState('');&#10;    const [aadhaar, setAadhaar] = useState('');&#10;    const [gender, setGender] = useState('');&#10;    const [dob, setDob] = useState('');&#10;    const [age, setAge] = useState(null);&#10;    const [maxBirthDate, setMaxBirthDate] = useState('');&#10;&#10;    const handleMobileChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 10) {&#10;            setMobile(value);&#10;        }&#10;    };&#10;&#10;    const handleAadhaarChange = (e) =&amp;gt; {&#10;        const value = e.target.value.replace(/\s/g, ''); // Remove spaces&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 12) {&#10;            const formattedValue = value.replace(/(.{4})/g, '$1 ').trim();&#10;            setAadhaar(formattedValue);&#10;        }&#10;    };&#10;&#10;    const handleGenderChange = (e) =&amp;gt; {&#10;        setGender(e.target.value);&#10;    };&#10;&#10;    const handleDobChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        setDob(value);&#10;        calculateAge(value);&#10;    };&#10;&#10;    const calculateAge = (dob) =&amp;gt; {&#10;        const birthDate = new Date(dob);&#10;        const today = new Date();&#10;&#10;        if (birthDate &amp;gt; today) {&#10;            setAge(null); // Reset age&#10;        } else {&#10;            let age = today.getFullYear() - birthDate.getFullYear();&#10;            const monthDifference = today.getMonth() - birthDate.getMonth();&#10;            if (monthDifference &amp;lt; 0 || (monthDifference === 0 &amp;amp;&amp;amp; today.getDate() &amp;lt; birthDate.getDate())) {&#10;                age--;&#10;            }&#10;            setAge(Math.min(age, 110)); // Limit age to maximum 110&#10;        }&#10;    };&#10;&#10;    const handleSubmit = async (e) =&amp;gt; {&#10;      e.preventDefault();&#10;      try {&#10;        const userString = localStorage.getItem('user');&#10;        if (!userString) {&#10;          console.error('User not found in localStorage');&#10;          return;&#10;        }&#10;&#10;        const { email } = JSON.parse(userString);&#10;&#10;        const response = await axios.post('http://localhost:8081/patients', {&#10;          mobile,&#10;          aadhaar,&#10;          gender,&#10;          dob,&#10;          email, // Include the email value in the request body&#10;        });&#10;        console.log(response.data); // Log the response from the server&#10;        setShowPopup(false); // Close the popup after successful submission&#10;      } catch (error) {&#10;        console.error('Failed to submit patient details:', error);&#10;      }&#10;    };&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const maxDate = new Date();&#10;        maxDate.setFullYear(maxDate.getFullYear() - 18);&#10;        setMaxBirthDate(maxDate.toISOString().split('T')[0]);&#10;    }, []);&#10;&#10;    return (&#10;        &amp;lt;&amp;gt;&#10;            {showPopup &amp;amp;&amp;amp; (&#10;                &amp;lt;div className=&amp;quot;popup&amp;quot;&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;popup-content&amp;quot;&amp;gt;&#10;                        &amp;lt;span className=&amp;quot;close-popup&amp;quot; onClick={() =&amp;gt; setShowPopup(false)}&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Complete Your Profile&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;form-group&amp;quot;&amp;gt;&#10;                                &amp;lt;label htmlFor=&amp;quot;mobile&amp;quot;&amp;gt;Mobile No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;tel&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;mobile&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Mobile Number&amp;quot;&#10;                                    value={mobile}&#10;                                    onChange={handleMobileChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {mobile.length &amp;gt; 0 &amp;amp;&amp;amp; mobile.length &amp;lt; 10 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Mobile number must be exactly 10 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;gender&amp;quot;&amp;gt;Gender:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;select&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;gender&amp;quot;&#10;                                    value={gender}&#10;                                    onChange={handleGenderChange}&#10;                                    required&#10;                                &amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;Select Gender&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;male&amp;quot;&amp;gt;Male&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;female&amp;quot;&amp;gt;Female&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;other&amp;quot;&amp;gt;Other&amp;lt;/option&amp;gt;&#10;                                &amp;lt;/select&amp;gt;&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;dob&amp;quot;&amp;gt;Date of Birth:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;date&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;dob&amp;quot;&#10;                                    value={dob}&#10;                                    onChange={handleDobChange}&#10;                                    max={maxBirthDate} // Set max birth date&#10;                                    required&#10;                                /&amp;gt;&#10;                                {age !== null &amp;amp;&amp;amp; (&#10;                                    &amp;lt;p&amp;gt;Age: {age} years&amp;lt;/p&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;aadhaar&amp;quot;&amp;gt;Aadhaar Card No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;aadhaar&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Aadhaar Number&amp;quot;&#10;                                    value={aadhaar}&#10;                                    onChange={handleAadhaarChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {aadhaar.replace(/\s/g, '').length &amp;gt; 0 &amp;amp;&amp;amp; aadhaar.replace(/\s/g, '').length &amp;lt; 12 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Aadhaar number must be exactly 12 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;address&amp;quot;&amp;gt;Address:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;address&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Address&amp;quot;&#10;                                    required&#10;                                /&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                            &amp;lt;button type=&amp;quot;submit&amp;quot; className=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&#10;                        &amp;lt;/form&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            )}&#10;            &amp;lt;section id=&amp;quot;hero&amp;quot; className=&amp;quot;d-flex align-items-center&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                        &amp;lt;p&amp;gt;TOTAL HEALTH CARE SOLUTION&amp;lt;/p&amp;gt;&#10;                        &amp;lt;h1&amp;gt;Your Most Trusted &amp;lt;br /&amp;gt;Health Partner&amp;lt;/h1&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;A repudiandae ipsam labore ipsa voluptatum quidem quae laudantium quisquam aperiam maiores sunt fugit,&amp;lt;/p&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;deserunt rem suscipit placeat.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;d-flex justify-content-start gap-2&amp;quot;&amp;gt;&#10;                        {/* Conditional rendering based on user role */}&#10;                        {user &amp;amp;&amp;amp; user.role === 'patient' &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {user &amp;amp;&amp;amp; (user.role === 'doctor' || user.role === 'receptionist') &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors-dashboard'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Track Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {/* Show 'Book Appointment' button if no user is logged in */}&#10;                        {!user &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;why-us mt-5 mt-md-0&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;content&amp;quot;&amp;gt;&#10;                                &amp;lt;h3&amp;gt;Why Choose Us?&amp;lt;/h3&amp;gt;&#10;                                &amp;lt;p&amp;gt;&#10;                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Duis aute irure dolor in reprehenderit&#10;                                    Asperiores dolores sed et. Tenetur quia eos. Autem tempore quibusdam vel necessitatibus optio ad corporis.&#10;                                &amp;lt;/p&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;Link style={{ textDecoration: 'none' }} to={'/about'} className=&amp;quot;more-btn&amp;quot;&amp;gt;Learn More &amp;lt;i className=&amp;quot;bx bx-chevron-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/Link&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-8 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;icon-boxes d-flex flex-column justify-content-center&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHouseUser className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Appointment&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;24 Hours Service&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Consequuntur sunt aut quasi enim aliquam quae harum pariatur laboris nisi ut aliquip&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHeadset className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Emergency Cases&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;h6 className='text-secondary'&amp;gt;+88 01751 040425&amp;lt;/h6&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Qui facilis perferendis quia maxime. Laborum excepturi pariatur laboriosam nihil, dolor molestias.&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaClock className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Working Hours&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;Timing schedule&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;ul className='list-group list-group-flush'&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sun - Wed : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;8:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Thus - Fri : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;9:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sat - Sun : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;10:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                            &amp;lt;/ul&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className='reco-doc'&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 mt-100 section-title text-center reco-doc-card'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Recommended Doctors&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;cardContainer&amp;quot;&amp;gt;&#10;                            {filteredDoctors.slice(0, 5).map((doctor, index) =&amp;gt; (&#10;                                &amp;lt;div key={index} className=&amp;quot;card&amp;quot;&amp;gt;&#10;                                    &amp;lt;img src={`data:image/jpeg;base64,${bufferToBase64(doctor.doc_pic)}`} alt={doctor.name} className=&amp;quot;image&amp;quot; /&amp;gt;&#10;                                    &amp;lt;h3&amp;gt;{doctor.name}&amp;lt;/h3&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Specialization:&amp;lt;/strong&amp;gt; {doctor.specialization}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Fees:&amp;lt;/strong&amp;gt; {doctor.fees}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Location:&amp;lt;/strong&amp;gt; {doctor.location}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;{doctor.description}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;button className=&amp;quot;bookButton&amp;quot;&amp;gt;Book Appointment&amp;lt;/button&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            ))}&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;section section-specialities position-relative&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 section-title text-center spec-header'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Clinic and Specialities&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;p className='m-0'&amp;gt;Lorem ipsum dolor sit amet consectetur adipisicing.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row justify-content-center&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-md-9&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;specialities-slider d-flex justify-content-center align-items-center gap-5&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img1} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Urology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img2} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Neurology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img3} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Orthopedic&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img4} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Cardiologist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img5} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Dentist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;    );&#10;}&#10;&#10;export default Home;&#10;and here is my server.js code const express = require(&amp;quot;express&amp;quot;);&#10;const mysql = require(&amp;quot;mysql2&amp;quot;);&#10;const cors = require(&amp;quot;cors&amp;quot;);&#10;const dotenv = require(&amp;quot;dotenv&amp;quot;);&#10;&#10;// Load environment variables from .env file&#10;dotenv.config();&#10;&#10;const app = express();&#10;const port = process.env.PORT || 8081;&#10;&#10;app.use(cors());&#10;app.use(express.json());&#10;&#10;// Create a MySQL connection using environment variables&#10;const db = mysql.createConnection({&#10;  host: process.env.DB_HOST,&#10;  user: process.env.DB_USER,&#10;  password: process.env.DB_PASSWORD,&#10;  database: process.env.DB_DATABASE,&#10;});&#10;&#10;db.connect((err) =&amp;gt; {&#10;  if (err) {&#10;    console.error(&amp;quot;Error connecting to the database:&amp;quot;, err);&#10;  } else {&#10;    console.log(&amp;quot;Connected to the MySQL database.&amp;quot;);&#10;  }&#10;});&#10;&#10;const doctorRoutes = require(&amp;quot;./routes/doctorRoutes&amp;quot;);&#10;const patientRoutes = require(&amp;quot;./routes/patinetRoutes&amp;quot;);&#10;&#10;app.use(&amp;quot;/doctors&amp;quot;, doctorRoutes);&#10;app.use(&amp;quot;/patients&amp;quot;, patientRoutes);&#10;&#10;app.post(&amp;quot;/login&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;SELECT * FROM login WHERE `email`=? AND `password`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.email, req.body.password, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Database error&amp;quot; });&#10;      }&#10;      if (data.length &amp;gt; 0) {&#10;        const user = data[0];&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          user: {&#10;            login_id: user.login_id,&#10;            name: user.name,&#10;            role: user.role,&#10;            email: user.email,&#10;          },&#10;        });&#10;      } else {&#10;        return res.json({ status: &amp;quot;Failed&amp;quot;, message: &amp;quot;Invalid credentials&amp;quot; });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;&#10;app.post(&amp;quot;/signup&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;INSERT INTO login (`name`, `email`, `password`, `role`) VALUES (?)&amp;quot;;&#10;  const values = [&#10;    req.body.name,&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Error during signup&amp;quot; });&#10;    }&#10;    return res.json({ status: &amp;quot;Success&amp;quot;, message: &amp;quot;Signup successful&amp;quot; });&#10;  });&#10;});&#10;&#10;app.post(&amp;quot;/forgotpassword&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;UPDATE login SET `password`=? WHERE `email`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.password, req.body.email, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Error executing query:&amp;quot;, err);&#10;        return res.json({&#10;          status: &amp;quot;Error&amp;quot;,&#10;          message: &amp;quot;Error updating password&amp;quot;,&#10;        });&#10;      }&#10;      if (data.affectedRows &amp;gt; 0) {&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          message: &amp;quot;Password updated successfully&amp;quot;,&#10;        });&#10;      } else {&#10;        return res.json({&#10;          status: &amp;quot;Failed&amp;quot;,&#10;          message: &amp;quot;No user found with provided details&amp;quot;,&#10;        });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;// Fetch patient details by email&#10;app.get(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const sql = &amp;quot;SELECT * FROM patient WHERE email = ?&amp;quot;;&#10;&#10;  db.query(sql, [email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error fetching patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.length === 0) {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;&#10;    const patient = data[0];&#10;    return res.json(patient);&#10;  });&#10;});&#10;&#10;// Update patient details by email&#10;app.put(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const { name, email: newEmail, number, adhar_no, dob, gender, insurance, address } = req.body;&#10;&#10;  const sql = &amp;quot;UPDATE patient SET name =?, email =?, number =?, adhar_no =?, dob =?, gender =?, insurance =?, address =? WHERE email =?&amp;quot;;&#10;&#10;  db.query(sql, [name, newEmail, number, adhar_no, dob, gender, insurance, address, email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;    } else {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;  });&#10;});&#10;&#10;app.post(&amp;quot;/patients&amp;quot;, (req, res) =&amp;gt; {&#10;  const { mobile, aadhaar, gender, dob } = req.body;&#10;  const userString = localStorage.getItem('user');&#10;&#10;  if (!userString) {&#10;    return res.status(400).json({ error: &amp;quot;User not found in localStorage&amp;quot; });&#10;  }&#10;&#10;  const { login_id, name, email, role } = JSON.parse(userString);&#10;&#10;  if (!login_id || !name || !role) {&#10;    return res.status(400).json({ error: &amp;quot;Invalid user data&amp;quot; });&#10;  }&#10;&#10;  // Check if the email is missing or null&#10;  if (!email) {&#10;    return res.status(400).json({ error: &amp;quot;Email is required&amp;quot; });&#10;  }&#10;&#10;  // Check if the patient already exists&#10;  const checkSql = &amp;quot;SELECT * FROM patient WHERE login_id = ? AND email = ? AND role = ?&amp;quot;;&#10;  db.query(checkSql, [login_id, email, role], (err, existingPatient) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error checking patient existence:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (existingPatient.length &amp;gt; 0) {&#10;      // Update the existing patient record&#10;      const updateSql = &amp;quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ? WHERE login_id = ?&amp;quot;;&#10;      const updateValues = [mobile, aadhaar, gender, dob, login_id];&#10;&#10;      db.query(updateSql, updateValues, (err, updateResult) =&amp;gt; {&#10;        if (err) {&#10;          console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;          return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;        }&#10;&#10;        return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;      });&#10;    } else {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;  });&#10;});&#10;&#10;&#10;&#10;&#10;app.listen(port, () =&amp;gt; console.log(`Server running on port ${port}`));&#10; and i am getting this error on server side Database error: Error: Column 'password' cannot be null&#10;    at Packet.asError (A:\quater1\quater\backend\node_modules\mysql2\lib\packets\packet.js:728:17)&#10;    at Query.execute (A:\quater1\quater\backend\node_modules\mysql2\lib\commands\command.js:29:26)&#10;    at Connection.handlePacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:481:34)&#10;    at PacketParser.onPacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:97:12)&#10;    at PacketParser.executeStart (A:\quater1\quater\backend\node_modules\mysql2\lib\packet_parser.js:75:16)&#10;    at Socket.&amp;lt;anonymous&amp;gt; (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:104:25)&#10;    at Socket.emit (node:events:514:28)&#10;    at addChunk (node:internal/streams/readable:545:12)&#10;    at readableAddChunkPushByteMode (node:internal/streams/readable:495:3)&#10;    at Readable.push (node:internal/streams/readable:375:5) {&#10;  code: 'ER_BAD_NULL_ERROR',&#10;  errno: 1048,&#10;  sqlState: '23000',&#10;  sqlMessage: &amp;quot;Column 'password' cannot be null&amp;quot;,&#10;  sql: '\n' +&#10;    '    INSERT INTO patient (\n' +&#10;    '      email, password, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic\n' +&#10;    &amp;quot;    ) VALUES ('201260116052setiit@gmail.com', NULL, NULL, NULL, 'male', NULL, NULL, NULL, NULL, '2024-06-04 14:01:47.710', NULL, '2002-07-17', NULL)\n&amp;quot; +&#10;    '  '&#10;} when i click submit " />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="The error &quot;Column 'password' cannot be null&quot; is occurring because the `patient` table in your database has a `password` column defined as `NOT NULL`, but you are trying to insert a `NULL` value for the `password` field when creating or updating a patient record.&#10;&#10;Since you are not using the `password` field for patients, you can modify the SQL queries in your server.js file to exclude the `password` column when inserting or updating patient records.&#10;&#10;1. In the `/patients` POST route, update the SQL query to exclude the `password` column:&#10;&#10;```javascript&#10;app.post(&quot;/patients&quot;, (req, res) =&gt; {&#10;  const { mobile, aadhaar, gender, dob } = req.body;&#10;  const userString = localStorage.getItem('user');&#10;&#10;  // ... (existing code) ...&#10;&#10;  if (existingPatient.length &gt; 0) {&#10;    // Update the existing patient record&#10;    const updateSql = &quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ? WHERE login_id = ?&quot;;&#10;    const updateValues = [mobile, aadhaar, gender, dob, login_id];&#10;&#10;    db.query(updateSql, updateValues, (err, updateResult) =&gt; {&#10;      // ... (existing code) ...&#10;    });&#10;  } else {&#10;    // Insert a new patient record&#10;    const insertSql = `&#10;      INSERT INTO patient (login_id, email, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic)&#10;      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?, ?, ?)&#10;    `;&#10;    const insertValues = [login_id, email, role, null, gender, null, mobile, null, aadhaar, name, dob, null];&#10;&#10;    db.query(insertSql, insertValues, (err, insertResult) =&gt; {&#10;      if (err) {&#10;        console.error(&quot;Error inserting patient details:&quot;, err);&#10;        return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;      }&#10;&#10;      return res.json({ message: &quot;Patient details inserted successfully&quot; });&#10;    });&#10;  }&#10;});&#10;```&#10;&#10;In the updated code, we have added an `INSERT` statement to handle the case when the patient does not exist. The `INSERT` statement includes all the necessary columns except for the `password` column.&#10;&#10;2. In the `patientController.js` file, update the `createPatient` function to exclude the `password` column:&#10;&#10;```javascript&#10;// Create new patient&#10;exports.createPatient = (req, res) =&gt; {&#10;  const sql = `&#10;    INSERT INTO patient (&#10;      email, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic&#10;    ) VALUES (?)&#10;  `;&#10;  const values = [&#10;    req.body.email,&#10;    req.body.role || 'Patient', // Set the role to 'Patient' if not provided&#10;    req.body.age,&#10;    req.body.gender,&#10;    req.body.address,&#10;    req.body.number,&#10;    req.body.insurance,&#10;    req.body.adhar_no,&#10;    new Date(), // created_at, set to current date and time&#10;    req.body.name,&#10;    req.body.dob,&#10;    req.body.patient_pic&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Database error:&quot;, err);&#10;      return res.status(500).json(&quot;Error&quot;);&#10;    }&#10;    return res.json(&quot;Success&quot;);&#10;  });&#10;};&#10;```&#10;&#10;After making these changes, the server should no longer encounter the &quot;Column 'password' cannot be null&quot; error when inserting or updating patient records." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="but i dont need to create or insert new patient record i just need to update existing record only if complete your profile fields are empty in existing record of patient table" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="Understood. In that case, you can modify the `/patients` POST route to only update the existing patient record if the required fields are empty. Here's the updated code:&#10;&#10;```javascript&#10;app.post(&quot;/patients&quot;, (req, res) =&gt; {&#10;  const { mobile, aadhaar, gender, dob } = req.body;&#10;  const userString = localStorage.getItem('user');&#10;&#10;  if (!userString) {&#10;    return res.status(400).json({ error: &quot;User not found in localStorage&quot; });&#10;  }&#10;&#10;  const { login_id, name, email, role } = JSON.parse(userString);&#10;&#10;  if (!login_id || !name || !role) {&#10;    return res.status(400).json({ error: &quot;Invalid user data&quot; });&#10;  }&#10;&#10;  // Check if the email is missing or null&#10;  if (!email) {&#10;    return res.status(400).json({ error: &quot;Email is required&quot; });&#10;  }&#10;&#10;  // Check if the patient already exists&#10;  const checkSql = &quot;SELECT * FROM patient WHERE login_id = ? AND email = ? AND role = ?&quot;;&#10;  db.query(checkSql, [login_id, email, role], (err, existingPatient) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Error checking patient existence:&quot;, err);&#10;      return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;    }&#10;&#10;    if (existingPatient.length &gt; 0) {&#10;      const patient = existingPatient[0];&#10;&#10;      // Check if the required fields are empty&#10;      const shouldUpdate =&#10;        !patient.number ||&#10;        !patient.adhar_no ||&#10;        !patient.gender ||&#10;        !patient.dob;&#10;&#10;      if (shouldUpdate) {&#10;        // Update the existing patient record&#10;        const updateSql =&#10;          &quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ? WHERE login_id = ?&quot;;&#10;        const updateValues = [mobile, aadhaar, gender, dob, login_id];&#10;&#10;        db.query(updateSql, updateValues, (err, updateResult) =&gt; {&#10;          if (err) {&#10;            console.error(&quot;Error updating patient details:&quot;, err);&#10;            return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;          }&#10;&#10;          return res.json({ message: &quot;Patient details updated successfully&quot; });&#10;        });&#10;      } else {&#10;        return res.json({ message: &quot;Patient details are already complete&quot; });&#10;      }&#10;    } else {&#10;      return res.status(404).json({ error: &quot;Patient not found&quot; });&#10;    }&#10;  });&#10;});&#10;```&#10;&#10;In the updated code, we first check if the patient already exists in the database. If the patient exists, we then check if any of the required fields (`number`, `adhar_no`, `gender`, or `dob`) are empty or null. If any of these fields are empty, we update the patient record with the new values provided in the request body.&#10;&#10;If all the required fields are already filled, we return a message indicating that the patient details are already complete.&#10;&#10;With this approach, you don't need to worry about inserting new patient records, as the code will only update the existing record if the required fields are empty or null." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="after making above changes still getting this error Server running on port 8081&#10;Connected to the MySQL database.&#10;Connected to the MySQL database.&#10;Database error: Error: Column 'password' cannot be null&#10;    at Packet.asError (A:\quater1\quater\backend\node_modules\mysql2\lib\packets\packet.js:728:17)&#10;    at Query.execute (A:\quater1\quater\backend\node_modules\mysql2\lib\commands\command.js:29:26)&#10;    at Connection.handlePacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:481:34)&#10;    at PacketParser.onPacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:97:12)&#10;    at PacketParser.executeStart (A:\quater1\quater\backend\node_modules\mysql2\lib\packet_parser.js:75:16)&#10;    at Socket.&amp;lt;anonymous&amp;gt; (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:104:25)&#10;    at Socket.emit (node:events:514:28)&#10;    at addChunk (node:internal/streams/readable:545:12)&#10;    at readableAddChunkPushByteMode (node:internal/streams/readable:495:3)&#10;    at Readable.push (node:internal/streams/readable:375:5) {&#10;  code: 'ER_BAD_NULL_ERROR',&#10;  errno: 1048,&#10;  sqlState: '23000',&#10;  sqlMessage: &amp;quot;Column 'password' cannot be null&amp;quot;,&#10;  sql: '\n' +&#10;    '    INSERT INTO patient (\n' +&#10;    '      email, password, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic\n' +&#10;    &amp;quot;    ) VALUES ('201260116052setiit@gmail.com', NULL, NULL, NULL, 'male', NULL, NULL, NULL, NULL, '2024-06-04 14:15:56.900', NULL, '2002-07-17', NULL)\n&amp;quot; +&#10;    '  '&#10;} can we fetch password directly from patient table or just ignore it " />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="Yes, we can ignore the `password` column from the `patient` table since it's not being used for patients. Here's how you can modify the code to ignore the `password` column:&#10;&#10;1. In the `server.js` file, update the `/patients` POST route to exclude the `password` column from the SQL queries:&#10;&#10;```javascript&#10;app.post(&quot;/patients&quot;, (req, res) =&gt; {&#10;  const { mobile, aadhaar, gender, dob } = req.body;&#10;  const userString = localStorage.getItem('user');&#10;&#10;  // ... (existing code) ...&#10;&#10;  if (existingPatient.length &gt; 0) {&#10;    const patient = existingPatient[0];&#10;&#10;    // Check if the required fields are empty&#10;    const shouldUpdate =&#10;      !patient.number ||&#10;      !patient.adhar_no ||&#10;      !patient.gender ||&#10;      !patient.dob;&#10;&#10;    if (shouldUpdate) {&#10;      // Update the existing patient record&#10;      const updateSql =&#10;        &quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ? WHERE login_id = ?&quot;;&#10;      const updateValues = [mobile, aadhaar, gender, dob, login_id];&#10;&#10;      db.query(updateSql, updateValues, (err, updateResult) =&gt; {&#10;        // ... (existing code) ...&#10;      });&#10;    } else {&#10;      return res.json({ message: &quot;Patient details are already complete&quot; });&#10;    }&#10;  } else {&#10;    return res.status(404).json({ error: &quot;Patient not found&quot; });&#10;  }&#10;});&#10;```&#10;&#10;2. In the `patientController.js` file, update the `createPatient` function to exclude the `password` column:&#10;&#10;```javascript&#10;// Create new patient&#10;exports.createPatient = (req, res) =&gt; {&#10;  const sql = `&#10;    INSERT INTO patient (&#10;      email, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic&#10;    ) VALUES (?)&#10;  `;&#10;  const values = [&#10;    req.body.email,&#10;    req.body.role || 'Patient', // Set the role to 'Patient' if not provided&#10;    req.body.age,&#10;    req.body.gender,&#10;    req.body.address,&#10;    req.body.number,&#10;    req.body.insurance,&#10;    req.body.adhar_no,&#10;    new Date(), // created_at, set to current date and time&#10;    req.body.name,&#10;    req.body.dob,&#10;    req.body.patient_pic&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Database error:&quot;, err);&#10;      return res.status(500).json(&quot;Error&quot;);&#10;    }&#10;    return res.json(&quot;Success&quot;);&#10;  });&#10;};&#10;```&#10;&#10;After making these changes, the server should no longer encounter the &quot;Column 'password' cannot be null&quot; error when inserting or updating patient records.&#10;&#10;If you still encounter the error, you can try the following:&#10;&#10;1. Check if the `patient` table in your database has a `password` column defined as `NOT NULL`. If it does, you can either remove the `password` column or change its definition to allow `NULL` values.&#10;&#10;2. If the `password` column is required for other purposes, you can set a default value for it when inserting or updating patient records. For example, you can set the `password` column to an empty string (`''`) or a placeholder value like `'patient_password'`.&#10;&#10;By ignoring or setting a default value for the `password` column, you should be able to resolve the &quot;Column 'password' cannot be null&quot; error." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="this is MyProfile.js code import React, { useEffect, useState } from 'react';&#10;import { Routes, Route, Link } from 'react-router-dom';&#10;import { AiOutlineUser } from &amp;quot;react-icons/ai&amp;quot;;&#10;import axios from 'axios';&#10;import &amp;quot;./App.css&amp;quot;&#10;const AccountDetails = ({ user }) =&amp;gt; {&#10;  const [patient, setPatient] = useState(null);&#10;&#10;  useEffect(() =&amp;gt; {&#10;    setPatient(user); // Assuming the user object has the same structure as the patient data&#10;  }, [user]);&#10;&#10;  if (!patient) {&#10;    return &amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;;&#10;  }&#10;&#10;  const formatDate = (isoDate) =&amp;gt; {&#10;    const date = new Date(isoDate);&#10;    return date.toLocaleDateString(); // Formats date to 'MM/DD/YYYY' by default&#10;  };&#10;&#10;  return (&#10;    &amp;lt;div className=&amp;quot;account-details&amp;quot;&amp;gt;&#10;      &amp;lt;AiOutlineUser className=&amp;quot;user-icon&amp;quot; /&amp;gt;&#10;      &amp;lt;h4&amp;gt;Name: {patient.name}&amp;lt;/h4&amp;gt;&#10;      &amp;lt;p&amp;gt;Role: {patient.role}&amp;lt;/p&amp;gt;&#10;      &amp;lt;p&amp;gt;Email: {patient.email}&amp;lt;/p&amp;gt;&#10;      &amp;lt;p&amp;gt;Mobile: {patient.number}&amp;lt;/p&amp;gt;&#10;      &amp;lt;p&amp;gt;Adhar No: {patient.adhar_no}&amp;lt;/p&amp;gt;&#10;      &amp;lt;p&amp;gt;Date of Birth: {formatDate(patient.dob)}&amp;lt;/p&amp;gt;&#10;      &amp;lt;p&amp;gt;Age: {patient.age}&amp;lt;/p&amp;gt;&#10;      &amp;lt;p&amp;gt;Gender: {patient.gender}&amp;lt;/p&amp;gt;&#10;      &amp;lt;p&amp;gt;Insurance: {patient.insurance}&amp;lt;/p&amp;gt;&#10;      &amp;lt;p&amp;gt;Address: {patient.address}&amp;lt;/p&amp;gt;&#10;    &amp;lt;/div&amp;gt;&#10;  );&#10;};&#10;&#10;&#10;&#10;const MyAppointments = ({ user }) =&amp;gt; {&#10;  const [Appointments, setAppointments] = useState([]);&#10;&#10;  return (&#10;    &amp;lt;div className=&amp;quot;my-appointments&amp;quot;&amp;gt;&#10;      {/* &amp;lt;h4&amp;gt;My Orders&amp;lt;/h4&amp;gt; */}&#10;      {Appointments.length === 0 ? (&#10;        &amp;lt;p&amp;gt;You have not make any appointments.&amp;lt;/p&amp;gt;&#10;      ) : (&#10;        &amp;lt;ul&amp;gt;&#10;          {Appointments.map(order =&amp;gt; (&#10;            &amp;lt;li key={order.id}&amp;gt;&#10;              &amp;lt;p&amp;gt;Appointments ID: {Appointments.id}&amp;lt;/p&amp;gt;&#10;              &amp;lt;p&amp;gt;Total: {Appointments.totalAmount}&amp;lt;/p&amp;gt;&#10;              &amp;lt;p&amp;gt;Items:&amp;lt;/p&amp;gt;&#10;              &amp;lt;ul&amp;gt;&#10;                {order.cartItems.map(item =&amp;gt; (&#10;                  &amp;lt;li key={item.id}&amp;gt;&#10;                    &amp;lt;img src={item.image} alt={item.productName} style={{ maxWidth: '100px' }} /&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                      &amp;lt;p&amp;gt;Appointment Id: { }&amp;lt;/p&amp;gt;&#10;                      &amp;lt;p&amp;gt;Doctor's name: { }&amp;lt;/p&amp;gt;&#10;                      &amp;lt;p&amp;gt;Price: { }&amp;lt;/p&amp;gt;&#10;                      &amp;lt;p&amp;gt;Quantity: { }&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                  &amp;lt;/li&amp;gt;&#10;                ))}&#10;              &amp;lt;/ul&amp;gt;&#10;            &amp;lt;/li&amp;gt;&#10;          ))}&#10;        &amp;lt;/ul&amp;gt;&#10;      )}&#10;    &amp;lt;/div&amp;gt;&#10;  );&#10;};&#10;&#10;const UpdateProfile = ({ user }) =&amp;gt; {&#10;  const [formData, setFormData] = useState({&#10;    name: &amp;quot;&amp;quot;,&#10;    email: &amp;quot;&amp;quot;,&#10;    number: &amp;quot;&amp;quot;,&#10;    adhar_no: &amp;quot;&amp;quot;,&#10;    dob: &amp;quot;&amp;quot;,&#10;    gender: &amp;quot;&amp;quot;,&#10;    insurance: &amp;quot;&amp;quot;,&#10;    address: &amp;quot;&amp;quot;,&#10;  });&#10;&#10;  useEffect(() =&amp;gt; {&#10;    if (user) {&#10;      setFormData({&#10;        name: user.name || &amp;quot;&amp;quot;,&#10;        email: user.email || &amp;quot;&amp;quot;,&#10;        number: user.number || &amp;quot;&amp;quot;,&#10;        adhar_no: user.adhar_no || &amp;quot;&amp;quot;,&#10;        dob: user.dob ? new Date(user.dob).toISOString().split('T')[0] : &amp;quot;&amp;quot;,&#10;        gender: user.gender || &amp;quot;&amp;quot;,&#10;        insurance: user.insurance || &amp;quot;&amp;quot;,&#10;        address: user.address || &amp;quot;&amp;quot;,&#10;      });&#10;    }&#10;  }, [user]);&#10;&#10;  const handleChange = (e) =&amp;gt; {&#10;    const { name, value } = e.target;&#10;    setFormData({ ...formData, [name]: value });&#10;  };&#10;&#10;const handleSubmit = async (e) =&amp;gt; {&#10;  e.preventDefault();&#10;  try {&#10;    const storedUser = JSON.parse(localStorage.getItem(&amp;quot;user&amp;quot;));&#10;    const response = await axios.put(`http://localhost:8081/patients/email/${storedUser.email}`, formData);&#10;    console.log(&amp;quot;Update response:&amp;quot;, response);&#10;    if (response.status === 200) {&#10;      alert(&amp;quot;Profile updated successfully&amp;quot;);&#10;    } else {&#10;      console.error(&amp;quot;Failed to update profile:&amp;quot;, response.data);&#10;      alert(`Failed to update profile: ${response.data.message || response.status}`);&#10;    }&#10;  } catch (error) {&#10;    console.error(&amp;quot;Error updating profile:&amp;quot;, error);&#10;    if (error.response) {&#10;      console.error(&amp;quot;Error response data:&amp;quot;, error.response.data);&#10;      alert(`Failed to update profile: ${error.response.data.message || error.response.status}`);&#10;    } else {&#10;      alert(&amp;quot;Failed to update profile: An unknown error occurred.&amp;quot;);&#10;    }&#10;  }&#10;};&#10;&#10;&#10;&#10;  const today = new Date().toISOString().split(&amp;quot;T&amp;quot;)[0];&#10;&#10;  return (&#10;    &amp;lt;div className=&amp;quot;update-profile&amp;quot;&amp;gt;&#10;      &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#10;        &amp;lt;div&amp;gt;&#10;          &amp;lt;label&amp;gt;&#10;            Name:&#10;            &amp;lt;input&#10;              type=&amp;quot;text&amp;quot;&#10;              name=&amp;quot;name&amp;quot;&#10;              value={formData.name}&#10;              onChange={handleChange}&#10;            /&amp;gt;&#10;          &amp;lt;/label&amp;gt;&#10;        &amp;lt;/div&amp;gt;&#10;        &amp;lt;div&amp;gt;&#10;          &amp;lt;label&amp;gt;&#10;            Email Id:&#10;            &amp;lt;input&#10;              type=&amp;quot;email&amp;quot;&#10;              name=&amp;quot;email&amp;quot;&#10;              value={formData.email}&#10;              onChange={handleChange}&#10;            /&amp;gt;&#10;          &amp;lt;/label&amp;gt;&#10;        &amp;lt;/div&amp;gt;&#10;        &amp;lt;div&amp;gt;&#10;          &amp;lt;label&amp;gt;&#10;            Mobile No:&#10;            &amp;lt;input&#10;              type=&amp;quot;tel&amp;quot;&#10;              name=&amp;quot;number&amp;quot;&#10;              value={formData.number}&#10;              onChange={handleChange}&#10;              required&#10;              minLength=&amp;quot;10&amp;quot;&#10;              maxLength=&amp;quot;10&amp;quot;&#10;              pattern=&amp;quot;[0-9]{10}&amp;quot;&#10;            /&amp;gt;&#10;          &amp;lt;/label&amp;gt;&#10;        &amp;lt;/div&amp;gt;&#10;        &amp;lt;div&amp;gt;&#10;          &amp;lt;label&amp;gt;&#10;            Aadhaar No:&#10;            &amp;lt;input&#10;              type=&amp;quot;text&amp;quot;&#10;              name=&amp;quot;adhar_no&amp;quot;&#10;              value={formData.adhar_no}&#10;              onChange={handleChange}&#10;              required&#10;              minLength=&amp;quot;12&amp;quot;&#10;              maxLength=&amp;quot;12&amp;quot;&#10;              pattern=&amp;quot;\d{12}&amp;quot;&#10;            /&amp;gt;&#10;          &amp;lt;/label&amp;gt;&#10;        &amp;lt;/div&amp;gt;&#10;        &amp;lt;div&amp;gt;&#10;          &amp;lt;label&amp;gt;&#10;            Date of Birth:&#10;            &amp;lt;input&#10;              type=&amp;quot;date&amp;quot;&#10;              name=&amp;quot;dob&amp;quot;&#10;              value={formData.dob}&#10;              max={today}&#10;              onChange={handleChange}&#10;            /&amp;gt;&#10;          &amp;lt;/label&amp;gt;&#10;        &amp;lt;/div&amp;gt;&#10;        &amp;lt;div className=&amp;quot;gender&amp;quot;&amp;gt;&#10;          &amp;lt;label&amp;gt;Gender:&amp;lt;/label&amp;gt;&#10;          &amp;lt;select&#10;            name=&amp;quot;gender&amp;quot;&#10;            value={formData.gender}&#10;            onChange={handleChange}&#10;            className=&amp;quot;input&amp;quot;&#10;          &amp;gt;&#10;            &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;Male&amp;quot;&amp;gt;Male&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;Female&amp;quot;&amp;gt;Female&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;Others&amp;quot;&amp;gt;Others&amp;lt;/option&amp;gt;&#10;          &amp;lt;/select&amp;gt;&#10;        &amp;lt;/div&amp;gt;&#10;        &amp;lt;div className=&amp;quot;insurance&amp;quot;&amp;gt;&#10;          &amp;lt;label&amp;gt;Insurance:&amp;lt;/label&amp;gt;&#10;          &amp;lt;select&#10;            name=&amp;quot;insurance&amp;quot;&#10;            value={formData.insurance}&#10;            onChange={handleChange}&#10;            className=&amp;quot;input&amp;quot;&#10;          &amp;gt;&#10;            &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;Yes&amp;quot;&amp;gt;Yes&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;No&amp;quot;&amp;gt;No&amp;lt;/option&amp;gt;&#10;          &amp;lt;/select&amp;gt;&#10;        &amp;lt;/div&amp;gt;&#10;        &amp;lt;div className=&amp;quot;address-text&amp;quot;&amp;gt;&#10;          &amp;lt;label&amp;gt;&#10;            Address:&#10;            &amp;lt;textarea&#10;              name=&amp;quot;address&amp;quot;&#10;              value={formData.address}&#10;              onChange={handleChange}&#10;              rows={2}&#10;              cols={60}&#10;            /&amp;gt;&#10;          &amp;lt;/label&amp;gt;&#10;        &amp;lt;/div&amp;gt;&#10;        &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Update Profile&amp;lt;/button&amp;gt;&#10;      &amp;lt;/form&amp;gt;&#10;    &amp;lt;/div&amp;gt;&#10;  );&#10;};&#10;&#10;const MyProfile = () =&amp;gt; {&#10;  const [user, setUser] = useState(null);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;&#10;  useEffect(() =&amp;gt; {&#10;    const storedUser = JSON.parse(localStorage.getItem(&amp;quot;user&amp;quot;));&#10;&#10;    if (storedUser &amp;amp;&amp;amp; storedUser.email) {&#10;      const fetchUserDetails = async () =&amp;gt; {&#10;        try {&#10;          setIsLoading(true);&#10;          // Use the email to fetch the login_id and user details&#10;          const response = await axios.get(`http://localhost:8081/patients/email/${storedUser.email}`);&#10;          setUser(response.data);&#10;        } catch (error) {&#10;          console.error(&amp;quot;Error fetching user details:&amp;quot;, error);&#10;        } finally {&#10;          setIsLoading(false);&#10;        }&#10;      };&#10;&#10;      fetchUserDetails();&#10;    } else {&#10;      setIsLoading(false);&#10;    }&#10;  }, []);&#10;&#10;  if (isLoading) {&#10;    return &amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;;&#10;  }&#10;&#10;  if (!user) {&#10;    return &amp;lt;div&amp;gt;No user data available&amp;lt;/div&amp;gt;;&#10;  }&#10;&#10;  return (&#10;    &amp;lt;div className=&amp;quot;user-profile&amp;quot;&amp;gt;&#10;      &amp;lt;nav&amp;gt;&#10;        &amp;lt;ul&amp;gt;&#10;          &amp;lt;li&amp;gt;&#10;            &amp;lt;Link to=&amp;quot;&amp;quot;&amp;gt;Account Details&amp;lt;/Link&amp;gt;&#10;          &amp;lt;/li&amp;gt;&#10;          &amp;lt;li&amp;gt;&#10;            &amp;lt;Link to=&amp;quot;myappointments&amp;quot;&amp;gt;My Appointments&amp;lt;/Link&amp;gt;&#10;          &amp;lt;/li&amp;gt;&#10;          &amp;lt;li&amp;gt;&#10;            &amp;lt;Link to=&amp;quot;updateprofile&amp;quot;&amp;gt;Update Profile&amp;lt;/Link&amp;gt;&#10;          &amp;lt;/li&amp;gt;&#10;        &amp;lt;/ul&amp;gt;&#10;      &amp;lt;/nav&amp;gt;&#10;&#10;      &amp;lt;div className=&amp;quot;profile-content&amp;quot;&amp;gt;&#10;        &amp;lt;Routes&amp;gt;&#10;          &amp;lt;Route path=&amp;quot;/&amp;quot; element={&amp;lt;AccountDetails user={user} /&amp;gt;} /&amp;gt;&#10;          &amp;lt;Route path=&amp;quot;myappointments&amp;quot; element={&amp;lt;MyAppointments user={user} /&amp;gt;} /&amp;gt;&#10;          &amp;lt;Route path=&amp;quot;updateprofile&amp;quot; element={&amp;lt;UpdateProfile user={user} /&amp;gt;} /&amp;gt;&#10;        &amp;lt;/Routes&amp;gt;&#10;      &amp;lt;/div&amp;gt;&#10;    &amp;lt;/div&amp;gt;&#10;  );&#10;};&#10;&#10;&#10;export default MyProfile;&#10;and it is working perfectly fine it fetches and update data in patient table correctly and here is my server.js code const express = require(&amp;quot;express&amp;quot;);&#10;const mysql = require(&amp;quot;mysql2&amp;quot;);&#10;const cors = require(&amp;quot;cors&amp;quot;);&#10;const dotenv = require(&amp;quot;dotenv&amp;quot;);&#10;&#10;// Load environment variables from .env file&#10;dotenv.config();&#10;&#10;const app = express();&#10;const port = process.env.PORT || 8081;&#10;&#10;app.use(cors());&#10;app.use(express.json());&#10;&#10;// Create a MySQL connection using environment variables&#10;const db = mysql.createConnection({&#10;  host: process.env.DB_HOST,&#10;  user: process.env.DB_USER,&#10;  password: process.env.DB_PASSWORD,&#10;  database: process.env.DB_DATABASE,&#10;});&#10;&#10;db.connect((err) =&amp;gt; {&#10;  if (err) {&#10;    console.error(&amp;quot;Error connecting to the database:&amp;quot;, err);&#10;  } else {&#10;    console.log(&amp;quot;Connected to the MySQL database.&amp;quot;);&#10;  }&#10;});&#10;&#10;const doctorRoutes = require(&amp;quot;./routes/doctorRoutes&amp;quot;);&#10;const patientRoutes = require(&amp;quot;./routes/patinetRoutes&amp;quot;);&#10;&#10;app.use(&amp;quot;/doctors&amp;quot;, doctorRoutes);&#10;app.use(&amp;quot;/patients&amp;quot;, patientRoutes);&#10;&#10;app.post(&amp;quot;/login&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;SELECT * FROM login WHERE `email`=? AND `password`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.email, req.body.password, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Database error&amp;quot; });&#10;      }&#10;      if (data.length &amp;gt; 0) {&#10;        const user = data[0];&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          user: {&#10;            login_id: user.login_id,&#10;            name: user.name,&#10;            role: user.role,&#10;            email: user.email,&#10;          },&#10;        });&#10;      } else {&#10;        return res.json({ status: &amp;quot;Failed&amp;quot;, message: &amp;quot;Invalid credentials&amp;quot; });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;&#10;app.post(&amp;quot;/signup&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;INSERT INTO login (`name`, `email`, `password`, `role`) VALUES (?)&amp;quot;;&#10;  const values = [&#10;    req.body.name,&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Error during signup&amp;quot; });&#10;    }&#10;    return res.json({ status: &amp;quot;Success&amp;quot;, message: &amp;quot;Signup successful&amp;quot; });&#10;  });&#10;});&#10;&#10;app.post(&amp;quot;/forgotpassword&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;UPDATE login SET `password`=? WHERE `email`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.password, req.body.email, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Error executing query:&amp;quot;, err);&#10;        return res.json({&#10;          status: &amp;quot;Error&amp;quot;,&#10;          message: &amp;quot;Error updating password&amp;quot;,&#10;        });&#10;      }&#10;      if (data.affectedRows &amp;gt; 0) {&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          message: &amp;quot;Password updated successfully&amp;quot;,&#10;        });&#10;      } else {&#10;        return res.json({&#10;          status: &amp;quot;Failed&amp;quot;,&#10;          message: &amp;quot;No user found with provided details&amp;quot;,&#10;        });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;// Fetch patient details by email&#10;app.get(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const sql = &amp;quot;SELECT * FROM patient WHERE email = ?&amp;quot;;&#10;&#10;  db.query(sql, [email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error fetching patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.length === 0) {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;&#10;    const patient = data[0];&#10;    return res.json(patient);&#10;  });&#10;});&#10;&#10;// Update patient details by email&#10;app.put(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const { name, email: newEmail, number, adhar_no, dob, gender, insurance, address } = req.body;&#10;&#10;  const sql = &amp;quot;UPDATE patient SET name =?, email =?, number =?, adhar_no =?, dob =?, gender =?, insurance =?, address =? WHERE email =?&amp;quot;;&#10;&#10;  db.query(sql, [name, newEmail, number, adhar_no, dob, gender, insurance, address, email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;    } else {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;  });&#10;});&#10;&#10;app.post(&amp;quot;/patients&amp;quot;, (req, res) =&amp;gt; {&#10;  const { mobile, aadhaar, gender, dob } = req.body;&#10;  const userString = localStorage.getItem('user');&#10;&#10;  if (!userString) {&#10;    return res.status(400).json({ error: &amp;quot;User not found in localStorage&amp;quot; });&#10;  }&#10;&#10;  const { login_id, name, email, role } = JSON.parse(userString);&#10;&#10;  if (!login_id || !name || !role) {&#10;    return res.status(400).json({ error: &amp;quot;Invalid user data&amp;quot; });&#10;  }&#10;&#10;  // Check if the email is missing or null&#10;  if (!email) {&#10;    return res.status(400).json({ error: &amp;quot;Email is required&amp;quot; });&#10;  }&#10;&#10;  // Check if the patient already exists&#10;  const checkSql = &amp;quot;SELECT * FROM patient WHERE login_id = ? AND email = ? AND role = ?&amp;quot;;&#10;  db.query(checkSql, [login_id, email, role], (err, existingPatient) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error checking patient existence:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (existingPatient.length &amp;gt; 0) {&#10;      const patient = existingPatient[0];&#10;&#10;      // Check if the required fields are empty&#10;      const shouldUpdate =&#10;        !patient.number ||&#10;        !patient.adhar_no ||&#10;        !patient.gender ||&#10;        !patient.dob;&#10;&#10;      if (shouldUpdate) {&#10;        // Update the existing patient record&#10;        const updateSql =&#10;          &amp;quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ? WHERE login_id = ?&amp;quot;;&#10;        const updateValues = [mobile, aadhaar, gender, dob, login_id];&#10;&#10;        db.query(updateSql, updateValues, (err, updateResult) =&amp;gt; {&#10;          if (err) {&#10;            console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;            return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;          }&#10;&#10;          return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;        });&#10;      } else {&#10;        return res.json({ message: &amp;quot;Patient details are already complete&amp;quot; });&#10;      }&#10;    } else {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;  });&#10;});&#10;``&#10;&#10;&#10;&#10;&#10;&#10;app.listen(port, () =&amp;gt; console.log(`Server running on port ${port}`));&#10;and based on this can u help me in this home.js code import React, { useState, useEffect } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import './App.css';&#10;import 'bootstrap/dist/css/bootstrap.min.css';&#10;import { FaCheckDouble, FaClock, FaHeadset, FaHouseUser } from &amp;quot;react-icons/fa&amp;quot;;&#10;&#10;import img1 from &amp;quot;./images/specialities-01.png&amp;quot;;&#10;import img2 from &amp;quot;./images/specialities-02.png&amp;quot;;&#10;import img3 from &amp;quot;./images/specialities-03.png&amp;quot;;&#10;import img4 from &amp;quot;./images/specialities-04.png&amp;quot;;&#10;import img5 from &amp;quot;./images/specialities-05.png&amp;quot;;&#10;import axios from 'axios';&#10;&#10;function Home() {&#10;    const user = JSON.parse(localStorage.getItem('user'));&#10;    // const role = user.role; // Can be 'Doctor', 'Receptionist', or 'Patient'&#10;&#10;    const [filter, setFilter] = useState({ name: '', specialization: '', fees: '', location: '' });&#10;    const [doctors, setDoctors] = useState([]);&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const fetchDoctors = async () =&amp;gt; {&#10;            try {&#10;                const response = await axios.get('http://localhost:8081/doctors');&#10;                setDoctors(response.data);&#10;            } catch (error) {&#10;                console.error('Failed to fetch doctors:', error);&#10;            }&#10;        };&#10;        fetchDoctors();&#10;    }, []);&#10;&#10;    const bufferToBase64 = (buffer) =&amp;gt; {&#10;        let binary = '';&#10;        const bytes = new Uint8Array(buffer.data);&#10;        const len = bytes.byteLength;&#10;        for (let i = 0; i &amp;lt; len; i++) {&#10;            binary += String.fromCharCode(bytes[i]);&#10;        }&#10;        return window.btoa(binary);&#10;    };&#10;&#10;    const filteredDoctors = doctors.filter((doctor) =&amp;gt;&#10;        doctor.name.toLowerCase().includes(filter.name.toLowerCase()) &amp;amp;&amp;amp;&#10;        doctor.specialization.toLowerCase().includes(filter.specialization.toLowerCase()) &amp;amp;&amp;amp;&#10;        (filter.fees === '' || doctor.fees.includes(filter.fees)) &amp;amp;&amp;amp;&#10;        (filter.location === '' || doctor.location.toLowerCase().includes(filter.location.toLowerCase()))&#10;    );&#10;&#10;    const [showPopup, setShowPopup] = useState(true);&#10;    const [mobile, setMobile] = useState('');&#10;    const [aadhaar, setAadhaar] = useState('');&#10;    const [gender, setGender] = useState('');&#10;    const [dob, setDob] = useState('');&#10;    const [age, setAge] = useState(null);&#10;    const [maxBirthDate, setMaxBirthDate] = useState('');&#10;&#10;    const handleMobileChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 10) {&#10;            setMobile(value);&#10;        }&#10;    };&#10;&#10;    const handleAadhaarChange = (e) =&amp;gt; {&#10;        const value = e.target.value.replace(/\s/g, ''); // Remove spaces&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 12) {&#10;            const formattedValue = value.replace(/(.{4})/g, '$1 ').trim();&#10;            setAadhaar(formattedValue);&#10;        }&#10;    };&#10;&#10;    const handleGenderChange = (e) =&amp;gt; {&#10;        setGender(e.target.value);&#10;    };&#10;&#10;    const handleDobChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        setDob(value);&#10;        calculateAge(value);&#10;    };&#10;&#10;    const calculateAge = (dob) =&amp;gt; {&#10;        const birthDate = new Date(dob);&#10;        const today = new Date();&#10;&#10;        if (birthDate &amp;gt; today) {&#10;            setAge(null); // Reset age&#10;        } else {&#10;            let age = today.getFullYear() - birthDate.getFullYear();&#10;            const monthDifference = today.getMonth() - birthDate.getMonth();&#10;            if (monthDifference &amp;lt; 0 || (monthDifference === 0 &amp;amp;&amp;amp; today.getDate() &amp;lt; birthDate.getDate())) {&#10;                age--;&#10;            }&#10;            setAge(Math.min(age, 110)); // Limit age to maximum 110&#10;        }&#10;    };&#10;&#10;    const handleSubmit = async (e) =&amp;gt; {&#10;      e.preventDefault();&#10;      try {&#10;        const userString = localStorage.getItem('user');&#10;        if (!userString) {&#10;          console.error('User not found in localStorage');&#10;          return;&#10;        }&#10;&#10;        const { email } = JSON.parse(userString);&#10;&#10;        const response = await axios.post('http://localhost:8081/patients', {&#10;          mobile,&#10;          aadhaar,&#10;          gender,&#10;          dob,&#10;          email, // Include the email value in the request body&#10;        });&#10;        console.log(response.data); // Log the response from the server&#10;        setShowPopup(false); // Close the popup after successful submission&#10;      } catch (error) {&#10;        console.error('Failed to submit patient details:', error);&#10;      }&#10;    };&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const maxDate = new Date();&#10;        maxDate.setFullYear(maxDate.getFullYear() - 18);&#10;        setMaxBirthDate(maxDate.toISOString().split('T')[0]);&#10;    }, []);&#10;&#10;    return (&#10;        &amp;lt;&amp;gt;&#10;            {showPopup &amp;amp;&amp;amp; (&#10;                &amp;lt;div className=&amp;quot;popup&amp;quot;&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;popup-content&amp;quot;&amp;gt;&#10;                        &amp;lt;span className=&amp;quot;close-popup&amp;quot; onClick={() =&amp;gt; setShowPopup(false)}&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Complete Your Profile&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;form-group&amp;quot;&amp;gt;&#10;                                &amp;lt;label htmlFor=&amp;quot;mobile&amp;quot;&amp;gt;Mobile No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;tel&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;mobile&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Mobile Number&amp;quot;&#10;                                    value={mobile}&#10;                                    onChange={handleMobileChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {mobile.length &amp;gt; 0 &amp;amp;&amp;amp; mobile.length &amp;lt; 10 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Mobile number must be exactly 10 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;gender&amp;quot;&amp;gt;Gender:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;select&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;gender&amp;quot;&#10;                                    value={gender}&#10;                                    onChange={handleGenderChange}&#10;                                    required&#10;                                &amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;Select Gender&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;male&amp;quot;&amp;gt;Male&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;female&amp;quot;&amp;gt;Female&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;other&amp;quot;&amp;gt;Other&amp;lt;/option&amp;gt;&#10;                                &amp;lt;/select&amp;gt;&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;dob&amp;quot;&amp;gt;Date of Birth:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;date&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;dob&amp;quot;&#10;                                    value={dob}&#10;                                    onChange={handleDobChange}&#10;                                    max={maxBirthDate} // Set max birth date&#10;                                    required&#10;                                /&amp;gt;&#10;                                {age !== null &amp;amp;&amp;amp; (&#10;                                    &amp;lt;p&amp;gt;Age: {age} years&amp;lt;/p&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;aadhaar&amp;quot;&amp;gt;Aadhaar Card No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;aadhaar&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Aadhaar Number&amp;quot;&#10;                                    value={aadhaar}&#10;                                    onChange={handleAadhaarChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {aadhaar.replace(/\s/g, '').length &amp;gt; 0 &amp;amp;&amp;amp; aadhaar.replace(/\s/g, '').length &amp;lt; 12 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Aadhaar number must be exactly 12 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;address&amp;quot;&amp;gt;Address:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;address&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Address&amp;quot;&#10;                                    required&#10;                                /&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                            &amp;lt;button type=&amp;quot;submit&amp;quot; className=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&#10;                        &amp;lt;/form&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            )}&#10;            &amp;lt;section id=&amp;quot;hero&amp;quot; className=&amp;quot;d-flex align-items-center&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                        &amp;lt;p&amp;gt;TOTAL HEALTH CARE SOLUTION&amp;lt;/p&amp;gt;&#10;                        &amp;lt;h1&amp;gt;Your Most Trusted &amp;lt;br /&amp;gt;Health Partner&amp;lt;/h1&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;A repudiandae ipsam labore ipsa voluptatum quidem quae laudantium quisquam aperiam maiores sunt fugit,&amp;lt;/p&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;deserunt rem suscipit placeat.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;d-flex justify-content-start gap-2&amp;quot;&amp;gt;&#10;                        {/* Conditional rendering based on user role */}&#10;                        {user &amp;amp;&amp;amp; user.role === 'patient' &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {user &amp;amp;&amp;amp; (user.role === 'doctor' || user.role === 'receptionist') &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors-dashboard'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Track Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {/* Show 'Book Appointment' button if no user is logged in */}&#10;                        {!user &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;why-us mt-5 mt-md-0&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;content&amp;quot;&amp;gt;&#10;                                &amp;lt;h3&amp;gt;Why Choose Us?&amp;lt;/h3&amp;gt;&#10;                                &amp;lt;p&amp;gt;&#10;                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Duis aute irure dolor in reprehenderit&#10;                                    Asperiores dolores sed et. Tenetur quia eos. Autem tempore quibusdam vel necessitatibus optio ad corporis.&#10;                                &amp;lt;/p&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;Link style={{ textDecoration: 'none' }} to={'/about'} className=&amp;quot;more-btn&amp;quot;&amp;gt;Learn More &amp;lt;i className=&amp;quot;bx bx-chevron-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/Link&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-8 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;icon-boxes d-flex flex-column justify-content-center&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHouseUser className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Appointment&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;24 Hours Service&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Consequuntur sunt aut quasi enim aliquam quae harum pariatur laboris nisi ut aliquip&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHeadset className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Emergency Cases&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;h6 className='text-secondary'&amp;gt;+88 01751 040425&amp;lt;/h6&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Qui facilis perferendis quia maxime. Laborum excepturi pariatur laboriosam nihil, dolor molestias.&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaClock className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Working Hours&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;Timing schedule&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;ul className='list-group list-group-flush'&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sun - Wed : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;8:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Thus - Fri : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;9:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sat - Sun : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;10:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                            &amp;lt;/ul&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className='reco-doc'&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 mt-100 section-title text-center reco-doc-card'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Recommended Doctors&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;cardContainer&amp;quot;&amp;gt;&#10;                            {filteredDoctors.slice(0, 5).map((doctor, index) =&amp;gt; (&#10;                                &amp;lt;div key={index} className=&amp;quot;card&amp;quot;&amp;gt;&#10;                                    &amp;lt;img src={`data:image/jpeg;base64,${bufferToBase64(doctor.doc_pic)}`} alt={doctor.name} className=&amp;quot;image&amp;quot; /&amp;gt;&#10;                                    &amp;lt;h3&amp;gt;{doctor.name}&amp;lt;/h3&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Specialization:&amp;lt;/strong&amp;gt; {doctor.specialization}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Fees:&amp;lt;/strong&amp;gt; {doctor.fees}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Location:&amp;lt;/strong&amp;gt; {doctor.location}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;{doctor.description}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;button className=&amp;quot;bookButton&amp;quot;&amp;gt;Book Appointment&amp;lt;/button&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            ))}&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;section section-specialities position-relative&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 section-title text-center spec-header'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Clinic and Specialities&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;p className='m-0'&amp;gt;Lorem ipsum dolor sit amet consectetur adipisicing.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row justify-content-center&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-md-9&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;specialities-slider d-flex justify-content-center align-items-center gap-5&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img1} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Urology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img2} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Neurology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img3} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Orthopedic&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img4} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Cardiologist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img5} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Dentist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;    );&#10;}&#10;&#10;export default Home;&#10;when i fill Complete Your Profile detail form it should save the data to the corresponding user which is login and here is my login.js  code import React, { useState } from &amp;quot;react&amp;quot;;&#10;import { Link, useNavigate } from &amp;quot;react-router-dom&amp;quot;;&#10;import Validation from &amp;quot;./LoginValidation&amp;quot;;&#10;import axios from &amp;quot;axios&amp;quot;;&#10;&#10;function Login() {&#10;  const [values, setValues] = useState({&#10;    email: &amp;quot;&amp;quot;,&#10;    password: &amp;quot;&amp;quot;,&#10;    role: &amp;quot;Doctor&amp;quot;, // Default role&#10;  });&#10;&#10;  const [errors, setErrors] = useState({});&#10;  const navigate = useNavigate();&#10;&#10;  const handleInput = (event) =&amp;gt; {&#10;    setValues((prev) =&amp;gt; ({ ...prev, [event.target.name]: event.target.value }));&#10;  };&#10;&#10;const handleSubmit = (event) =&amp;gt; {&#10;    event.preventDefault();&#10;    const validationErrors = Validation(values);&#10;    setErrors(validationErrors);&#10;&#10;    if (Object.keys(validationErrors).length === 0) {&#10;        axios&#10;          .post(&amp;quot;http://localhost:8081/login&amp;quot;, values)&#10;          .then((res) =&amp;gt; {&#10;            if (res.data.status === &amp;quot;Success&amp;quot;) {&#10;              // Ensure the structure of the user object is correct&#10;              localStorage.setItem(&amp;quot;user&amp;quot;, JSON.stringify(res.data.user));&#10;&#10;              if (values.role === &amp;quot;Doctor&amp;quot;) {&#10;                navigate(&amp;quot;/doctor-home&amp;quot;);&#10;              } else if (values.role === &amp;quot;Receptionist&amp;quot;) {&#10;                navigate(&amp;quot;/receptionist-home&amp;quot;);&#10;              } else {&#10;                navigate(&amp;quot;/home&amp;quot;);&#10;              }&#10;            } else {&#10;              alert(&amp;quot;No record exist&amp;quot;);&#10;            }&#10;          })&#10;          .catch((err) =&amp;gt; console.log(err));&#10;    }&#10;  };&#10;&#10;&#10;  return (&#10;    &amp;lt;div className=&amp;quot;d-flex justify-content-center align-items-center vh-100&amp;quot;&amp;gt;&#10;      &amp;lt;div className=&amp;quot;bg-white p-3 rounded w-25&amp;quot;&amp;gt;&#10;        &amp;lt;h2&amp;gt;Sign In&amp;lt;/h2&amp;gt;&#10;        &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#10;          &amp;lt;div className=&amp;quot;mb-3&amp;quot;&amp;gt;&#10;            &amp;lt;label htmlFor=&amp;quot;email&amp;quot;&amp;gt;Email&amp;lt;/label&amp;gt;&#10;            &amp;lt;input&#10;              type=&amp;quot;email&amp;quot;&#10;              placeholder=&amp;quot;Enter Email&amp;quot;&#10;              name=&amp;quot;email&amp;quot;&#10;              onChange={handleInput}&#10;              className=&amp;quot;form-control rounded-0&amp;quot;&#10;            /&amp;gt;&#10;            {errors.email &amp;amp;&amp;amp; (&#10;              &amp;lt;span className=&amp;quot;text-danger&amp;quot;&amp;gt;{errors.email}&amp;lt;/span&amp;gt;&#10;            )}&#10;          &amp;lt;/div&amp;gt;&#10;          &amp;lt;div className=&amp;quot;mb-3&amp;quot;&amp;gt;&#10;            &amp;lt;label htmlFor=&amp;quot;password&amp;quot;&amp;gt;Password&amp;lt;/label&amp;gt;&#10;            &amp;lt;input&#10;              type=&amp;quot;password&amp;quot;&#10;              name=&amp;quot;password&amp;quot;&#10;              placeholder=&amp;quot;Enter Password&amp;quot;&#10;              onChange={handleInput}&#10;              className=&amp;quot;form-control rounded-0&amp;quot;&#10;            /&amp;gt;&#10;            {errors.password &amp;amp;&amp;amp; (&#10;              &amp;lt;span className=&amp;quot;text-danger&amp;quot;&amp;gt;{errors.password}&amp;lt;/span&amp;gt;&#10;            )}&#10;          &amp;lt;/div&amp;gt;&#10;          &amp;lt;div className=&amp;quot;mb-3&amp;quot;&amp;gt;&#10;            &amp;lt;label htmlFor=&amp;quot;role&amp;quot;&amp;gt;Role&amp;lt;/label&amp;gt;&#10;            &amp;lt;select&#10;              name=&amp;quot;role&amp;quot;&#10;              onChange={handleInput}&#10;              className=&amp;quot;form-control rounded-0&amp;quot;&#10;            &amp;gt;&#10;              &amp;lt;option value=&amp;quot;Doctor&amp;quot;&amp;gt;Doctor&amp;lt;/option&amp;gt;&#10;              &amp;lt;option value=&amp;quot;Patient&amp;quot;&amp;gt;Patient&amp;lt;/option&amp;gt;&#10;              &amp;lt;option value=&amp;quot;Receptionist&amp;quot;&amp;gt;Receptionist&amp;lt;/option&amp;gt;&#10;            &amp;lt;/select&amp;gt;&#10;          &amp;lt;/div&amp;gt;&#10;          &amp;lt;button type=&amp;quot;submit&amp;quot; className=&amp;quot;btn btn-success w-100&amp;quot;&amp;gt;&#10;            &amp;lt;strong&amp;gt;Log In&amp;lt;/strong&amp;gt;&#10;          &amp;lt;/button&amp;gt;&#10;          &amp;lt;p&amp;gt;You agree to TnC&amp;lt;/p&amp;gt;&#10;          &amp;lt;Link to=&amp;quot;/signup&amp;quot; className=&amp;quot;btn btn-default border w-100 bg-light&amp;quot;&amp;gt;&#10;            &amp;lt;strong&amp;gt;Create Account&amp;lt;/strong&amp;gt;&#10;          &amp;lt;/Link&amp;gt;&#10;          &amp;lt;br /&amp;gt;&#10;          &amp;lt;br /&amp;gt;&#10;          &amp;lt;Link&#10;            to=&amp;quot;/forgotpassword&amp;quot;&#10;            className=&amp;quot;btn btn-default border w-100 bg-light&amp;quot;&#10;          &amp;gt;&#10;            &amp;lt;strong&amp;gt;Forgot Password&amp;lt;/strong&amp;gt;&#10;          &amp;lt;/Link&amp;gt;&#10;        &amp;lt;/form&amp;gt;&#10;      &amp;lt;/div&amp;gt;&#10;    &amp;lt;/div&amp;gt;&#10;  );&#10;}&#10;&#10;export default Login;&#10; in patient table " />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="To save the patient details entered in the &quot;Complete Your Profile&quot; form to the corresponding user in the `patient` table, you can modify the `/patients` POST route in your `server.js` file. Here's how you can update the code:&#10;&#10;```javascript&#10;app.post(&quot;/patients&quot;, (req, res) =&gt; {&#10;  const { mobile, aadhaar, gender, dob } = req.body;&#10;  const userString = localStorage.getItem('user');&#10;&#10;  if (!userString) {&#10;    return res.status(400).json({ error: &quot;User not found in localStorage&quot; });&#10;  }&#10;&#10;  const { login_id, name, email, role } = JSON.parse(userString);&#10;&#10;  if (!login_id || !name || !role) {&#10;    return res.status(400).json({ error: &quot;Invalid user data&quot; });&#10;  }&#10;&#10;  // Check if the email is missing or null&#10;  if (!email) {&#10;    return res.status(400).json({ error: &quot;Email is required&quot; });&#10;  }&#10;&#10;  // Check if the patient already exists&#10;  const checkSql = &quot;SELECT * FROM patient WHERE login_id = ? AND email = ? AND role = ?&quot;;&#10;  db.query(checkSql, [login_id, email, role], (err, existingPatient) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Error checking patient existence:&quot;, err);&#10;      return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;    }&#10;&#10;    if (existingPatient.length &gt; 0) {&#10;      const patient = existingPatient[0];&#10;&#10;      // Update the existing patient record&#10;      const updateSql =&#10;        &quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ? WHERE login_id = ?&quot;;&#10;      const updateValues = [mobile, aadhaar, gender, dob, login_id];&#10;&#10;      db.query(updateSql, updateValues, (err, updateResult) =&gt; {&#10;        if (err) {&#10;          console.error(&quot;Error updating patient details:&quot;, err);&#10;          return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;        }&#10;&#10;        return res.json({ message: &quot;Patient details updated successfully&quot; });&#10;      });&#10;    } else {&#10;      // Insert a new patient record&#10;      const insertSql =&#10;        &quot;INSERT INTO patient (login_id, email, role, number, adhar_no, gender, dob, name, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW())&quot;;&#10;      const insertValues = [login_id, email, role, mobile, aadhaar, gender, dob, name];&#10;&#10;      db.query(insertSql, insertValues, (err, insertResult) =&gt; {&#10;        if (err) {&#10;          console.error(&quot;Error inserting patient details:&quot;, err);&#10;          return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;        }&#10;&#10;        return res.json({ message: &quot;Patient details saved successfully&quot; });&#10;      });&#10;    }&#10;  });&#10;});&#10;```&#10;&#10;In the updated code, we first check if the patient already exists in the database using the `login_id`, `email`, and `role`. If the patient exists, we update the existing record with the new details (`number`, `adhar_no`, `gender`, and `dob`).&#10;&#10;If the patient does not exist, we insert a new record in the `patient` table with the provided details (`login_id`, `email`, `role`, `number`, `adhar_no`, `gender`, `dob`, `name`, and the current timestamp for `created_at`).&#10;&#10;With this approach, when a user fills out the &quot;Complete Your Profile&quot; form and submits the data, it will either update the existing patient record or create a new one if the patient does not exist in the database.&#10;&#10;Note: Make sure that the `patient` table in your database has columns corresponding to the fields you're inserting or updating (`number`, `adhar_no`, `gender`, `dob`, `name`, `created_at`, etc.)." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="but i dont want to insert new record i just need to update by checking if user login exists in patient table and complete your profile field are empty for login user in patient table then it should enter and update Complete your profile fields in patient table " />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="Understood. In that case, we can modify the `/patients` POST route to only update the existing patient record if the required fields are empty. Here's the updated code:&#10;&#10;```javascript&#10;app.post(&quot;/patients&quot;, (req, res) =&gt; {&#10;  const { mobile, aadhaar, gender, dob } = req.body;&#10;  const userString = localStorage.getItem('user');&#10;&#10;  if (!userString) {&#10;    return res.status(400).json({ error: &quot;User not found in localStorage&quot; });&#10;  }&#10;&#10;  const { login_id, name, email, role } = JSON.parse(userString);&#10;&#10;  if (!login_id || !name || !role) {&#10;    return res.status(400).json({ error: &quot;Invalid user data&quot; });&#10;  }&#10;&#10;  // Check if the email is missing or null&#10;  if (!email) {&#10;    return res.status(400).json({ error: &quot;Email is required&quot; });&#10;  }&#10;&#10;  // Check if the patient already exists&#10;  const checkSql = &quot;SELECT * FROM patient WHERE login_id = ? AND email = ? AND role = ?&quot;;&#10;  db.query(checkSql, [login_id, email, role], (err, existingPatient) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Error checking patient existence:&quot;, err);&#10;      return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;    }&#10;&#10;    if (existingPatient.length &gt; 0) {&#10;      const patient = existingPatient[0];&#10;&#10;      // Check if the required fields are empty&#10;      const shouldUpdate =&#10;        !patient.number ||&#10;        !patient.adhar_no ||&#10;        !patient.gender ||&#10;        !patient.dob;&#10;&#10;      if (shouldUpdate) {&#10;        // Update the existing patient record&#10;        const updateSql =&#10;          &quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ? WHERE login_id = ?&quot;;&#10;        const updateValues = [mobile, aadhaar, gender, dob, login_id];&#10;&#10;        db.query(updateSql, updateValues, (err, updateResult) =&gt; {&#10;          if (err) {&#10;            console.error(&quot;Error updating patient details:&quot;, err);&#10;            return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;          }&#10;&#10;          return res.json({ message: &quot;Patient details updated successfully&quot; });&#10;        });&#10;      } else {&#10;        return res.json({ message: &quot;Patient details are already complete&quot; });&#10;      }&#10;    } else {&#10;      return res.status(404).json({ error: &quot;Patient not found&quot; });&#10;    }&#10;  });&#10;});&#10;```&#10;&#10;In the updated code, we first check if the patient already exists in the database. If the patient exists, we then check if any of the required fields (`number`, `adhar_no`, `gender`, or `dob`) are empty or null. If any of these fields are empty, we update the patient record with the new values provided in the request body.&#10;&#10;If all the required fields are already filled, we return a message indicating that the patient details are already complete.&#10;&#10;With this approach, you don't need to worry about inserting new patient records, as the code will only update the existing record if the required fields are empty or null." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="i am getting this error Server running on port 8081&#10;Connected to the MySQL database.&#10;Connected to the MySQL database.&#10;Database error: Error: Column 'password' cannot be null&#10;    at Packet.asError (A:\quater1\quater\backend\node_modules\mysql2\lib\packets\packet.js:728:17)&#10;    at Query.execute (A:\quater1\quater\backend\node_modules\mysql2\lib\commands\command.js:29:26)&#10;    at Connection.handlePacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:481:34)&#10;    at PacketParser.onPacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:97:12)&#10;    at PacketParser.executeStart (A:\quater1\quater\backend\node_modules\mysql2\lib\packet_parser.js:75:16)&#10;    at Socket.&amp;lt;anonymous&amp;gt; (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:104:25)&#10;    at Socket.emit (node:events:514:28)&#10;    at addChunk (node:internal/streams/readable:545:12)&#10;    at readableAddChunkPushByteMode (node:internal/streams/readable:495:3)&#10;    at Readable.push (node:internal/streams/readable:375:5) {&#10;  code: 'ER_BAD_NULL_ERROR',&#10;  errno: 1048,&#10;  sqlState: '23000',&#10;  sqlMessage: &amp;quot;Column 'password' cannot be null&amp;quot;,&#10;  sql: '\n' +&#10;    '    INSERT INTO patient (\n' +&#10;    '      email, password, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic\n' +&#10;    &amp;quot;    ) VALUES ('201260116052setiit@gmail.com', NULL, NULL, NULL, 'male', NULL, NULL, NULL, NULL, '2024-06-04 14:26:57.943', NULL, '2002-07-17', NULL)\n&amp;quot; +&#10;    '  '&#10;}after making above changes" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="The error `Column 'password' cannot be null` is likely occurring because the `patient` table in your database has a `password` column defined as `NOT NULL`, which means it cannot be left empty or null.&#10;&#10;To resolve this issue, you can either:&#10;&#10;1. Remove the `password` column from the `patient` table if it's not needed, or&#10;2. Provide a default value or an empty string for the `password` column when inserting or updating records.&#10;&#10;Here's how you can modify the SQL queries to handle the `password` column:&#10;&#10;1. For the `INSERT` query, you can either:&#10;   - Remove the `password` column from the list of columns being inserted, or&#10;   - Provide an empty string (`''`) or a default value for the `password` column.&#10;&#10;```sql&#10;INSERT INTO `patient` (`patient_id`, `login_id`, `email`, `password`, `role`, `age`, `gender`, `address`, `number`, `insurance`, `adhar_no`, `created_at`, `updated_at`, `name`, `dob`, `gender`, `address`, `number`, `insurance`, `adhar_no`) VALUES (NULL, NULL, NULL, '', 'Patient', NULL, NULL, NULL, NULL, NULL, NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, NULL, NULL, NULL);&#10;```&#10;&#10;2. For the `UPDATE` query, you can either:&#10;   - Remove the `password` column from the list of columns being updated, or&#10;   - Provide an empty string (`''`) or a default value for the `password` column.&#10;&#10;```sql&#10;UPDATE `patient` SET `patient_id` = NULL, `email` = NULL, `password` = '', `role` = 'Patient', `age` = NULL, `gender` = NULL, `address` = NULL, `number` = NULL, `insurance` = NULL, `adhar_no` = NULL, `created_at` = CURRENT_TIMESTAMP, `updated_at` = CURRENT_TIMESTAMP, `name` = NULL, `dob` = NULL, `gender` = NULL, `address` = NULL, `number` = NULL, `insurance` = NULL, `adhar_no` = NULL WHERE `patient_id` = NULL;&#10;```&#10;&#10;By providing an empty string (`''`) or a default value for the `password` column, you can avoid the &quot;Column 'password' cannot be null&quot; error.&#10;&#10;Alternatively, if the `password` column is not required for your application, you can remove it from the `patient` table altogether." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="i like the second option" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="Okay, let's go with the second option of providing an empty string (`''`) or a default value for the `password` column when inserting or updating records in the `patient` table.&#10;&#10;Here's how you can modify the `/patients` POST route in your `server.js` file:&#10;&#10;```javascript&#10;app.post(&quot;/patients&quot;, (req, res) =&gt; {&#10;  const { mobile, aadhaar, gender, dob } = req.body;&#10;  const userString = localStorage.getItem('user');&#10;&#10;  if (!userString) {&#10;    return res.status(400).json({ error: &quot;User not found in localStorage&quot; });&#10;  }&#10;&#10;  const { login_id, name, email, role } = JSON.parse(userString);&#10;&#10;  if (!login_id || !name || !role) {&#10;    return res.status(400).json({ error: &quot;Invalid user data&quot; });&#10;  }&#10;&#10;  // Check if the email is missing or null&#10;  if (!email) {&#10;    return res.status(400).json({ error: &quot;Email is required&quot; });&#10;  }&#10;&#10;  // Check if the patient already exists&#10;  const checkSql = &quot;SELECT * FROM patient WHERE login_id = ? AND email = ? AND role = ?&quot;;&#10;  db.query(checkSql, [login_id, email, role], (err, existingPatient) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Error checking patient existence:&quot;, err);&#10;      return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;    }&#10;&#10;    if (existingPatient.length &gt; 0) {&#10;      const patient = existingPatient[0];&#10;&#10;      // Check if the required fields are empty&#10;      const shouldUpdate =&#10;        !patient.number ||&#10;        !patient.adhar_no ||&#10;        !patient.gender ||&#10;        !patient.dob;&#10;&#10;      if (shouldUpdate) {&#10;        // Update the existing patient record&#10;        const updateSql =&#10;          &quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ?, password = '' WHERE login_id = ?&quot;;&#10;        const updateValues = [mobile, aadhaar, gender, dob, '', login_id];&#10;&#10;        db.query(updateSql, updateValues, (err, updateResult) =&gt; {&#10;          if (err) {&#10;            console.error(&quot;Error updating patient details:&quot;, err);&#10;            return res.status(500).json({ error: &quot;Internal Server Error&quot; });&#10;          }&#10;&#10;          return res.json({ message: &quot;Patient details updated successfully&quot; });&#10;        });&#10;      } else {&#10;        return res.json({ message: &quot;Patient details are already complete&quot; });&#10;      }&#10;    } else {&#10;      return res.status(404).json({ error: &quot;Patient not found&quot; });&#10;    }&#10;  });&#10;});&#10;```&#10;&#10;In the updated code, we've modified the `updateSql` query to include the `password` column and set it to an empty string (`''`). This way, when updating the patient record, the `password` column will be set to an empty string, avoiding the &quot;Column 'password' cannot be null&quot; error.&#10;&#10;If you prefer to set a default value for the `password` column instead of an empty string, you can replace `''` with the desired default value.&#10;&#10;With this change, the `/patients` POST route should now update the existing patient record without encountering the &quot;Column 'password' cannot be null&quot; error." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="this is my server.js code const express = require(&amp;quot;express&amp;quot;);&#10;const mysql = require(&amp;quot;mysql2&amp;quot;);&#10;const cors = require(&amp;quot;cors&amp;quot;);&#10;const dotenv = require(&amp;quot;dotenv&amp;quot;);&#10;&#10;// Load environment variables from .env file&#10;dotenv.config();&#10;&#10;const app = express();&#10;const port = process.env.PORT || 8081;&#10;&#10;app.use(cors());&#10;app.use(express.json());&#10;&#10;// Create a MySQL connection using environment variables&#10;const db = mysql.createConnection({&#10;  host: process.env.DB_HOST,&#10;  user: process.env.DB_USER,&#10;  password: process.env.DB_PASSWORD,&#10;  database: process.env.DB_DATABASE,&#10;});&#10;&#10;db.connect((err) =&amp;gt; {&#10;  if (err) {&#10;    console.error(&amp;quot;Error connecting to the database:&amp;quot;, err);&#10;  } else {&#10;    console.log(&amp;quot;Connected to the MySQL database.&amp;quot;);&#10;  }&#10;});&#10;&#10;const doctorRoutes = require(&amp;quot;./routes/doctorRoutes&amp;quot;);&#10;const patientRoutes = require(&amp;quot;./routes/patinetRoutes&amp;quot;);&#10;&#10;app.use(&amp;quot;/doctors&amp;quot;, doctorRoutes);&#10;app.use(&amp;quot;/patients&amp;quot;, patientRoutes);&#10;&#10;app.post(&amp;quot;/login&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;SELECT * FROM login WHERE `email`=? AND `password`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.email, req.body.password, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Database error&amp;quot; });&#10;      }&#10;      if (data.length &amp;gt; 0) {&#10;        const user = data[0];&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          user: {&#10;            login_id: user.login_id,&#10;            name: user.name,&#10;            role: user.role,&#10;            email: user.email,&#10;          },&#10;        });&#10;      } else {&#10;        return res.json({ status: &amp;quot;Failed&amp;quot;, message: &amp;quot;Invalid credentials&amp;quot; });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;&#10;app.post(&amp;quot;/signup&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;INSERT INTO login (`name`, `email`, `password`, `role`) VALUES (?)&amp;quot;;&#10;  const values = [&#10;    req.body.name,&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Error during signup&amp;quot; });&#10;    }&#10;    return res.json({ status: &amp;quot;Success&amp;quot;, message: &amp;quot;Signup successful&amp;quot; });&#10;  });&#10;});&#10;&#10;app.post(&amp;quot;/forgotpassword&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;UPDATE login SET `password`=? WHERE `email`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.password, req.body.email, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Error executing query:&amp;quot;, err);&#10;        return res.json({&#10;          status: &amp;quot;Error&amp;quot;,&#10;          message: &amp;quot;Error updating password&amp;quot;,&#10;        });&#10;      }&#10;      if (data.affectedRows &amp;gt; 0) {&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          message: &amp;quot;Password updated successfully&amp;quot;,&#10;        });&#10;      } else {&#10;        return res.json({&#10;          status: &amp;quot;Failed&amp;quot;,&#10;          message: &amp;quot;No user found with provided details&amp;quot;,&#10;        });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;// Fetch patient details by email&#10;app.get(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const sql = &amp;quot;SELECT * FROM patient WHERE email = ?&amp;quot;;&#10;&#10;  db.query(sql, [email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error fetching patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.length === 0) {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;&#10;    const patient = data[0];&#10;    return res.json(patient);&#10;  });&#10;});&#10;&#10;// Update patient details by email&#10;app.put(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const { name, email: newEmail, number, adhar_no, dob, gender, insurance, address } = req.body;&#10;&#10;  const sql = &amp;quot;UPDATE patient SET name =?, email =?, number =?, adhar_no =?, dob =?, gender =?, insurance =?, address =? WHERE email =?&amp;quot;;&#10;&#10;  db.query(sql, [name, newEmail, number, adhar_no, dob, gender, insurance, address, email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;    } else {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;  });&#10;});&#10;&#10;//app.post(&amp;quot;/patients&amp;quot;, (req, res) =&amp;gt; {&#10;//  const { mobile, aadhaar, gender, dob } = req.body;&#10;//  const userString = localStorage.getItem('user');&#10;//&#10;//  if (!userString) {&#10;//    return res.status(400).json({ error: &amp;quot;User not found in localStorage&amp;quot; });&#10;//  }&#10;//&#10;//  const { login_id, name, email, role } = JSON.parse(userString);&#10;//&#10;//  if (!login_id || !name || !role) {&#10;//    return res.status(400).json({ error: &amp;quot;Invalid user data&amp;quot; });&#10;//  }&#10;//&#10;//  // Check if the email is missing or null&#10;//  if (!email) {&#10;//    return res.status(400).json({ error: &amp;quot;Email is required&amp;quot; });&#10;//  }&#10;//&#10;//  // Check if the patient already exists&#10;//  const checkSql = &amp;quot;SELECT * FROM patient WHERE login_id = ? AND email = ? AND role = ?&amp;quot;;&#10;//  db.query(checkSql, [login_id, email, role], (err, existingPatient) =&amp;gt; {&#10;//    if (err) {&#10;//      console.error(&amp;quot;Error checking patient existence:&amp;quot;, err);&#10;//      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;//    }&#10;//&#10;//    if (existingPatient.length &amp;gt; 0) {&#10;//      const patient = existingPatient[0];&#10;//&#10;//      // Check if the required fields are empty&#10;//      const shouldUpdate =&#10;//        !patient.number ||&#10;//        !patient.adhar_no ||&#10;//        !patient.gender ||&#10;//        !patient.dob;&#10;//&#10;//      if (shouldUpdate) {&#10;//        // Update the existing patient record&#10;//        const updateSql =&#10;//          &amp;quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ?, password = '' WHERE login_id = ?&amp;quot;;&#10;//        const updateValues = [mobile, aadhaar, gender, dob, '', login_id];&#10;//&#10;//        db.query(updateSql, updateValues, (err, updateResult) =&amp;gt; {&#10;//          if (err) {&#10;//            console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;//            return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;//          }&#10;//&#10;//          return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;//        });&#10;//      } else {&#10;//        return res.json({ message: &amp;quot;Patient details are already complete&amp;quot; });&#10;//      }&#10;//    } else {&#10;//      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;//    }&#10;//  });&#10;//});&#10;&#10;&#10;&#10;app.listen(port, () =&amp;gt; console.log(`Server running on port ${port}`));&#10;this is my home.js code import React, { useState, useEffect } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import './App.css';&#10;import 'bootstrap/dist/css/bootstrap.min.css';&#10;import { FaCheckDouble, FaClock, FaHeadset, FaHouseUser } from &amp;quot;react-icons/fa&amp;quot;;&#10;&#10;import img1 from &amp;quot;./images/specialities-01.png&amp;quot;;&#10;import img2 from &amp;quot;./images/specialities-02.png&amp;quot;;&#10;import img3 from &amp;quot;./images/specialities-03.png&amp;quot;;&#10;import img4 from &amp;quot;./images/specialities-04.png&amp;quot;;&#10;import img5 from &amp;quot;./images/specialities-05.png&amp;quot;;&#10;import axios from 'axios';&#10;&#10;function Home() {&#10;    const user = JSON.parse(localStorage.getItem('user'));&#10;    // const role = user.role; // Can be 'Doctor', 'Receptionist', or 'Patient'&#10;&#10;    const [filter, setFilter] = useState({ name: '', specialization: '', fees: '', location: '' });&#10;    const [doctors, setDoctors] = useState([]);&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const fetchDoctors = async () =&amp;gt; {&#10;            try {&#10;                const response = await axios.get('http://localhost:8081/doctors');&#10;                setDoctors(response.data);&#10;            } catch (error) {&#10;                console.error('Failed to fetch doctors:', error);&#10;            }&#10;        };&#10;        fetchDoctors();&#10;    }, []);&#10;&#10;    const bufferToBase64 = (buffer) =&amp;gt; {&#10;        let binary = '';&#10;        const bytes = new Uint8Array(buffer.data);&#10;        const len = bytes.byteLength;&#10;        for (let i = 0; i &amp;lt; len; i++) {&#10;            binary += String.fromCharCode(bytes[i]);&#10;        }&#10;        return window.btoa(binary);&#10;    };&#10;&#10;    const filteredDoctors = doctors.filter((doctor) =&amp;gt;&#10;        doctor.name.toLowerCase().includes(filter.name.toLowerCase()) &amp;amp;&amp;amp;&#10;        doctor.specialization.toLowerCase().includes(filter.specialization.toLowerCase()) &amp;amp;&amp;amp;&#10;        (filter.fees === '' || doctor.fees.includes(filter.fees)) &amp;amp;&amp;amp;&#10;        (filter.location === '' || doctor.location.toLowerCase().includes(filter.location.toLowerCase()))&#10;    );&#10;&#10;    const [showPopup, setShowPopup] = useState(true);&#10;    const [mobile, setMobile] = useState('');&#10;    const [aadhaar, setAadhaar] = useState('');&#10;    const [gender, setGender] = useState('');&#10;    const [dob, setDob] = useState('');&#10;    const [age, setAge] = useState(null);&#10;    const [maxBirthDate, setMaxBirthDate] = useState('');&#10;&#10;    const handleMobileChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 10) {&#10;            setMobile(value);&#10;        }&#10;    };&#10;&#10;    const handleAadhaarChange = (e) =&amp;gt; {&#10;        const value = e.target.value.replace(/\s/g, ''); // Remove spaces&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 12) {&#10;            const formattedValue = value.replace(/(.{4})/g, '$1 ').trim();&#10;            setAadhaar(formattedValue);&#10;        }&#10;    };&#10;&#10;    const handleGenderChange = (e) =&amp;gt; {&#10;        setGender(e.target.value);&#10;    };&#10;&#10;    const handleDobChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        setDob(value);&#10;        calculateAge(value);&#10;    };&#10;&#10;    const calculateAge = (dob) =&amp;gt; {&#10;        const birthDate = new Date(dob);&#10;        const today = new Date();&#10;&#10;        if (birthDate &amp;gt; today) {&#10;            setAge(null); // Reset age&#10;        } else {&#10;            let age = today.getFullYear() - birthDate.getFullYear();&#10;            const monthDifference = today.getMonth() - birthDate.getMonth();&#10;            if (monthDifference &amp;lt; 0 || (monthDifference === 0 &amp;amp;&amp;amp; today.getDate() &amp;lt; birthDate.getDate())) {&#10;                age--;&#10;            }&#10;            setAge(Math.min(age, 110)); // Limit age to maximum 110&#10;        }&#10;    };&#10;&#10;    const handleSubmit = async (e) =&amp;gt; {&#10;      e.preventDefault();&#10;      try {&#10;        const userString = localStorage.getItem('user');&#10;        if (!userString) {&#10;          console.error('User not found in localStorage');&#10;          return;&#10;        }&#10;&#10;        const { email } = JSON.parse(userString);&#10;&#10;        const response = await axios.post('http://localhost:8081/patients', {&#10;          mobile,&#10;          aadhaar,&#10;          gender,&#10;          dob,&#10;          email, // Include the email value in the request body&#10;        });&#10;        console.log(response.data); // Log the response from the server&#10;        setShowPopup(false); // Close the popup after successful submission&#10;      } catch (error) {&#10;        console.error('Failed to submit patient details:', error);&#10;      }&#10;    };&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const maxDate = new Date();&#10;        maxDate.setFullYear(maxDate.getFullYear() - 18);&#10;        setMaxBirthDate(maxDate.toISOString().split('T')[0]);&#10;    }, []);&#10;&#10;    return (&#10;        &amp;lt;&amp;gt;&#10;            {showPopup &amp;amp;&amp;amp; (&#10;                &amp;lt;div className=&amp;quot;popup&amp;quot;&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;popup-content&amp;quot;&amp;gt;&#10;                        &amp;lt;span className=&amp;quot;close-popup&amp;quot; onClick={() =&amp;gt; setShowPopup(false)}&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Complete Your Profile&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;form-group&amp;quot;&amp;gt;&#10;                                &amp;lt;label htmlFor=&amp;quot;mobile&amp;quot;&amp;gt;Mobile No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;tel&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;mobile&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Mobile Number&amp;quot;&#10;                                    value={mobile}&#10;                                    onChange={handleMobileChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {mobile.length &amp;gt; 0 &amp;amp;&amp;amp; mobile.length &amp;lt; 10 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Mobile number must be exactly 10 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;gender&amp;quot;&amp;gt;Gender:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;select&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;gender&amp;quot;&#10;                                    value={gender}&#10;                                    onChange={handleGenderChange}&#10;                                    required&#10;                                &amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;Select Gender&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;male&amp;quot;&amp;gt;Male&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;female&amp;quot;&amp;gt;Female&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;other&amp;quot;&amp;gt;Other&amp;lt;/option&amp;gt;&#10;                                &amp;lt;/select&amp;gt;&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;dob&amp;quot;&amp;gt;Date of Birth:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;date&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;dob&amp;quot;&#10;                                    value={dob}&#10;                                    onChange={handleDobChange}&#10;                                    max={maxBirthDate} // Set max birth date&#10;                                    required&#10;                                /&amp;gt;&#10;                                {age !== null &amp;amp;&amp;amp; (&#10;                                    &amp;lt;p&amp;gt;Age: {age} years&amp;lt;/p&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;aadhaar&amp;quot;&amp;gt;Aadhaar Card No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;aadhaar&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Aadhaar Number&amp;quot;&#10;                                    value={aadhaar}&#10;                                    onChange={handleAadhaarChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {aadhaar.replace(/\s/g, '').length &amp;gt; 0 &amp;amp;&amp;amp; aadhaar.replace(/\s/g, '').length &amp;lt; 12 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Aadhaar number must be exactly 12 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;address&amp;quot;&amp;gt;Address:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;address&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Address&amp;quot;&#10;                                    required&#10;                                /&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                            &amp;lt;button type=&amp;quot;submit&amp;quot; className=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&#10;                        &amp;lt;/form&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            )}&#10;            &amp;lt;section id=&amp;quot;hero&amp;quot; className=&amp;quot;d-flex align-items-center&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                        &amp;lt;p&amp;gt;TOTAL HEALTH CARE SOLUTION&amp;lt;/p&amp;gt;&#10;                        &amp;lt;h1&amp;gt;Your Most Trusted &amp;lt;br /&amp;gt;Health Partner&amp;lt;/h1&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;A repudiandae ipsam labore ipsa voluptatum quidem quae laudantium quisquam aperiam maiores sunt fugit,&amp;lt;/p&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;deserunt rem suscipit placeat.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;d-flex justify-content-start gap-2&amp;quot;&amp;gt;&#10;                        {/* Conditional rendering based on user role */}&#10;                        {user &amp;amp;&amp;amp; user.role === 'patient' &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {user &amp;amp;&amp;amp; (user.role === 'doctor' || user.role === 'receptionist') &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors-dashboard'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Track Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {/* Show 'Book Appointment' button if no user is logged in */}&#10;                        {!user &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;why-us mt-5 mt-md-0&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;content&amp;quot;&amp;gt;&#10;                                &amp;lt;h3&amp;gt;Why Choose Us?&amp;lt;/h3&amp;gt;&#10;                                &amp;lt;p&amp;gt;&#10;                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Duis aute irure dolor in reprehenderit&#10;                                    Asperiores dolores sed et. Tenetur quia eos. Autem tempore quibusdam vel necessitatibus optio ad corporis.&#10;                                &amp;lt;/p&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;Link style={{ textDecoration: 'none' }} to={'/about'} className=&amp;quot;more-btn&amp;quot;&amp;gt;Learn More &amp;lt;i className=&amp;quot;bx bx-chevron-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/Link&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-8 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;icon-boxes d-flex flex-column justify-content-center&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHouseUser className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Appointment&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;24 Hours Service&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Consequuntur sunt aut quasi enim aliquam quae harum pariatur laboris nisi ut aliquip&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHeadset className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Emergency Cases&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;h6 className='text-secondary'&amp;gt;+88 01751 040425&amp;lt;/h6&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Qui facilis perferendis quia maxime. Laborum excepturi pariatur laboriosam nihil, dolor molestias.&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaClock className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Working Hours&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;Timing schedule&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;ul className='list-group list-group-flush'&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sun - Wed : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;8:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Thus - Fri : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;9:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sat - Sun : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;10:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                            &amp;lt;/ul&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className='reco-doc'&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 mt-100 section-title text-center reco-doc-card'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Recommended Doctors&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;cardContainer&amp;quot;&amp;gt;&#10;                            {filteredDoctors.slice(0, 5).map((doctor, index) =&amp;gt; (&#10;                                &amp;lt;div key={index} className=&amp;quot;card&amp;quot;&amp;gt;&#10;                                    &amp;lt;img src={`data:image/jpeg;base64,${bufferToBase64(doctor.doc_pic)}`} alt={doctor.name} className=&amp;quot;image&amp;quot; /&amp;gt;&#10;                                    &amp;lt;h3&amp;gt;{doctor.name}&amp;lt;/h3&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Specialization:&amp;lt;/strong&amp;gt; {doctor.specialization}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Fees:&amp;lt;/strong&amp;gt; {doctor.fees}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Location:&amp;lt;/strong&amp;gt; {doctor.location}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;{doctor.description}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;button className=&amp;quot;bookButton&amp;quot;&amp;gt;Book Appointment&amp;lt;/button&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            ))}&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;section section-specialities position-relative&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 section-title text-center spec-header'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Clinic and Specialities&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;p className='m-0'&amp;gt;Lorem ipsum dolor sit amet consectetur adipisicing.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row justify-content-center&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-md-9&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;specialities-slider d-flex justify-content-center align-items-center gap-5&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img1} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Urology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img2} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Neurology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img3} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Orthopedic&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img4} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Cardiologist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img5} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Dentist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;    );&#10;}&#10;&#10;export default Home;&#10;this is my patientController.js code // Controller/patientController.js&#10;&#10;const db = require(&amp;quot;../db&amp;quot;);&#10;&#10;// Get all patients&#10;exports.getAllPatients = (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;SELECT * FROM patient&amp;quot;;&#10;  db.query(sql, (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    return res.json(data);&#10;  });&#10;};&#10;&#10;// Get patient by patient_id&#10;exports.getPatientById = (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;SELECT * FROM patient WHERE patient_id = ?&amp;quot;;&#10;  db.query(sql, [req.params.id], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    if (data.length &amp;gt; 0) {&#10;      return res.json(data[0]);&#10;    } else {&#10;      return res.status(404).json(&amp;quot;Patient not found&amp;quot;);&#10;    }&#10;  });&#10;};&#10;&#10;// Create new patient&#10;exports.createPatient = (req, res) =&amp;gt; {&#10;  const sql = `&#10;    INSERT INTO patient (&#10;      email, password, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic&#10;    ) VALUES (?)&#10;  `;&#10;  const values = [&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;    req.body.age,&#10;    req.body.gender,&#10;    req.body.address,&#10;    req.body.number,&#10;    req.body.insurance,&#10;    req.body.adhar_no,&#10;    new Date(), // created_at, set to current date and time&#10;    req.body.name,&#10;    req.body.dob,&#10;    req.body.patient_pic&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    return res.json(&amp;quot;Success&amp;quot;);&#10;  });&#10;};&#10;&#10;// Update patient by patient_id&#10;exports.updatePatientById = (req, res) =&amp;gt; {&#10;  const sql = `&#10;    UPDATE patient SET &#10;      email=?, password=?, role=?, age=?, gender=?, address=?, number=?, insurance=?, adhar_no=?, name=?, dob=?, patient_pic=?&#10;    WHERE patient_id=?&#10;  `;&#10;  const values = [&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;    req.body.age,&#10;    req.body.gender,&#10;    req.body.address,&#10;    req.body.number,&#10;    req.body.insurance,&#10;    req.body.adhar_no,&#10;    req.body.name,&#10;    req.body.dob,&#10;    req.body.patient_pic,&#10;    req.params.id&#10;  ];&#10;&#10;  db.query(sql, values, (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json(&amp;quot;Success&amp;quot;);&#10;    } else {&#10;      return res.status(404).json(&amp;quot;Patient not found&amp;quot;);&#10;    }&#10;  });&#10;};&#10;&#10;exports.updatePatient = (req, res) =&amp;gt; {&#10;  const { patient_id } = req.params;&#10;  const {&#10;    name,&#10;    email,&#10;    number,&#10;    adhar_no,&#10;    dob,&#10;    gender,&#10;    insurance,&#10;    address,&#10;  } = req.body;&#10;&#10;  const sql =&#10;    &amp;quot;UPDATE patient SET name = ?, email = ?, number = ?, adhar_no = ?, dob = ?, gender = ?, insurance = ?, address = ? WHERE patient_id = ?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [name, email, number, adhar_no, dob, gender, insurance, address, patient_id],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;      }&#10;      return res.json(&amp;quot;Patient updated successfully&amp;quot;);&#10;    }&#10;  );&#10;};&#10;&#10;// Delete patient by patient_id&#10;exports.deletePatientById = (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;DELETE FROM patient WHERE patient_id = ?&amp;quot;;&#10;  db.query(sql, [req.params.id], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json(&amp;quot;Success&amp;quot;);&#10;    } else {&#10;      return res.status(404).json(&amp;quot;Patient not found&amp;quot;);&#10;    }&#10;  });&#10;};&#10;and this is my patientRoutes.js code // routes/patientRoutes.js&#10;&#10;const express = require(&amp;quot;express&amp;quot;);&#10;const router = express.Router();&#10;const patientController = require(&amp;quot;../Controller/patinetController&amp;quot;);&#10;&#10;router.get(&amp;quot;/&amp;quot;, patientController.getAllPatients);&#10;router.get(&amp;quot;/:id&amp;quot;, patientController.getPatientById);&#10;router.post(&amp;quot;/&amp;quot;, patientController.createPatient);&#10;router.put(&amp;quot;/:id&amp;quot;, patientController.updatePatientById);&#10;router.delete(&amp;quot;/:id&amp;quot;, patientController.deletePatientById);&#10;&#10;module.exports = router;&#10;can i used something like exports.saveProfile = (req, res) =&amp;gt; {&#10;  const { mobile, gender, dob, aadhaar, address, login_id } = req.body;&#10;&#10;  const sql = `&#10;    INSERT INTO patient (number, gender, dob, adhar_no, address, login_id)&#10;    VALUES (?, ?, ?, ?, ?, ?)&#10;  `;&#10;&#10;  const values = [mobile, gender, dob, aadhaar, address, login_id];&#10;&#10;  db.query(sql, values, (err, result) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Failed to save profile&amp;quot; });&#10;    }&#10;    return res.status(200).json({ message: &amp;quot;Profile saved successfully&amp;quot; });&#10;  });&#10;}; and this router.post(&amp;quot;/saveProfile&amp;quot;, patientController.saveProfile); and then modify my server.js and Home.js code so that when i fill complete your profile details and click submit button the data should be save in patient table" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="Yes, you can definitely use `exports.saveProfile` in your `patientController.js` file to handle the saving of profile details for a patient. Here's how you can modify your code:&#10;&#10;1. In `patientController.js`, add the following function:&#10;&#10;```javascript&#10;exports.saveProfile = (req, res) =&gt; {&#10;  const { mobile, gender, dob, aadhaar, address, login_id } = req.body;&#10;&#10;  const sql = `&#10;    INSERT INTO patient (number, gender, dob, adhar_no, address, login_id)&#10;    VALUES (?, ?, ?, ?, ?, ?)&#10;  `;&#10;&#10;  const values = [mobile, gender, dob, aadhaar, address, login_id];&#10;&#10;  db.query(sql, values, (err, result) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Database error:&quot;, err);&#10;      return res.status(500).json({ error: &quot;Failed to save profile&quot; });&#10;    }&#10;    return res.status(200).json({ message: &quot;Profile saved successfully&quot; });&#10;  });&#10;};&#10;```&#10;&#10;2. In `patientRoutes.js`, add the following route:&#10;&#10;```javascript&#10;router.post(&quot;/saveProfile&quot;, patientController.saveProfile);&#10;```&#10;&#10;3. In `server.js`, make sure you have the following line to include the `patientRoutes`:&#10;&#10;```javascript&#10;const patientRoutes = require(&quot;./routes/patinetRoutes&quot;);&#10;app.use(&quot;/patients&quot;, patientRoutes);&#10;```&#10;&#10;4. In `Home.js`, modify the `handleSubmit` function to send the form data to the `/saveProfile` endpoint:&#10;&#10;```javascript&#10;const handleSubmit = async (e) =&gt; {&#10;  e.preventDefault();&#10;  try {&#10;    const userString = localStorage.getItem('user');&#10;    if (!userString) {&#10;      console.error('User not found in localStorage');&#10;      return;&#10;    }&#10;&#10;    const { login_id, name, email, role } = JSON.parse(userString);&#10;&#10;    const response = await axios.post('http://localhost:8081/patients/saveProfile', {&#10;      mobile,&#10;      aadhaar,&#10;      gender,&#10;      dob,&#10;      address,&#10;      login_id, // Include the login_id value in the request body&#10;    });&#10;    console.log(response.data); // Log the response from the server&#10;    setShowPopup(false); // Close the popup after successful submission&#10;  } catch (error) {&#10;    console.error('Failed to submit patient details:', error);&#10;  }&#10;};&#10;```&#10;&#10;With these changes, when you fill out the &quot;Complete Your Profile&quot; form and click the &quot;Submit&quot; button, the data will be sent to the `/saveProfile` endpoint, and the `saveProfile` function in `patientController.js` will be executed. This function will insert the provided data into the `patient` table in your database.&#10;&#10;Note: Make sure that the `patient` table in your database has columns corresponding to the fields you're inserting (`number`, `gender`, `dob`, `adhar_no`, `address`, `login_id`)." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="after making above changes i am getting this error [eslint] &#10;src\Home.js&#10;  Line 140:11:  'address' is not defined  no-undef&#10;&#10;Search for the keywords to learn more about each error.and here is my code import React, { useState, useEffect } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import './App.css';&#10;import 'bootstrap/dist/css/bootstrap.min.css';&#10;import { FaCheckDouble, FaClock, FaHeadset, FaHouseUser } from &amp;quot;react-icons/fa&amp;quot;;&#10;&#10;import img1 from &amp;quot;./images/specialities-01.png&amp;quot;;&#10;import img2 from &amp;quot;./images/specialities-02.png&amp;quot;;&#10;import img3 from &amp;quot;./images/specialities-03.png&amp;quot;;&#10;import img4 from &amp;quot;./images/specialities-04.png&amp;quot;;&#10;import img5 from &amp;quot;./images/specialities-05.png&amp;quot;;&#10;import axios from 'axios';&#10;&#10;function Home() {&#10;    const user = JSON.parse(localStorage.getItem('user'));&#10;    // const role = user.role; // Can be 'Doctor', 'Receptionist', or 'Patient'&#10;&#10;    const [filter, setFilter] = useState({ name: '', specialization: '', fees: '', location: '' });&#10;    const [doctors, setDoctors] = useState([]);&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const fetchDoctors = async () =&amp;gt; {&#10;            try {&#10;                const response = await axios.get('http://localhost:8081/doctors');&#10;                setDoctors(response.data);&#10;            } catch (error) {&#10;                console.error('Failed to fetch doctors:', error);&#10;            }&#10;        };&#10;        fetchDoctors();&#10;    }, []);&#10;&#10;    const bufferToBase64 = (buffer) =&amp;gt; {&#10;        let binary = '';&#10;        const bytes = new Uint8Array(buffer.data);&#10;        const len = bytes.byteLength;&#10;        for (let i = 0; i &amp;lt; len; i++) {&#10;            binary += String.fromCharCode(bytes[i]);&#10;        }&#10;        return window.btoa(binary);&#10;    };&#10;&#10;    const filteredDoctors = doctors.filter((doctor) =&amp;gt;&#10;        doctor.name.toLowerCase().includes(filter.name.toLowerCase()) &amp;amp;&amp;amp;&#10;        doctor.specialization.toLowerCase().includes(filter.specialization.toLowerCase()) &amp;amp;&amp;amp;&#10;        (filter.fees === '' || doctor.fees.includes(filter.fees)) &amp;amp;&amp;amp;&#10;        (filter.location === '' || doctor.location.toLowerCase().includes(filter.location.toLowerCase()))&#10;    );&#10;&#10;    const [showPopup, setShowPopup] = useState(true);&#10;    const [mobile, setMobile] = useState('');&#10;    const [aadhaar, setAadhaar] = useState('');&#10;    const [gender, setGender] = useState('');&#10;    const [dob, setDob] = useState('');&#10;    const [age, setAge] = useState(null);&#10;    const [maxBirthDate, setMaxBirthDate] = useState('');&#10;&#10;    const handleMobileChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 10) {&#10;            setMobile(value);&#10;        }&#10;    };&#10;&#10;    const handleAadhaarChange = (e) =&amp;gt; {&#10;        const value = e.target.value.replace(/\s/g, ''); // Remove spaces&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 12) {&#10;            const formattedValue = value.replace(/(.{4})/g, '$1 ').trim();&#10;            setAadhaar(formattedValue);&#10;        }&#10;    };&#10;&#10;    const handleGenderChange = (e) =&amp;gt; {&#10;        setGender(e.target.value);&#10;    };&#10;&#10;    const handleDobChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        setDob(value);&#10;        calculateAge(value);&#10;    };&#10;&#10;    const calculateAge = (dob) =&amp;gt; {&#10;        const birthDate = new Date(dob);&#10;        const today = new Date();&#10;&#10;        if (birthDate &amp;gt; today) {&#10;            setAge(null); // Reset age&#10;        } else {&#10;            let age = today.getFullYear() - birthDate.getFullYear();&#10;            const monthDifference = today.getMonth() - birthDate.getMonth();&#10;            if (monthDifference &amp;lt; 0 || (monthDifference === 0 &amp;amp;&amp;amp; today.getDate() &amp;lt; birthDate.getDate())) {&#10;                age--;&#10;            }&#10;            setAge(Math.min(age, 110)); // Limit age to maximum 110&#10;        }&#10;    };&#10;&#10;//    const handleSubmit = async (e) =&amp;gt; {&#10;//      e.preventDefault();&#10;//      try {&#10;//        const userString = localStorage.getItem('user');&#10;//        if (!userString) {&#10;//          console.error('User not found in localStorage');&#10;//          return;&#10;//        }&#10;//&#10;//        const { email } = JSON.parse(userString);&#10;//&#10;//        const response = await axios.post('http://localhost:8081/patients', {&#10;//          mobile,&#10;//          aadhaar,&#10;//          gender,&#10;//          dob,&#10;//          email, // Include the email value in the request body&#10;//        });&#10;//        console.log(response.data); // Log the response from the server&#10;//        setShowPopup(false); // Close the popup after successful submission&#10;//      } catch (error) {&#10;//        console.error('Failed to submit patient details:', error);&#10;//      }&#10;//    };&#10;&#10;    const handleSubmit = async (e) =&amp;gt; {&#10;      e.preventDefault();&#10;      try {&#10;        const userString = localStorage.getItem('user');&#10;        if (!userString) {&#10;          console.error('User not found in localStorage');&#10;          return;&#10;        }&#10;&#10;        const { login_id, name, email, role } = JSON.parse(userString);&#10;&#10;        const response = await axios.post('http://localhost:8081/patients/saveProfile', {&#10;          mobile,&#10;          aadhaar,&#10;          gender,&#10;          dob,&#10;          address,&#10;          login_id, // Include the login_id value in the request body&#10;        });&#10;        console.log(response.data); // Log the response from the server&#10;        setShowPopup(false); // Close the popup after successful submission&#10;      } catch (error) {&#10;        console.error('Failed to submit patient details:', error);&#10;      }&#10;    };&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const maxDate = new Date();&#10;        maxDate.setFullYear(maxDate.getFullYear() - 18);&#10;        setMaxBirthDate(maxDate.toISOString().split('T')[0]);&#10;    }, []);&#10;&#10;    return (&#10;        &amp;lt;&amp;gt;&#10;            {showPopup &amp;amp;&amp;amp; (&#10;                &amp;lt;div className=&amp;quot;popup&amp;quot;&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;popup-content&amp;quot;&amp;gt;&#10;                        &amp;lt;span className=&amp;quot;close-popup&amp;quot; onClick={() =&amp;gt; setShowPopup(false)}&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Complete Your Profile&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;form-group&amp;quot;&amp;gt;&#10;                                &amp;lt;label htmlFor=&amp;quot;mobile&amp;quot;&amp;gt;Mobile No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;tel&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;mobile&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Mobile Number&amp;quot;&#10;                                    value={mobile}&#10;                                    onChange={handleMobileChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {mobile.length &amp;gt; 0 &amp;amp;&amp;amp; mobile.length &amp;lt; 10 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Mobile number must be exactly 10 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;gender&amp;quot;&amp;gt;Gender:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;select&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;gender&amp;quot;&#10;                                    value={gender}&#10;                                    onChange={handleGenderChange}&#10;                                    required&#10;                                &amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;Select Gender&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;male&amp;quot;&amp;gt;Male&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;female&amp;quot;&amp;gt;Female&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;other&amp;quot;&amp;gt;Other&amp;lt;/option&amp;gt;&#10;                                &amp;lt;/select&amp;gt;&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;dob&amp;quot;&amp;gt;Date of Birth:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;date&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;dob&amp;quot;&#10;                                    value={dob}&#10;                                    onChange={handleDobChange}&#10;                                    max={maxBirthDate} // Set max birth date&#10;                                    required&#10;                                /&amp;gt;&#10;                                {age !== null &amp;amp;&amp;amp; (&#10;                                    &amp;lt;p&amp;gt;Age: {age} years&amp;lt;/p&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;aadhaar&amp;quot;&amp;gt;Aadhaar Card No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;aadhaar&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Aadhaar Number&amp;quot;&#10;                                    value={aadhaar}&#10;                                    onChange={handleAadhaarChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {aadhaar.replace(/\s/g, '').length &amp;gt; 0 &amp;amp;&amp;amp; aadhaar.replace(/\s/g, '').length &amp;lt; 12 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Aadhaar number must be exactly 12 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;address&amp;quot;&amp;gt;Address:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;address&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Address&amp;quot;&#10;                                    required&#10;                                /&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                            &amp;lt;button type=&amp;quot;submit&amp;quot; className=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&#10;                        &amp;lt;/form&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            )}&#10;            &amp;lt;section id=&amp;quot;hero&amp;quot; className=&amp;quot;d-flex align-items-center&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                        &amp;lt;p&amp;gt;TOTAL HEALTH CARE SOLUTION&amp;lt;/p&amp;gt;&#10;                        &amp;lt;h1&amp;gt;Your Most Trusted &amp;lt;br /&amp;gt;Health Partner&amp;lt;/h1&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;A repudiandae ipsam labore ipsa voluptatum quidem quae laudantium quisquam aperiam maiores sunt fugit,&amp;lt;/p&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;deserunt rem suscipit placeat.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;d-flex justify-content-start gap-2&amp;quot;&amp;gt;&#10;                        {/* Conditional rendering based on user role */}&#10;                        {user &amp;amp;&amp;amp; user.role === 'patient' &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {user &amp;amp;&amp;amp; (user.role === 'doctor' || user.role === 'receptionist') &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors-dashboard'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Track Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {/* Show 'Book Appointment' button if no user is logged in */}&#10;                        {!user &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;why-us mt-5 mt-md-0&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;content&amp;quot;&amp;gt;&#10;                                &amp;lt;h3&amp;gt;Why Choose Us?&amp;lt;/h3&amp;gt;&#10;                                &amp;lt;p&amp;gt;&#10;                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Duis aute irure dolor in reprehenderit&#10;                                    Asperiores dolores sed et. Tenetur quia eos. Autem tempore quibusdam vel necessitatibus optio ad corporis.&#10;                                &amp;lt;/p&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;Link style={{ textDecoration: 'none' }} to={'/about'} className=&amp;quot;more-btn&amp;quot;&amp;gt;Learn More &amp;lt;i className=&amp;quot;bx bx-chevron-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/Link&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-8 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;icon-boxes d-flex flex-column justify-content-center&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHouseUser className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Appointment&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;24 Hours Service&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Consequuntur sunt aut quasi enim aliquam quae harum pariatur laboris nisi ut aliquip&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHeadset className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Emergency Cases&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;h6 className='text-secondary'&amp;gt;+88 01751 040425&amp;lt;/h6&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Qui facilis perferendis quia maxime. Laborum excepturi pariatur laboriosam nihil, dolor molestias.&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaClock className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Working Hours&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;Timing schedule&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;ul className='list-group list-group-flush'&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sun - Wed : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;8:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Thus - Fri : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;9:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sat - Sun : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;10:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                            &amp;lt;/ul&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className='reco-doc'&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 mt-100 section-title text-center reco-doc-card'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Recommended Doctors&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;cardContainer&amp;quot;&amp;gt;&#10;                            {filteredDoctors.slice(0, 5).map((doctor, index) =&amp;gt; (&#10;                                &amp;lt;div key={index} className=&amp;quot;card&amp;quot;&amp;gt;&#10;                                    &amp;lt;img src={`data:image/jpeg;base64,${bufferToBase64(doctor.doc_pic)}`} alt={doctor.name} className=&amp;quot;image&amp;quot; /&amp;gt;&#10;                                    &amp;lt;h3&amp;gt;{doctor.name}&amp;lt;/h3&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Specialization:&amp;lt;/strong&amp;gt; {doctor.specialization}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Fees:&amp;lt;/strong&amp;gt; {doctor.fees}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Location:&amp;lt;/strong&amp;gt; {doctor.location}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;{doctor.description}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;button className=&amp;quot;bookButton&amp;quot;&amp;gt;Book Appointment&amp;lt;/button&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            ))}&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;section section-specialities position-relative&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 section-title text-center spec-header'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Clinic and Specialities&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;p className='m-0'&amp;gt;Lorem ipsum dolor sit amet consectetur adipisicing.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row justify-content-center&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-md-9&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;specialities-slider d-flex justify-content-center align-items-center gap-5&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img1} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Urology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img2} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Neurology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img3} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Orthopedic&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img4} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Cardiologist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img5} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Dentist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;    );&#10;}&#10;&#10;export default Home;&#10;" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="The error `'address' is not defined` is occurring because you are trying to access the `address` variable in the `handleSubmit` function, but it is not defined in the scope of that function.&#10;&#10;To fix this issue, you need to add an `address` state variable and a corresponding event handler function to handle the address input field's value change. Here's how you can modify your code:&#10;&#10;1. Add a new state variable for `address` and a corresponding event handler function:&#10;&#10;```javascript&#10;const [address, setAddress] = useState('');&#10;&#10;const handleAddressChange = (e) =&gt; {&#10;  setAddress(e.target.value);&#10;};&#10;```&#10;&#10;2. Add an input field for the address in your form:&#10;&#10;```jsx&#10;&lt;label htmlFor=&quot;address&quot;&gt;Address:&lt;/label&gt;&#10;&lt;input&#10;  type=&quot;text&quot;&#10;  className=&quot;form-control&quot;&#10;  id=&quot;address&quot;&#10;  placeholder=&quot;Enter Your Address&quot;&#10;  value={address}&#10;  onChange={handleAddressChange}&#10;  required&#10;/&gt;&#10;```&#10;&#10;3. Include the `address` value in the request body when making the POST request:&#10;&#10;```javascript&#10;const handleSubmit = async (e) =&gt; {&#10;  e.preventDefault();&#10;  try {&#10;    const userString = localStorage.getItem('user');&#10;    if (!userString) {&#10;      console.error('User not found in localStorage');&#10;      return;&#10;    }&#10;&#10;    const { login_id, name, email, role } = JSON.parse(userString);&#10;&#10;    const response = await axios.post('http://localhost:8081/patients/saveProfile', {&#10;      mobile,&#10;      aadhaar,&#10;      gender,&#10;      dob,&#10;      address, // Include the address value in the request body&#10;      login_id, // Include the login_id value in the request body&#10;    });&#10;    console.log(response.data); // Log the response from the server&#10;    setShowPopup(false); // Close the popup after successful submission&#10;  } catch (error) {&#10;    console.error('Failed to submit patient details:', error);&#10;  }&#10;};&#10;```&#10;&#10;After making these changes, the `address` variable should be defined, and the error should be resolved." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="thanks the above routes,Controller,and server and home update code works but it is making new entry in patient table like this &#10;Full texts&#10;patient_id&#9;&#10;login_id&#9;&#10;email&#9;&#10;password&#9;&#10;role&#9;&#10;age&#9;&#10;gender&#9;&#10;address&#9;&#10;number&#9;&#10;insurance&#9;&#10;adhar_no&#9;&#10;created_at&#9;&#10;updated_at&#9;&#10;name&#9;&#10;dob&#9;&#10;patient_pic&#9;&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;1&#10;4&#10;john@example.com&#10;Password@123&#10;Patient&#10;30&#10;Male&#10;123 Main St&#10;987-654-32&#10;XYZ Insurance&#10;1234-5678-90&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:26&#10;John Doe&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;2&#10;5&#10;jane@example.com&#10;Password@456&#10;Patient&#10;25&#10;Female&#10;456 Elm St&#10;123-456-78&#10;ABC Insurance&#10;9876-5432-10&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:31&#10;Jane Smith&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;3&#10;6&#10;alex@example.com&#10;Password@789&#10;Patient&#10;40&#10;Male&#10;789 Oak St&#10;456-789-01&#10;DEF Insurance&#10;5678-9012-34&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:37&#10;Alex Brown&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;4&#10;11&#10;201260116052setiit@gmail.com&#10;Milan@1234&#10;Patient&#10;2024-06-04 12:08:41&#10;2024-06-04 12:08:41&#10;Milan Dharani&#10;0000-00-00&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;5&#10;11&#10;male&#10;317,Sector-1,Nirnaynagar,Ahmedabad-382481&#10;7284027188&#10;1234 5654 89&#10;2024-06-04 14:43:35&#10;2024-06-04 14:43:35&#10;2002-07-17&#10;but i need to make entry on user data which is login and make entry on its corresponding user" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="To make an entry in the `patient` table based on the user data from the `login` table, you can modify your `saveProfile` function in the `patientController.js` file. Here's how you can do it:&#10;&#10;1. In `patientController.js`, update the `saveProfile` function to first check if the user exists in the `login` table, and then insert the patient details into the `patient` table using the `login_id` from the `login` table:&#10;&#10;```javascript&#10;exports.saveProfile = (req, res) =&gt; {&#10;  const { mobile, gender, dob, aadhaar, address, email } = req.body;&#10;&#10;  // First, check if the user exists in the login table&#10;  const checkUserSql = &quot;SELECT login_id FROM login WHERE email = ?&quot;;&#10;  db.query(checkUserSql, [email], (err, result) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Database error:&quot;, err);&#10;      return res.status(500).json({ error: &quot;Failed to save profile&quot; });&#10;    }&#10;&#10;    if (result.length === 0) {&#10;      // User not found in the login table&#10;      return res.status(404).json({ error: &quot;User not found&quot; });&#10;    }&#10;&#10;    const login_id = result[0].login_id;&#10;&#10;    // Insert patient details into the patient table&#10;    const sql = `&#10;      INSERT INTO patient (number, gender, dob, adhar_no, address, login_id)&#10;      VALUES (?, ?, ?, ?, ?, ?)&#10;    `;&#10;&#10;    const values = [mobile, gender, dob, aadhaar, address, login_id];&#10;&#10;    db.query(sql, values, (err, result) =&gt; {&#10;      if (err) {&#10;        console.error(&quot;Database error:&quot;, err);&#10;        return res.status(500).json({ error: &quot;Failed to save profile&quot; });&#10;      }&#10;      return res.status(200).json({ message: &quot;Profile saved successfully&quot; });&#10;    });&#10;  });&#10;};&#10;```&#10;&#10;In the updated code, we first check if the user exists in the `login` table by querying the `login` table with the provided `email`. If the user is found, we retrieve the `login_id` and use it when inserting the patient details into the `patient` table.&#10;&#10;2. In `Home.js`, make sure to include the `email` value in the request body when calling the `/saveProfile` endpoint:&#10;&#10;```javascript&#10;const handleSubmit = async (e) =&gt; {&#10;  e.preventDefault();&#10;  try {&#10;    const userString = localStorage.getItem('user');&#10;    if (!userString) {&#10;      console.error('User not found in localStorage');&#10;      return;&#10;    }&#10;&#10;    const { email } = JSON.parse(userString);&#10;&#10;    const response = await axios.post('http://localhost:8081/patients/saveProfile', {&#10;      mobile,&#10;      aadhaar,&#10;      gender,&#10;      dob,&#10;      address,&#10;      email, // Include the email value in the request body&#10;    });&#10;    console.log(response.data); // Log the response from the server&#10;    setShowPopup(false); // Close the popup after successful submission&#10;  } catch (error) {&#10;    console.error('Failed to submit patient details:', error);&#10;  }&#10;};&#10;```&#10;&#10;With these changes, when you submit the &quot;Complete Your Profile&quot; form, the server will first check if the user exists in the `login` table based on the provided `email`. If the user is found, it will retrieve the `login_id` and insert the patient details into the `patient` table using that `login_id`. This way, the patient record will be associated with the corresponding user in the `login` table." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="why i am getting data like this SELECT * FROM `patient`&#10; Profiling [ Edit inline ] [ Edit ] [ Explain SQL ] [ Create PHP code ] [ Refresh ]&#10; Show all&#9;|&#9;&#9;&#9;Number of rows: &#10;25&#10;Filter rows: &#10;Search this table&#10;Sort by key: &#10;None&#10;Full texts&#10;patient_id&#9;&#10;login_id&#9;&#10;email&#9;&#10;password&#9;&#10;role&#9;&#10;age&#9;&#10;gender&#9;&#10;address&#9;&#10;number&#9;&#10;insurance&#9;&#10;adhar_no&#9;&#10;created_at&#9;&#10;updated_at&#9;&#10;name&#9;&#10;dob&#9;&#10;patient_pic&#9;&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;1&#10;4&#10;john@example.com&#10;Password@123&#10;Patient&#10;30&#10;Male&#10;123 Main St&#10;987-654-32&#10;XYZ Insurance&#10;1234-5678-90&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:26&#10;John Doe&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;2&#10;5&#10;jane@example.com&#10;Password@456&#10;Patient&#10;25&#10;Female&#10;456 Elm St&#10;123-456-78&#10;ABC Insurance&#10;9876-5432-10&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:31&#10;Jane Smith&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;3&#10;6&#10;alex@example.com&#10;Password@789&#10;Patient&#10;40&#10;Male&#10;789 Oak St&#10;456-789-01&#10;DEF Insurance&#10;5678-9012-34&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:37&#10;Alex Brown&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;4&#10;11&#10;201260116052setiit@gmail.com&#10;Milan@1234&#10;Patient&#10;2024-06-04 12:08:41&#10;2024-06-04 12:08:41&#10;Milan Dharani&#10;0000-00-00&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;6&#10;11&#10;male&#10;317,Sector-1,Nirnaynagar,Ahmedabad-382481&#10;7284027188&#10;1234 5654 89&#10;2024-06-04 14:48:00&#10;2024-06-04 14:48:00&#10;2002-07-17&#10;in my patient table when i click submit button after entering detail in my complete your profile i make above changes as u tell" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="The reason you're getting data like this in your `patient` table is because you're inserting the `email`, `password`, and `role` values from the `login` table into the `patient` table, which is not necessary.&#10;&#10;The `patient` table should only contain patient-specific information, such as `number`, `gender`, `dob`, `adhar_no`, `address`, and `login_id` (to associate the patient with the corresponding user in the `login` table).&#10;&#10;To fix this issue, you need to modify the `saveProfile` function in `patientController.js` to insert only the necessary patient details into the `patient` table. Here's the updated code:&#10;&#10;```javascript&#10;exports.saveProfile = (req, res) =&gt; {&#10;  const { mobile, gender, dob, aadhaar, address, email } = req.body;&#10;&#10;  // First, check if the user exists in the login table&#10;  const checkUserSql = &quot;SELECT login_id FROM login WHERE email = ?&quot;;&#10;  db.query(checkUserSql, [email], (err, result) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Database error:&quot;, err);&#10;      return res.status(500).json({ error: &quot;Failed to save profile&quot; });&#10;    }&#10;&#10;    if (result.length === 0) {&#10;      // User not found in the login table&#10;      return res.status(404).json({ error: &quot;User not found&quot; });&#10;    }&#10;&#10;    const login_id = result[0].login_id;&#10;&#10;    // Insert patient details into the patient table&#10;    const sql = `&#10;      INSERT INTO patient (number, gender, dob, adhar_no, address, login_id)&#10;      VALUES (?, ?, ?, ?, ?, ?)&#10;    `;&#10;&#10;    const values = [mobile, gender, dob, aadhaar, address, login_id];&#10;&#10;    db.query(sql, values, (err, result) =&gt; {&#10;      if (err) {&#10;        console.error(&quot;Database error:&quot;, err);&#10;        return res.status(500).json({ error: &quot;Failed to save profile&quot; });&#10;      }&#10;      return res.status(200).json({ message: &quot;Profile saved successfully&quot; });&#10;    });&#10;  });&#10;};&#10;```&#10;&#10;In this updated code, we're only inserting the `number`, `gender`, `dob`, `adhar_no`, `address`, and `login_id` values into the `patient` table.&#10;&#10;After making this change, when you submit the &quot;Complete Your Profile&quot; form, the `patient` table should only contain the relevant patient information, and the `email`, `password`, and `role` columns should be empty." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="but i need to get all details in patient table for the corresponding user along with name,email,role,password after doing complete your profile " />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="To get all the details in the `patient` table for the corresponding user, along with `name`, `email`, `role`, and `password`, you can perform a JOIN operation between the `patient` and `login` tables.&#10;&#10;Here's how you can modify the `saveProfile` function in `patientController.js` to achieve this:&#10;&#10;```javascript&#10;exports.saveProfile = (req, res) =&gt; {&#10;  const { mobile, gender, dob, aadhaar, address, email } = req.body;&#10;&#10;  // First, check if the user exists in the login table&#10;  const checkUserSql = &quot;SELECT login_id FROM login WHERE email = ?&quot;;&#10;  db.query(checkUserSql, [email], (err, result) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Database error:&quot;, err);&#10;      return res.status(500).json({ error: &quot;Failed to save profile&quot; });&#10;    }&#10;&#10;    if (result.length === 0) {&#10;      // User not found in the login table&#10;      return res.status(404).json({ error: &quot;User not found&quot; });&#10;    }&#10;&#10;    const login_id = result[0].login_id;&#10;&#10;    // Insert patient details into the patient table&#10;    const sql = `&#10;      INSERT INTO patient (number, gender, dob, adhar_no, address, login_id)&#10;      VALUES (?, ?, ?, ?, ?, ?)&#10;    `;&#10;&#10;    const values = [mobile, gender, dob, aadhaar, address, login_id];&#10;&#10;    db.query(sql, values, (err, result) =&gt; {&#10;      if (err) {&#10;        console.error(&quot;Database error:&quot;, err);&#10;        return res.status(500).json({ error: &quot;Failed to save profile&quot; });&#10;      }&#10;&#10;      // Retrieve the patient details along with login information&#10;      const selectSql = `&#10;        SELECT p.*, l.name, l.email, l.password, l.role&#10;        FROM patient p&#10;        JOIN login l ON p.login_id = l.login_id&#10;        WHERE p.login_id = ?&#10;      `;&#10;&#10;      db.query(selectSql, [login_id], (err, result) =&gt; {&#10;        if (err) {&#10;          console.error(&quot;Database error:&quot;, err);&#10;          return res.status(500).json({ error: &quot;Failed to retrieve patient details&quot; });&#10;        }&#10;&#10;        return res.status(200).json(result[0]);&#10;      });&#10;    });&#10;  });&#10;};&#10;```&#10;&#10;In this updated code, after inserting the patient details into the `patient` table, we perform a JOIN query between the `patient` and `login` tables to retrieve the patient details along with the `name`, `email`, `password`, and `role` from the `login` table.&#10;&#10;The `selectSql` query joins the `patient` and `login` tables based on the `login_id` column, and selects all columns from the `patient` table (`p.*`) and the `name`, `email`, `password`, and `role` columns from the `login` table (`l.name`, `l.email`, `l.password`, `l.role`).&#10;&#10;The result of this query is then returned as the response from the server.&#10;&#10;With this change, when you submit the &quot;Complete Your Profile&quot; form, the server will return the patient details along with the corresponding user information from the `login` table." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="after making above changes still not getting combine deails i am getting data like this in patient table SELECT * FROM `patient`&#10; Profiling [ Edit inline ] [ Edit ] [ Explain SQL ] [ Create PHP code ] [ Refresh ]&#10; Show all&#9;|&#9;&#9;&#9;Number of rows: &#10;25&#10;Filter rows: &#10;Search this table&#10;Sort by key: &#10;None&#10;Full texts&#10;patient_id&#9;&#10;login_id&#9;&#10;email&#9;&#10;password&#9;&#10;role&#9;&#10;age&#9;&#10;gender&#9;&#10;address&#9;&#10;number&#9;&#10;insurance&#9;&#10;adhar_no&#9;&#10;created_at&#9;&#10;updated_at&#9;&#10;name&#9;&#10;dob&#9;&#10;patient_pic&#9;&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;1&#10;4&#10;john@example.com&#10;Password@123&#10;Patient&#10;30&#10;Male&#10;123 Main St&#10;987-654-32&#10;XYZ Insurance&#10;1234-5678-90&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:26&#10;John Doe&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;2&#10;5&#10;jane@example.com&#10;Password@456&#10;Patient&#10;25&#10;Female&#10;456 Elm St&#10;123-456-78&#10;ABC Insurance&#10;9876-5432-10&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:31&#10;Jane Smith&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;3&#10;6&#10;alex@example.com&#10;Password@789&#10;Patient&#10;40&#10;Male&#10;789 Oak St&#10;456-789-01&#10;DEF Insurance&#10;5678-9012-34&#10;2024-05-22 16:44:14&#10;2024-05-30 11:02:37&#10;Alex Brown&#10;2001-12-31&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;4&#10;11&#10;201260116052setiit@gmail.com&#10;Milan@1234&#10;Patient&#10;2024-06-04 12:08:41&#10;2024-06-04 12:08:41&#10;Milan Dharani&#10;0000-00-00&#10;&#9;&#10;Edit Edit&#10;Copy Copy&#10;Delete Delete&#10;7&#10;11&#10;male&#10;317,Sector-1,Nirnaynagar,Ahmedabad-382481&#10;7284027188&#10;1234 5654 89&#10;2024-06-04 14:53:40&#10;2024-06-04 14:53:40&#10;2002-07-17&#10;and here is my patientController code // Controller/patientController.js&#10;&#10;const db = require(&amp;quot;../db&amp;quot;);&#10;&#10;// Get all patients&#10;exports.getAllPatients = (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;SELECT * FROM patient&amp;quot;;&#10;  db.query(sql, (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    return res.json(data);&#10;  });&#10;};&#10;&#10;// Get patient by patient_id&#10;exports.getPatientById = (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;SELECT * FROM patient WHERE patient_id = ?&amp;quot;;&#10;  db.query(sql, [req.params.id], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    if (data.length &amp;gt; 0) {&#10;      return res.json(data[0]);&#10;    } else {&#10;      return res.status(404).json(&amp;quot;Patient not found&amp;quot;);&#10;    }&#10;  });&#10;};&#10;&#10;// Create new patient&#10;exports.createPatient = (req, res) =&amp;gt; {&#10;  const sql = `&#10;    INSERT INTO patient (&#10;      email, password, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic&#10;    ) VALUES (?)&#10;  `;&#10;  const values = [&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;    req.body.age,&#10;    req.body.gender,&#10;    req.body.address,&#10;    req.body.number,&#10;    req.body.insurance,&#10;    req.body.adhar_no,&#10;    new Date(), // created_at, set to current date and time&#10;    req.body.name,&#10;    req.body.dob,&#10;    req.body.patient_pic&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    return res.json(&amp;quot;Success&amp;quot;);&#10;  });&#10;};&#10;&#10;// Update patient by patient_id&#10;exports.updatePatientById = (req, res) =&amp;gt; {&#10;  const sql = `&#10;    UPDATE patient SET &#10;      email=?, password=?, role=?, age=?, gender=?, address=?, number=?, insurance=?, adhar_no=?, name=?, dob=?, patient_pic=?&#10;    WHERE patient_id=?&#10;  `;&#10;  const values = [&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;    req.body.age,&#10;    req.body.gender,&#10;    req.body.address,&#10;    req.body.number,&#10;    req.body.insurance,&#10;    req.body.adhar_no,&#10;    req.body.name,&#10;    req.body.dob,&#10;    req.body.patient_pic,&#10;    req.params.id&#10;  ];&#10;&#10;  db.query(sql, values, (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json(&amp;quot;Success&amp;quot;);&#10;    } else {&#10;      return res.status(404).json(&amp;quot;Patient not found&amp;quot;);&#10;    }&#10;  });&#10;};&#10;&#10;exports.updatePatient = (req, res) =&amp;gt; {&#10;  const { patient_id } = req.params;&#10;  const {&#10;    name,&#10;    email,&#10;    number,&#10;    adhar_no,&#10;    dob,&#10;    gender,&#10;    insurance,&#10;    address,&#10;  } = req.body;&#10;&#10;  const sql =&#10;    &amp;quot;UPDATE patient SET name = ?, email = ?, number = ?, adhar_no = ?, dob = ?, gender = ?, insurance = ?, address = ? WHERE patient_id = ?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [name, email, number, adhar_no, dob, gender, insurance, address, patient_id],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;      }&#10;      return res.json(&amp;quot;Patient updated successfully&amp;quot;);&#10;    }&#10;  );&#10;};&#10;&#10;// Delete patient by patient_id&#10;exports.deletePatientById = (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;DELETE FROM patient WHERE patient_id = ?&amp;quot;;&#10;  db.query(sql, [req.params.id], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json(&amp;quot;Success&amp;quot;);&#10;    } else {&#10;      return res.status(404).json(&amp;quot;Patient not found&amp;quot;);&#10;    }&#10;  });&#10;};&#10;&#10;exports.saveProfile = (req, res) =&amp;gt; {&#10;  const { mobile, gender, dob, aadhaar, address, email } = req.body;&#10;&#10;  // First, check if the user exists in the login table&#10;  const checkUserSql = &amp;quot;SELECT login_id FROM login WHERE email = ?&amp;quot;;&#10;  db.query(checkUserSql, [email], (err, result) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Failed to save profile&amp;quot; });&#10;    }&#10;&#10;    if (result.length === 0) {&#10;      // User not found in the login table&#10;      return res.status(404).json({ error: &amp;quot;User not found&amp;quot; });&#10;    }&#10;&#10;    const login_id = result[0].login_id;&#10;&#10;    // Insert patient details into the patient table&#10;    const sql = `&#10;      INSERT INTO patient (number, gender, dob, adhar_no, address, login_id)&#10;      VALUES (?, ?, ?, ?, ?, ?)&#10;    `;&#10;&#10;    const values = [mobile, gender, dob, aadhaar, address, login_id];&#10;&#10;    db.query(sql, values, (err, result) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.status(500).json({ error: &amp;quot;Failed to save profile&amp;quot; });&#10;      }&#10;&#10;      // Retrieve the patient details along with login information&#10;      const selectSql = `&#10;        SELECT p.*, l.name, l.email, l.password, l.role&#10;        FROM patient p&#10;        JOIN login l ON p.login_id = l.login_id&#10;        WHERE p.login_id = ?&#10;      `;&#10;&#10;      db.query(selectSql, [login_id], (err, result) =&amp;gt; {&#10;        if (err) {&#10;          console.error(&amp;quot;Database error:&amp;quot;, err);&#10;          return res.status(500).json({ error: &amp;quot;Failed to retrieve patient details&amp;quot; });&#10;        }&#10;&#10;        return res.status(200).json(result[0]);&#10;      });&#10;    });&#10;  });&#10;};&#10;and here is my server.js code const express = require(&amp;quot;express&amp;quot;);&#10;const mysql = require(&amp;quot;mysql2&amp;quot;);&#10;const cors = require(&amp;quot;cors&amp;quot;);&#10;const dotenv = require(&amp;quot;dotenv&amp;quot;);&#10;&#10;// Load environment variables from .env file&#10;dotenv.config();&#10;&#10;const app = express();&#10;const port = process.env.PORT || 8081;&#10;&#10;app.use(cors());&#10;app.use(express.json());&#10;&#10;// Create a MySQL connection using environment variables&#10;const db = mysql.createConnection({&#10;  host: process.env.DB_HOST,&#10;  user: process.env.DB_USER,&#10;  password: process.env.DB_PASSWORD,&#10;  database: process.env.DB_DATABASE,&#10;});&#10;&#10;db.connect((err) =&amp;gt; {&#10;  if (err) {&#10;    console.error(&amp;quot;Error connecting to the database:&amp;quot;, err);&#10;  } else {&#10;    console.log(&amp;quot;Connected to the MySQL database.&amp;quot;);&#10;  }&#10;});&#10;&#10;const doctorRoutes = require(&amp;quot;./routes/doctorRoutes&amp;quot;);&#10;const patientRoutes = require(&amp;quot;./routes/patinetRoutes&amp;quot;);&#10;&#10;app.use(&amp;quot;/doctors&amp;quot;, doctorRoutes);&#10;app.use(&amp;quot;/patients&amp;quot;, patientRoutes);&#10;&#10;app.post(&amp;quot;/login&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;SELECT * FROM login WHERE `email`=? AND `password`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.email, req.body.password, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Database error&amp;quot; });&#10;      }&#10;      if (data.length &amp;gt; 0) {&#10;        const user = data[0];&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          user: {&#10;            login_id: user.login_id,&#10;            name: user.name,&#10;            role: user.role,&#10;            email: user.email,&#10;          },&#10;        });&#10;      } else {&#10;        return res.json({ status: &amp;quot;Failed&amp;quot;, message: &amp;quot;Invalid credentials&amp;quot; });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;&#10;app.post(&amp;quot;/signup&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;INSERT INTO login (`name`, `email`, `password`, `role`) VALUES (?)&amp;quot;;&#10;  const values = [&#10;    req.body.name,&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Error during signup&amp;quot; });&#10;    }&#10;    return res.json({ status: &amp;quot;Success&amp;quot;, message: &amp;quot;Signup successful&amp;quot; });&#10;  });&#10;});&#10;&#10;app.post(&amp;quot;/forgotpassword&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;UPDATE login SET `password`=? WHERE `email`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.password, req.body.email, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Error executing query:&amp;quot;, err);&#10;        return res.json({&#10;          status: &amp;quot;Error&amp;quot;,&#10;          message: &amp;quot;Error updating password&amp;quot;,&#10;        });&#10;      }&#10;      if (data.affectedRows &amp;gt; 0) {&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          message: &amp;quot;Password updated successfully&amp;quot;,&#10;        });&#10;      } else {&#10;        return res.json({&#10;          status: &amp;quot;Failed&amp;quot;,&#10;          message: &amp;quot;No user found with provided details&amp;quot;,&#10;        });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;// Fetch patient details by email&#10;app.get(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const sql = &amp;quot;SELECT * FROM patient WHERE email = ?&amp;quot;;&#10;&#10;  db.query(sql, [email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error fetching patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.length === 0) {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;&#10;    const patient = data[0];&#10;    return res.json(patient);&#10;  });&#10;});&#10;&#10;// Update patient details by email&#10;app.put(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const { name, email: newEmail, number, adhar_no, dob, gender, insurance, address } = req.body;&#10;&#10;  const sql = &amp;quot;UPDATE patient SET name =?, email =?, number =?, adhar_no =?, dob =?, gender =?, insurance =?, address =? WHERE email =?&amp;quot;;&#10;&#10;  db.query(sql, [name, newEmail, number, adhar_no, dob, gender, insurance, address, email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;    } else {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;  });&#10;});&#10;&#10;//app.post(&amp;quot;/patients&amp;quot;, (req, res) =&amp;gt; {&#10;//  const { mobile, aadhaar, gender, dob } = req.body;&#10;//  const userString = localStorage.getItem('user');&#10;//&#10;//  if (!userString) {&#10;//    return res.status(400).json({ error: &amp;quot;User not found in localStorage&amp;quot; });&#10;//  }&#10;//&#10;//  const { login_id, name, email, role } = JSON.parse(userString);&#10;//&#10;//  if (!login_id || !name || !role) {&#10;//    return res.status(400).json({ error: &amp;quot;Invalid user data&amp;quot; });&#10;//  }&#10;//&#10;//  // Check if the email is missing or null&#10;//  if (!email) {&#10;//    return res.status(400).json({ error: &amp;quot;Email is required&amp;quot; });&#10;//  }&#10;//&#10;//  // Check if the patient already exists&#10;//  const checkSql = &amp;quot;SELECT * FROM patient WHERE login_id = ? AND email = ? AND role = ?&amp;quot;;&#10;//  db.query(checkSql, [login_id, email, role], (err, existingPatient) =&amp;gt; {&#10;//    if (err) {&#10;//      console.error(&amp;quot;Error checking patient existence:&amp;quot;, err);&#10;//      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;//    }&#10;//&#10;//    if (existingPatient.length &amp;gt; 0) {&#10;//      const patient = existingPatient[0];&#10;//&#10;//      // Check if the required fields are empty&#10;//      const shouldUpdate =&#10;//        !patient.number ||&#10;//        !patient.adhar_no ||&#10;//        !patient.gender ||&#10;//        !patient.dob;&#10;//&#10;//      if (shouldUpdate) {&#10;//        // Update the existing patient record&#10;//        const updateSql =&#10;//          &amp;quot;UPDATE patient SET number = ?, adhar_no = ?, gender = ?, dob = ?, password = '' WHERE login_id = ?&amp;quot;;&#10;//        const updateValues = [mobile, aadhaar, gender, dob, '', login_id];&#10;//&#10;//        db.query(updateSql, updateValues, (err, updateResult) =&amp;gt; {&#10;//          if (err) {&#10;//            console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;//            return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;//          }&#10;//&#10;//          return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;//        });&#10;//      } else {&#10;//        return res.json({ message: &amp;quot;Patient details are already complete&amp;quot; });&#10;//      }&#10;//    } else {&#10;//      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;//    }&#10;//  });&#10;//});&#10;&#10;app.use(&amp;quot;/patients&amp;quot;, patientRoutes);&#10;&#10;&#10;app.listen(port, () =&amp;gt; console.log(`Server running on port ${port}`));&#10;" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="Based on the code you provided, the issue seems to be that you are not retrieving the `name`, `email`, `password`, and `role` columns from the `login` table in the `saveProfile` function.&#10;&#10;In the `saveProfile` function, you are performing a JOIN query between the `patient` and `login` tables to retrieve the patient details along with the `name`, `email`, `password`, and `role` columns from the `login` table. However, the issue is that you are not including these columns in the `INSERT` query for the `patient` table.&#10;&#10;To fix this issue, you need to modify the `INSERT` query in the `saveProfile` function to include the `name`, `email`, `password`, and `role` columns from the `login` table. Here's how you can update the `saveProfile` function:&#10;&#10;```javascript&#10;exports.saveProfile = (req, res) =&gt; {&#10;  const { mobile, gender, dob, aadhaar, address, email } = req.body;&#10;&#10;  // First, check if the user exists in the login table&#10;  const checkUserSql = &quot;SELECT login_id, name, email, password, role FROM login WHERE email = ?&quot;;&#10;  db.query(checkUserSql, [email], (err, result) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Database error:&quot;, err);&#10;      return res.status(500).json({ error: &quot;Failed to save profile&quot; });&#10;    }&#10;&#10;    if (result.length === 0) {&#10;      // User not found in the login table&#10;      return res.status(404).json({ error: &quot;User not found&quot; });&#10;    }&#10;&#10;    const { login_id, name, email, password, role } = result[0];&#10;&#10;    // Insert patient details into the patient table&#10;    const sql = `&#10;      INSERT INTO patient (number, gender, dob, adhar_no, address, login_id, email, password, role, name)&#10;      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&#10;    `;&#10;&#10;    const values = [mobile, gender, dob, aadhaar, address, login_id, email, password, role, name];&#10;&#10;    db.query(sql, values, (err, result) =&gt; {&#10;      if (err) {&#10;        console.error(&quot;Database error:&quot;, err);&#10;        return res.status(500).json({ error: &quot;Failed to save profile&quot; });&#10;      }&#10;      return res.status(200).json({ message: &quot;Profile saved successfully&quot; });&#10;    });&#10;  });&#10;};&#10;```&#10;&#10;In this updated code, we first retrieve the `login_id`, `name`, `email`, `password`, and `role` columns from the `login` table using the provided `email`. Then, in the `INSERT` query for the `patient` table, we include these columns along with the other patient details.&#10;&#10;After making this change, when you submit the &quot;Complete Your Profile&quot; form, the `patient` table should contain the patient details along with the corresponding user information from the `login` table." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="thx the above works but now i am getting this error on server side Server running on port 8081&#10;Connected to the MySQL database.&#10;Connected to the MySQL database.&#10;Database error: Error: Duplicate entry '201260116052setiit@gmail.com' for key 'email'&#10;    at Packet.asError (A:\quater1\quater\backend\node_modules\mysql2\lib\packets\packet.js:728:17)&#10;    at Query.execute (A:\quater1\quater\backend\node_modules\mysql2\lib\commands\command.js:29:26)&#10;    at Connection.handlePacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:481:34)&#10;    at PacketParser.onPacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:97:12)&#10;    at PacketParser.executeStart (A:\quater1\quater\backend\node_modules\mysql2\lib\packet_parser.js:75:16)&#10;    at Socket.&amp;lt;anonymous&amp;gt; (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:104:25)&#10;    at Socket.emit (node:events:514:28)&#10;    at addChunk (node:internal/streams/readable:545:12)&#10;    at readableAddChunkPushByteMode (node:internal/streams/readable:495:3)&#10;    at Readable.push (node:internal/streams/readable:375:5) {&#10;  code: 'ER_DUP_ENTRY',&#10;  errno: 1062,&#10;  sqlState: '23000',&#10;  sqlMessage: &amp;quot;Duplicate entry '201260116052setiit@gmail.com' for key 'email'&amp;quot;,&#10;  sql: '\n' +&#10;    '      INSERT INTO patient (number, gender, dob, adhar_no, address, login_id, email, password, role, name)\n' +&#10;    &amp;quot;      VALUES ('7284027188', 'male', '2002-07-17', '1234 5654 8978', '317,Sector-1,Nirnaynagar,Ahmedabad-382481', 11, '201260116052setiit@gmail.com', 'Milan@1234', 'Patient', 'Milan Dharani')\n&amp;quot; +&#10;    '    '&#10;}&#10;" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="The error &quot;Duplicate entry '201260116052setiit@gmail.com' for key 'email'&quot; is occurring because you are trying to insert a duplicate email value into the `patient` table, which violates the unique constraint on the `email` column.&#10;&#10;To resolve this issue, you have a few options:&#10;&#10;1. **Check for existing email before inserting**:&#10;Before inserting a new record into the `patient` table, you can check if the email already exists in the table. If it exists, you can either update the existing record or return an error message.&#10;&#10;Here's how you can modify the `saveProfile` function to check for an existing email:&#10;&#10;```javascript&#10;exports.saveProfile = (req, res) =&gt; {&#10;  const { mobile, gender, dob, aadhaar, address, email } = req.body;&#10;&#10;  // First, check if the user exists in the login table&#10;  const checkUserSql = &quot;SELECT login_id, name, email, password, role FROM login WHERE email = ?&quot;;&#10;  db.query(checkUserSql, [email], (err, result) =&gt; {&#10;    if (err) {&#10;      console.error(&quot;Database error:&quot;, err);&#10;      return res.status(500).json({ error: &quot;Failed to save profile&quot; });&#10;    }&#10;&#10;    if (result.length === 0) {&#10;      // User not found in the login table&#10;      return res.status(404).json({ error: &quot;User not found&quot; });&#10;    }&#10;&#10;    const { login_id, name, email, password, role } = result[0];&#10;&#10;    // Check if the email already exists in the patient table&#10;    const checkEmailSql = &quot;SELECT * FROM patient WHERE email = ?&quot;;&#10;    db.query(checkEmailSql, [email], (err, emailResult) =&gt; {&#10;      if (err) {&#10;        console.error(&quot;Database error:&quot;, err);&#10;        return res.status(500).json({ error: &quot;Failed to save profile&quot; });&#10;      }&#10;&#10;      if (emailResult.length &gt; 0) {&#10;        // Email already exists, return an error or update the existing record&#10;        return res.status(409).json({ error: &quot;Email already exists&quot; });&#10;      }&#10;&#10;      // Insert patient details into the patient table&#10;      const sql = `&#10;        INSERT INTO patient (number, gender, dob, adhar_no, address, login_id, email, password, role, name)&#10;        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&#10;      `;&#10;&#10;      const values = [mobile, gender, dob, aadhaar, address, login_id, email, password, role, name];&#10;&#10;      db.query(sql, values, (err, result) =&gt; {&#10;        if (err) {&#10;          console.error(&quot;Database error:&quot;, err);&#10;          return res.status(500).json({ error: &quot;Failed to save profile&quot; });&#10;        }&#10;        return res.status(200).json({ message: &quot;Profile saved successfully&quot; });&#10;      });&#10;    });&#10;  });&#10;};&#10;```&#10;&#10;In this updated code, we added an additional query to check if the email already exists in the `patient` table before inserting a new record. If the email exists, we return a 409 Conflict status with an error message. If the email doesn't exist, we proceed with the insertion.&#10;&#10;2. **Remove the unique constraint on the email column**:&#10;If you don't need the email to be unique in the `patient` table, you can remove the unique constraint on the `email` column. This will allow duplicate email values in the `patient` table.&#10;&#10;To remove the unique constraint, you can modify the `patient` table schema by dropping the unique constraint on the `email` column. You can do this using a SQL query or by modifying the table structure in your database management tool (e.g., phpMyAdmin).&#10;&#10;However, keep in mind that removing the unique constraint on the `email` column may not be desirable if you want to ensure that each patient has a unique email address.&#10;&#10;Choose the option that best suits your requirements and data integrity needs." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="after making above changes when i click submit button nothing happens Complete Your Profile&#10;Mobile No:&#10;7284027188&#10;Gender:&#10;&#10;Male&#10;Date of Birth:&#10;&#10;07/17/2002&#10;Age: 21 years&#10;&#10;Aadhaar Card No:&#10;1234 5654 8978&#10;Address:&#10;317,Sector-1,Nirnaynagar,Ahmedabad-382481&#10;" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="It seems that the issue is not related to the server-side code or the database. The problem might be with the way you're handling the form submission on the client-side (React).&#10;&#10;In your `Home.js` file, you have commented out the `handleSubmit` function that sends the POST request to the server. Here's the commented-out code:&#10;&#10;```javascript&#10;// const handleSubmit = async (e) =&gt; {&#10;//   e.preventDefault();&#10;//   try {&#10;//     const userString = localStorage.getItem('user');&#10;//     if (!userString) {&#10;//       console.error('User not found in localStorage');&#10;//       return;&#10;//     }&#10;&#10;//     const { email } = JSON.parse(userString);&#10;&#10;//     const response = await axios.post('http://localhost:8081/patients/saveProfile', {&#10;//       mobile,&#10;//       aadhaar,&#10;//       gender,&#10;//       dob,&#10;//       address,&#10;//       email, // Include the email value in the request body&#10;//     });&#10;//     console.log(response.data); // Log the response from the server&#10;//     setShowPopup(false); // Close the popup after successful submission&#10;//   } catch (error) {&#10;//     console.error('Failed to submit patient details:', error);&#10;//   }&#10;// };&#10;```&#10;&#10;To fix the issue, you need to uncomment this code and ensure that the `handleSubmit` function is being called when the form is submitted.&#10;&#10;1. Uncomment the `handleSubmit` function in `Home.js`.&#10;&#10;2. In your form, make sure that the `onSubmit` event is correctly bound to the `handleSubmit` function. For example:&#10;&#10;```jsx&#10;&lt;form onSubmit={handleSubmit}&gt;&#10;  {/* Form fields */}&#10;  &lt;button type=&quot;submit&quot; className=&quot;btn btn-primary&quot;&gt;Submit&lt;/button&gt;&#10;&lt;/form&gt;&#10;```&#10;&#10;After making these changes, when you click the &quot;Submit&quot; button, the `handleSubmit` function should be called, and the POST request should be sent to the server with the form data.&#10;&#10;If you're still facing issues, please double-check your React component and ensure that the state variables (`mobile`, `aadhaar`, `gender`, `dob`, `address`) are being updated correctly when the form fields are changed." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="this is my home.js code import React, { useState, useEffect } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import './App.css';&#10;import 'bootstrap/dist/css/bootstrap.min.css';&#10;import { FaCheckDouble, FaClock, FaHeadset, FaHouseUser } from &amp;quot;react-icons/fa&amp;quot;;&#10;&#10;import img1 from &amp;quot;./images/specialities-01.png&amp;quot;;&#10;import img2 from &amp;quot;./images/specialities-02.png&amp;quot;;&#10;import img3 from &amp;quot;./images/specialities-03.png&amp;quot;;&#10;import img4 from &amp;quot;./images/specialities-04.png&amp;quot;;&#10;import img5 from &amp;quot;./images/specialities-05.png&amp;quot;;&#10;import axios from 'axios';&#10;&#10;function Home() {&#10;    const user = JSON.parse(localStorage.getItem('user'));&#10;    // const role = user.role; // Can be 'Doctor', 'Receptionist', or 'Patient'&#10;&#10;    const [filter, setFilter] = useState({ name: '', specialization: '', fees: '', location: '' });&#10;    const [doctors, setDoctors] = useState([]);&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const fetchDoctors = async () =&amp;gt; {&#10;            try {&#10;                const response = await axios.get('http://localhost:8081/doctors');&#10;                setDoctors(response.data);&#10;            } catch (error) {&#10;                console.error('Failed to fetch doctors:', error);&#10;            }&#10;        };&#10;        fetchDoctors();&#10;    }, []);&#10;&#10;    const bufferToBase64 = (buffer) =&amp;gt; {&#10;        let binary = '';&#10;        const bytes = new Uint8Array(buffer.data);&#10;        const len = bytes.byteLength;&#10;        for (let i = 0; i &amp;lt; len; i++) {&#10;            binary += String.fromCharCode(bytes[i]);&#10;        }&#10;        return window.btoa(binary);&#10;    };&#10;&#10;    const filteredDoctors = doctors.filter((doctor) =&amp;gt;&#10;        doctor.name.toLowerCase().includes(filter.name.toLowerCase()) &amp;amp;&amp;amp;&#10;        doctor.specialization.toLowerCase().includes(filter.specialization.toLowerCase()) &amp;amp;&amp;amp;&#10;        (filter.fees === '' || doctor.fees.includes(filter.fees)) &amp;amp;&amp;amp;&#10;        (filter.location === '' || doctor.location.toLowerCase().includes(filter.location.toLowerCase()))&#10;    );&#10;&#10;    const [showPopup, setShowPopup] = useState(true);&#10;    const [mobile, setMobile] = useState('');&#10;    const [aadhaar, setAadhaar] = useState('');&#10;    const [gender, setGender] = useState('');&#10;    const [dob, setDob] = useState('');&#10;    const [age, setAge] = useState(null);&#10;    const [maxBirthDate, setMaxBirthDate] = useState('');&#10;    const [address, setAddress] = useState('');&#10;&#10;    const handleAddressChange = (e) =&amp;gt; {&#10;      setAddress(e.target.value);&#10;    };&#10;&#10;&#10;    const handleMobileChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 10) {&#10;            setMobile(value);&#10;        }&#10;    };&#10;&#10;    const handleAadhaarChange = (e) =&amp;gt; {&#10;        const value = e.target.value.replace(/\s/g, ''); // Remove spaces&#10;        if (/^\d*$/.test(value) &amp;amp;&amp;amp; value.length &amp;lt;= 12) {&#10;            const formattedValue = value.replace(/(.{4})/g, '$1 ').trim();&#10;            setAadhaar(formattedValue);&#10;        }&#10;    };&#10;&#10;    const handleGenderChange = (e) =&amp;gt; {&#10;        setGender(e.target.value);&#10;    };&#10;&#10;    const handleDobChange = (e) =&amp;gt; {&#10;        const value = e.target.value;&#10;        setDob(value);&#10;        calculateAge(value);&#10;    };&#10;&#10;    const calculateAge = (dob) =&amp;gt; {&#10;        const birthDate = new Date(dob);&#10;        const today = new Date();&#10;&#10;        if (birthDate &amp;gt; today) {&#10;            setAge(null); // Reset age&#10;        } else {&#10;            let age = today.getFullYear() - birthDate.getFullYear();&#10;            const monthDifference = today.getMonth() - birthDate.getMonth();&#10;            if (monthDifference &amp;lt; 0 || (monthDifference === 0 &amp;amp;&amp;amp; today.getDate() &amp;lt; birthDate.getDate())) {&#10;                age--;&#10;            }&#10;            setAge(Math.min(age, 110)); // Limit age to maximum 110&#10;        }&#10;    };&#10;&#10;    const handleSubmit = async (e) =&amp;gt; {&#10;      e.preventDefault();&#10;      try {&#10;        const userString = localStorage.getItem('user');&#10;        if (!userString) {&#10;          console.error('User not found in localStorage');&#10;          return;&#10;        }&#10;&#10;        const { email } = JSON.parse(userString);&#10;&#10;        const response = await axios.post('http://localhost:8081/patients/saveProfile', {&#10;          mobile,&#10;          aadhaar,&#10;          gender,&#10;          dob,&#10;          address,&#10;          email, // Include the email value in the request body&#10;        });&#10;        console.log(response.data); // Log the response from the server&#10;        setShowPopup(false); // Close the popup after successful submission&#10;      } catch (error) {&#10;        console.error('Failed to submit patient details:', error);&#10;      }&#10;    };&#10;&#10;&#10;    useEffect(() =&amp;gt; {&#10;        const maxDate = new Date();&#10;        maxDate.setFullYear(maxDate.getFullYear() - 18);&#10;        setMaxBirthDate(maxDate.toISOString().split('T')[0]);&#10;    }, []);&#10;&#10;    return (&#10;        &amp;lt;&amp;gt;&#10;            {showPopup &amp;amp;&amp;amp; (&#10;                &amp;lt;div className=&amp;quot;popup&amp;quot;&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;popup-content&amp;quot;&amp;gt;&#10;                        &amp;lt;span className=&amp;quot;close-popup&amp;quot; onClick={() =&amp;gt; setShowPopup(false)}&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Complete Your Profile&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;form-group&amp;quot;&amp;gt;&#10;                                &amp;lt;label htmlFor=&amp;quot;mobile&amp;quot;&amp;gt;Mobile No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;tel&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;mobile&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Mobile Number&amp;quot;&#10;                                    value={mobile}&#10;                                    onChange={handleMobileChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {mobile.length &amp;gt; 0 &amp;amp;&amp;amp; mobile.length &amp;lt; 10 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Mobile number must be exactly 10 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;gender&amp;quot;&amp;gt;Gender:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;select&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;gender&amp;quot;&#10;                                    value={gender}&#10;                                    onChange={handleGenderChange}&#10;                                    required&#10;                                &amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;Select Gender&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;male&amp;quot;&amp;gt;Male&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;female&amp;quot;&amp;gt;Female&amp;lt;/option&amp;gt;&#10;                                    &amp;lt;option value=&amp;quot;other&amp;quot;&amp;gt;Other&amp;lt;/option&amp;gt;&#10;                                &amp;lt;/select&amp;gt;&#10;&#10;                                &amp;lt;label htmlFor=&amp;quot;dob&amp;quot;&amp;gt;Date of Birth:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;date&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;dob&amp;quot;&#10;                                    value={dob}&#10;                                    onChange={handleDobChange}&#10;                                    max={maxBirthDate} // Set max birth date&#10;                                    required&#10;                                /&amp;gt;&#10;                                {age !== null &amp;amp;&amp;amp; (&#10;                                    &amp;lt;p&amp;gt;Age: {age} years&amp;lt;/p&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;aadhaar&amp;quot;&amp;gt;Aadhaar Card No:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                    type=&amp;quot;text&amp;quot;&#10;                                    className=&amp;quot;form-control&amp;quot;&#10;                                    id=&amp;quot;aadhaar&amp;quot;&#10;                                    placeholder=&amp;quot;Enter Your Aadhaar Number&amp;quot;&#10;                                    value={aadhaar}&#10;                                    onChange={handleAadhaarChange}&#10;                                    required&#10;                                /&amp;gt;&#10;                                {aadhaar.replace(/\s/g, '').length &amp;gt; 0 &amp;amp;&amp;amp; aadhaar.replace(/\s/g, '').length &amp;lt; 12 &amp;amp;&amp;amp; (&#10;                                    &amp;lt;small className=&amp;quot;text-danger&amp;quot;&amp;gt;Aadhaar number must be exactly 12 digits long&amp;lt;/small&amp;gt;&#10;                                )}&#10;                                &amp;lt;label htmlFor=&amp;quot;address&amp;quot;&amp;gt;Address:&amp;lt;/label&amp;gt;&#10;                                &amp;lt;input&#10;                                  type=&amp;quot;text&amp;quot;&#10;                                  className=&amp;quot;form-control&amp;quot;&#10;                                  id=&amp;quot;address&amp;quot;&#10;                                  placeholder=&amp;quot;Enter Your Address&amp;quot;&#10;                                  value={address}&#10;                                  onChange={handleAddressChange}&#10;                                  required&#10;                                /&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                            &amp;lt;button type=&amp;quot;submit&amp;quot; className=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&#10;                        &amp;lt;/form&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            )}&#10;            &amp;lt;section id=&amp;quot;hero&amp;quot; className=&amp;quot;d-flex align-items-center&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                        &amp;lt;p&amp;gt;TOTAL HEALTH CARE SOLUTION&amp;lt;/p&amp;gt;&#10;                        &amp;lt;h1&amp;gt;Your Most Trusted &amp;lt;br /&amp;gt;Health Partner&amp;lt;/h1&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;A repudiandae ipsam labore ipsa voluptatum quidem quae laudantium quisquam aperiam maiores sunt fugit,&amp;lt;/p&amp;gt;&#10;                        &amp;lt;p className='hero-p'&amp;gt;deserunt rem suscipit placeat.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;d-flex justify-content-start gap-2&amp;quot;&amp;gt;&#10;                        {/* Conditional rendering based on user role */}&#10;                        {user &amp;amp;&amp;amp; user.role === 'patient' &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {user &amp;amp;&amp;amp; (user.role === 'doctor' || user.role === 'receptionist') &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors-dashboard'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Track Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                        {/* Show 'Book Appointment' button if no user is logged in */}&#10;                        {!user &amp;amp;&amp;amp; (&#10;                            &amp;lt;Link to={'/doctors'} className=&amp;quot;btn-get-started scrollto&amp;quot;&amp;gt;Book Appointment&amp;lt;/Link&amp;gt;&#10;                        )}&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;why-us mt-5 mt-md-0&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;content&amp;quot;&amp;gt;&#10;                                &amp;lt;h3&amp;gt;Why Choose Us?&amp;lt;/h3&amp;gt;&#10;                                &amp;lt;p&amp;gt;&#10;                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Duis aute irure dolor in reprehenderit&#10;                                    Asperiores dolores sed et. Tenetur quia eos. Autem tempore quibusdam vel necessitatibus optio ad corporis.&#10;                                &amp;lt;/p&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;Link style={{ textDecoration: 'none' }} to={'/about'} className=&amp;quot;more-btn&amp;quot;&amp;gt;Learn More &amp;lt;i className=&amp;quot;bx bx-chevron-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/Link&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-lg-8 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;icon-boxes d-flex flex-column justify-content-center&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHouseUser className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Appointment&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;24 Hours Service&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Consequuntur sunt aut quasi enim aliquam quae harum pariatur laboris nisi ut aliquip&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaHeadset className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Emergency Cases&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;h6 className='text-secondary'&amp;gt;+88 01751 040425&amp;lt;/h6&amp;gt;&#10;                                            &amp;lt;p&amp;gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Qui facilis perferendis quia maxime. Laborum excepturi pariatur laboriosam nihil, dolor molestias.&amp;lt;/p&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;col-xl-4 d-flex align-items-stretch&amp;quot;&amp;gt;&#10;                                        &amp;lt;div className=&amp;quot;icon-box mt-4 mt-xl-0&amp;quot;&amp;gt;&#10;                                            &amp;lt;FaClock className=&amp;quot;icon&amp;quot; /&amp;gt;&#10;                                            &amp;lt;h4&amp;gt;Working Hours&amp;lt;/h4&amp;gt;&#10;                                            &amp;lt;small className='text-secondary'&amp;gt;Timing schedule&amp;lt;/small&amp;gt;&#10;                                            &amp;lt;ul className='list-group list-group-flush'&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sun - Wed : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;8:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Thus - Fri : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;9:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                                &amp;lt;li className=&amp;quot;list-group-item d-flex justify-content-between text-nowrap&amp;quot; &amp;gt;&amp;lt;p&amp;gt;Sat - Sun : &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;10:00 - 17: 00&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&#10;                                            &amp;lt;/ul&amp;gt;&#10;                                        &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className='reco-doc'&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 mt-100 section-title text-center reco-doc-card'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Recommended Doctors&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;cardContainer&amp;quot;&amp;gt;&#10;                            {filteredDoctors.slice(0, 5).map((doctor, index) =&amp;gt; (&#10;                                &amp;lt;div key={index} className=&amp;quot;card&amp;quot;&amp;gt;&#10;                                    &amp;lt;img src={`data:image/jpeg;base64,${bufferToBase64(doctor.doc_pic)}`} alt={doctor.name} className=&amp;quot;image&amp;quot; /&amp;gt;&#10;                                    &amp;lt;h3&amp;gt;{doctor.name}&amp;lt;/h3&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Specialization:&amp;lt;/strong&amp;gt; {doctor.specialization}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Fees:&amp;lt;/strong&amp;gt; {doctor.fees}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Location:&amp;lt;/strong&amp;gt; {doctor.location}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;p&amp;gt;{doctor.description}&amp;lt;/p&amp;gt;&#10;                                    &amp;lt;button className=&amp;quot;bookButton&amp;quot;&amp;gt;Book Appointment&amp;lt;/button&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            ))}&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;            &amp;lt;section className=&amp;quot;section section-specialities position-relative&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;container-fluid&amp;quot;&amp;gt;&#10;                    &amp;lt;div className='mb-5 section-title text-center spec-header'&amp;gt;&#10;                        &amp;lt;h2&amp;gt;Clinic and Specialities&amp;lt;/h2&amp;gt;&#10;                        &amp;lt;p className='m-0'&amp;gt;Lorem ipsum dolor sit amet consectetur adipisicing.&amp;lt;/p&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;&#10;                    &amp;lt;div className=&amp;quot;row justify-content-center&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;col-md-9&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;specialities-slider d-flex justify-content-center align-items-center gap-5&amp;quot;&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img1} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Urology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img2} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Neurology&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img3} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Orthopedic&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img4} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Cardiologist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                                &amp;lt;div className=&amp;quot;speicality-item text-center&amp;quot;&amp;gt;&#10;                                    &amp;lt;div className=&amp;quot;speicality-img&amp;quot;&amp;gt;&#10;                                        &amp;lt;img src={img5} className=&amp;quot;img-fluid&amp;quot; alt=&amp;quot;&amp;quot; /&amp;gt;&#10;                                        &amp;lt;span&amp;gt;&amp;lt;i&amp;gt;&amp;lt;FaCheckDouble /&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&#10;                                    &amp;lt;/div&amp;gt;&#10;                                    &amp;lt;p&amp;gt;Dentist&amp;lt;/p&amp;gt;&#10;                                &amp;lt;/div&amp;gt;&#10;                            &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;            &amp;lt;/section&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;    );&#10;}&#10;&#10;export default Home;&#10; and this is my patientController.js code // Controller/patientController.js&#10;&#10;const db = require(&amp;quot;../db&amp;quot;);&#10;&#10;// Get all patients&#10;exports.getAllPatients = (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;SELECT * FROM patient&amp;quot;;&#10;  db.query(sql, (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    return res.json(data);&#10;  });&#10;};&#10;&#10;// Get patient by patient_id&#10;exports.getPatientById = (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;SELECT * FROM patient WHERE patient_id = ?&amp;quot;;&#10;  db.query(sql, [req.params.id], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    if (data.length &amp;gt; 0) {&#10;      return res.json(data[0]);&#10;    } else {&#10;      return res.status(404).json(&amp;quot;Patient not found&amp;quot;);&#10;    }&#10;  });&#10;};&#10;&#10;// Create new patient&#10;exports.createPatient = (req, res) =&amp;gt; {&#10;  const sql = `&#10;    INSERT INTO patient (&#10;      email, password, role, age, gender, address, number, insurance, adhar_no, created_at, name, dob, patient_pic&#10;    ) VALUES (?)&#10;  `;&#10;  const values = [&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;    req.body.age,&#10;    req.body.gender,&#10;    req.body.address,&#10;    req.body.number,&#10;    req.body.insurance,&#10;    req.body.adhar_no,&#10;    new Date(), // created_at, set to current date and time&#10;    req.body.name,&#10;    req.body.dob,&#10;    req.body.patient_pic&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    return res.json(&amp;quot;Success&amp;quot;);&#10;  });&#10;};&#10;&#10;// Update patient by patient_id&#10;exports.updatePatientById = (req, res) =&amp;gt; {&#10;  const sql = `&#10;    UPDATE patient SET &#10;      email=?, password=?, role=?, age=?, gender=?, address=?, number=?, insurance=?, adhar_no=?, name=?, dob=?, patient_pic=?&#10;    WHERE patient_id=?&#10;  `;&#10;  const values = [&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;    req.body.age,&#10;    req.body.gender,&#10;    req.body.address,&#10;    req.body.number,&#10;    req.body.insurance,&#10;    req.body.adhar_no,&#10;    req.body.name,&#10;    req.body.dob,&#10;    req.body.patient_pic,&#10;    req.params.id&#10;  ];&#10;&#10;  db.query(sql, values, (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json(&amp;quot;Success&amp;quot;);&#10;    } else {&#10;      return res.status(404).json(&amp;quot;Patient not found&amp;quot;);&#10;    }&#10;  });&#10;};&#10;&#10;exports.updatePatient = (req, res) =&amp;gt; {&#10;  const { patient_id } = req.params;&#10;  const {&#10;    name,&#10;    email,&#10;    number,&#10;    adhar_no,&#10;    dob,&#10;    gender,&#10;    insurance,&#10;    address,&#10;  } = req.body;&#10;&#10;  const sql =&#10;    &amp;quot;UPDATE patient SET name = ?, email = ?, number = ?, adhar_no = ?, dob = ?, gender = ?, insurance = ?, address = ? WHERE patient_id = ?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [name, email, number, adhar_no, dob, gender, insurance, address, patient_id],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;      }&#10;      return res.json(&amp;quot;Patient updated successfully&amp;quot;);&#10;    }&#10;  );&#10;};&#10;&#10;// Delete patient by patient_id&#10;exports.deletePatientById = (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;DELETE FROM patient WHERE patient_id = ?&amp;quot;;&#10;  db.query(sql, [req.params.id], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json(&amp;quot;Error&amp;quot;);&#10;    }&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json(&amp;quot;Success&amp;quot;);&#10;    } else {&#10;      return res.status(404).json(&amp;quot;Patient not found&amp;quot;);&#10;    }&#10;  });&#10;};&#10;&#10;exports.saveProfile = (req, res) =&amp;gt; {&#10;  const { mobile, gender, dob, aadhaar, address, email } = req.body;&#10;&#10;  // First, check if the user exists in the login table&#10;  const checkUserSql = &amp;quot;SELECT login_id, name, email, password, role FROM login WHERE email = ?&amp;quot;;&#10;  db.query(checkUserSql, [email], (err, result) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Database error:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Failed to save profile&amp;quot; });&#10;    }&#10;&#10;    if (result.length === 0) {&#10;      // User not found in the login table&#10;      return res.status(404).json({ error: &amp;quot;User not found&amp;quot; });&#10;    }&#10;&#10;    const { login_id, name, email, password, role } = result[0];&#10;&#10;    // Check if the email already exists in the patient table&#10;    const checkEmailSql = &amp;quot;SELECT * FROM patient WHERE email = ?&amp;quot;;&#10;    db.query(checkEmailSql, [email], (err, emailResult) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.status(500).json({ error: &amp;quot;Failed to save profile&amp;quot; });&#10;      }&#10;&#10;      if (emailResult.length &amp;gt; 0) {&#10;        // Email already exists, return an error or update the existing record&#10;        return res.status(409).json({ error: &amp;quot;Email already exists&amp;quot; });&#10;      }&#10;&#10;      // Insert patient details into the patient table&#10;      const sql = `&#10;        INSERT INTO patient (number, gender, dob, adhar_no, address, login_id, email, password, role, name)&#10;        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&#10;      `;&#10;&#10;      const values = [mobile, gender, dob, aadhaar, address, login_id, email, password, role, name];&#10;&#10;      db.query(sql, values, (err, result) =&amp;gt; {&#10;        if (err) {&#10;          console.error(&amp;quot;Database error:&amp;quot;, err);&#10;          return res.status(500).json({ error: &amp;quot;Failed to save profile&amp;quot; });&#10;        }&#10;        return res.status(200).json({ message: &amp;quot;Profile saved successfully&amp;quot; });&#10;      });&#10;    });&#10;  });&#10;};&#10;&#10;but when i click submit after feeling details nothing happens&#10;" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="The issue seems to be that you have commented out the `handleSubmit` function in your `Home.js` file. You need to uncomment it for the form submission to work.&#10;&#10;Here's the commented-out code:&#10;&#10;```javascript&#10;// const handleSubmit = async (e) =&gt; {&#10;//   e.preventDefault();&#10;//   try {&#10;//     const userString = localStorage.getItem('user');&#10;//     if (!userString) {&#10;//       console.error('User not found in localStorage');&#10;//       return;&#10;//     }&#10;&#10;//     const { email } = JSON.parse(userString);&#10;&#10;//     const response = await axios.post('http://localhost:8081/patients/saveProfile', {&#10;//       mobile,&#10;//       aadhaar,&#10;//       gender,&#10;//       dob,&#10;//       address,&#10;//       email, // Include the email value in the request body&#10;//     });&#10;//     console.log(response.data); // Log the response from the server&#10;//     setShowPopup(false); // Close the popup after successful submission&#10;//   } catch (error) {&#10;//     console.error('Failed to submit patient details:', error);&#10;//   }&#10;// };&#10;```&#10;&#10;Uncomment this code by removing the `//` at the beginning of each line.&#10;&#10;After uncommenting the `handleSubmit` function, make sure that the `onSubmit` event of your form is correctly bound to the `handleSubmit` function. In your code, it seems to be correct:&#10;&#10;```jsx&#10;&lt;form onSubmit={handleSubmit}&gt;&#10;  {/* Form fields */}&#10;  &lt;button type=&quot;submit&quot; className=&quot;btn btn-primary&quot;&gt;Submit&lt;/button&gt;&#10;&lt;/form&gt;&#10;```&#10;&#10;Once you have uncommented the `handleSubmit` function and ensured that the `onSubmit` event is correctly bound, the form submission should work as expected.&#10;&#10;If you're still facing issues, please double-check your React component and ensure that the state variables (`mobile`, `aadhaar`, `gender`, `dob`, `address`) are being updated correctly when the form fields are changed." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="but i already uncommit handleSubmit still not working" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="If you have already uncommented the `handleSubmit` function and it's still not working, there might be a few other issues to check:&#10;&#10;1. **Check the console for errors**&#10;Open your browser's developer console and check if there are any errors being logged when you submit the form. This can help identify any issues with the code or the server response.&#10;&#10;2. **Check the server response**&#10;In the `handleSubmit` function, add a `console.log` statement before and after the `axios.post` call to see if the function is being executed and if the server is responding correctly.&#10;&#10;```javascript&#10;const handleSubmit = async (e) =&gt; {&#10;  e.preventDefault();&#10;  try {&#10;    console.log('Before axios call');&#10;    const userString = localStorage.getItem('user');&#10;    if (!userString) {&#10;      console.error('User not found in localStorage');&#10;      return;&#10;    }&#10;&#10;    const { email } = JSON.parse(userString);&#10;&#10;    const response = await axios.post('http://localhost:8081/patients/saveProfile', {&#10;      mobile,&#10;      aadhaar,&#10;      gender,&#10;      dob,&#10;      address,&#10;      email,&#10;    });&#10;    console.log('Server response:', response.data);&#10;    setShowPopup(false);&#10;  } catch (error) {&#10;    console.error('Failed to submit patient details:', error);&#10;  }&#10;};&#10;```&#10;&#10;3. **Check the server-side code**&#10;Ensure that your server-side code (`patientController.js`) is handling the request correctly and responding with the appropriate data or error messages.&#10;&#10;4. **Check the state variables**&#10;Make sure that the state variables (`mobile`, `aadhaar`, `gender`, `dob`, `address`) are being updated correctly when the form fields are changed. You can add `console.log` statements in the respective event handlers to verify the values.&#10;&#10;5. **Check the form field values**&#10;Before submitting the form, log the values of the form fields to ensure that they are correct and match the expected format.&#10;&#10;```javascript&#10;const handleSubmit = async (e) =&gt; {&#10;  e.preventDefault();&#10;  console.log('Mobile:', mobile);&#10;  console.log('Aadhaar:', aadhaar);&#10;  console.log('Gender:', gender);&#10;  console.log('Date of Birth:', dob);&#10;  console.log('Address:', address);&#10;  // ... rest of the code&#10;};&#10;```&#10;&#10;If you're still facing issues after checking these points, please provide any error messages or console logs that might help identify the problem." />
                    </message>
                  </list>
                </messages>
                <updatedAt value="2024-06-04T15:04:49.5333602" />
              </chat>
            </list>
          </chats>
          <defaultLlm>
            <llm>
              <model value="anthropic/claude-3-sonnet-20240229" />
              <provider value="Anthropic" />
              <title value="Claude 3 Sonnet" />
            </llm>
          </defaultLlm>
        </AccountData>
      </list>
    </accountData>
  </component>
</project>