<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChatHistory">
    <accountData>
      <list>
        <AccountData>
          <accountId value="VXNlcjoxNTkzOTM=" />
          <chats>
            <list>
              <chat>
                <internalId value="59572c98-e195-4233-bd95-df929946d25d" />
                <llm>
                  <llm>
                    <model value="anthropic/claude-3-sonnet-20240229" />
                    <provider value="Anthropic" />
                    <title value="Claude 3 Sonnet" />
                  </llm>
                </llm>
              </chat>
              <chat>
                <internalId value="4d048887-ee33-4f75-a29f-6110d4295e1f" />
                <llm>
                  <llm>
                    <model value="anthropic/claude-3-sonnet-20240229" />
                    <provider value="Anthropic" />
                    <title value="Claude 3 Sonnet" />
                  </llm>
                </llm>
                <messages>
                  <list>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="this is my DoctorSearch.js code import React, { useState, useEffect } from 'react';&#10;import './doctorsearch.css';&#10;import axios from 'axios';&#10;import { Link, useNavigate } from 'react-router-dom';&#10;&#10;const Doctors = () =&amp;gt; {&#10;  const [filter, setFilter] = useState({ name: '', specialization: '', fees: '', location: '' });&#10;  const [doctors, setDoctors] = useState([]);&#10;  const [minPrice, setMinPrice] = useState(0);&#10;  const [maxPrice, setMaxPrice] = useState(5000);&#10;  const navigate = useNavigate();&#10;&#10;  useEffect(() =&amp;gt; {&#10;    const fetchDoctors = async () =&amp;gt; {&#10;      try {&#10;        const response = await axios.get('http://localhost:8081/doctors');&#10;        setDoctors(response.data);&#10;      } catch (error) {&#10;        console.error('Failed to fetch doctors:', error);&#10;      }&#10;    };&#10;    fetchDoctors();&#10;  }, []);&#10;&#10;  const handleFilterChange = (e) =&amp;gt; {&#10;    const { name, value } = e.target;&#10;    setFilter({ ...filter, [name]: value });&#10;  };&#10;&#10;  const filteredDoctors = doctors.filter((doctor) =&amp;gt;&#10;    doctor.name.toLowerCase().includes(filter.name.toLowerCase()) &amp;amp;&amp;amp;&#10;    doctor.specialization.toLowerCase().includes(filter.specialization.toLowerCase()) &amp;amp;&amp;amp;&#10;    (filter.fees === '' || doctor.fees.includes(filter.fees)) &amp;amp;&amp;amp;&#10;    (filter.location === '' || doctor.hospital_loc.toLowerCase().includes(filter.location.toLowerCase()))&#10;  );&#10;&#10;  const bufferToBase64 = (buffer) =&amp;gt; {&#10;    let binary = '';&#10;    const bytes = new Uint8Array(buffer.data);&#10;    const len = bytes.byteLength;&#10;    for (let i = 0; i &amp;lt; len; i++) {&#10;      binary += String.fromCharCode(bytes[i]);&#10;    }&#10;    return window.btoa(binary);&#10;  };&#10;&#10;  const handleMaxPriceChange = (event) =&amp;gt; {&#10;    const value = parseInt(event.target.value);&#10;    if (value &amp;gt;= minPrice) {&#10;      setMaxPrice(value);&#10;    }&#10;  };&#10;&#10;  const handleSubmit = (event) =&amp;gt; {&#10;    event.preventDefault();&#10;    console.log('Minimum Price:', minPrice);&#10;    console.log('Maximum Price:', maxPrice);&#10;  };&#10;&#10;  const handleBookAppointment = (doctorId) =&amp;gt; {&#10;    if (doctorId) {&#10;      localStorage.setItem('doctor_id', doctorId);&#10;      navigate('/appointment');&#10;    } else {&#10;      console.error('Doctor ID is undefined');&#10;    }&#10;  };&#10;&#10;  return (&#10;    &amp;lt;div className=&amp;quot;container-doctor&amp;quot;&amp;gt;&#10;      &amp;lt;div className=&amp;quot;filters&amp;quot;&amp;gt;&#10;        &amp;lt;h2&amp;gt;Filters&amp;lt;/h2&amp;gt;&#10;        &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; placeholder=&amp;quot;Search by Name&amp;quot; value={filter.name} onChange={handleFilterChange} className=&amp;quot;input&amp;quot; /&amp;gt;&#10;        &amp;lt;div&amp;gt;&#10;          &amp;lt;select id=&amp;quot;specialization&amp;quot; name=&amp;quot;specialization&amp;quot; onChange={handleFilterChange} className=&amp;quot;input&amp;quot;&amp;gt;&#10;            &amp;lt;option value=&amp;quot;all&amp;quot;&amp;gt;Filter By Specialization&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;urology&amp;quot;&amp;gt;Urology&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;neurology&amp;quot;&amp;gt;Neurology&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;orthopedic&amp;quot;&amp;gt;Orthopedic&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;cardiologist&amp;quot;&amp;gt;Cardiologist&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;dentist&amp;quot;&amp;gt;Dentist&amp;lt;/option&amp;gt;&#10;          &amp;lt;/select&amp;gt;&#10;        &amp;lt;/div&amp;gt;&#10;        &amp;lt;div className=&amp;quot;price-range&amp;quot;&amp;gt;&#10;          &amp;lt;span className=&amp;quot;price-label&amp;quot;&amp;gt;Price: ₹{minPrice} - ₹{maxPrice}&amp;lt;/span&amp;gt;&#10;          &amp;lt;div className=&amp;quot;price-inputs&amp;quot;&amp;gt;&#10;            &amp;lt;input type=&amp;quot;range&amp;quot; value={maxPrice} min=&amp;quot;0&amp;quot; max=&amp;quot;5000&amp;quot; step=&amp;quot;1&amp;quot; onChange={handleMaxPriceChange} className=&amp;quot;input-range&amp;quot; /&amp;gt;&#10;            &amp;lt;button onClick={handleSubmit} className=&amp;quot;price-go&amp;quot;&amp;gt;Go&amp;lt;/button&amp;gt;&#10;          &amp;lt;/div&amp;gt;&#10;        &amp;lt;/div&amp;gt;&#10;        {/* &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;location&amp;quot; placeholder=&amp;quot;Filter by Location&amp;quot; value={filter.location} onChange={handleFilterChange} className=&amp;quot;input&amp;quot; /&amp;gt; */}&#10;        &amp;lt;div&amp;gt;&#10;          &amp;lt;select id=&amp;quot;location&amp;quot; name=&amp;quot;location&amp;quot; onChange={handleFilterChange} className='input'&amp;gt;&#10;            &amp;lt;option value=&amp;quot;all&amp;quot;&amp;gt;Filter by location&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;Ahmedabad&amp;quot;&amp;gt;Ahmedabad&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;Gandhinagar&amp;quot;&amp;gt;Gandhinagar&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;Chennai&amp;quot;&amp;gt;Chennai&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;Mumbai&amp;quot;&amp;gt;Mumbai&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;Benglore&amp;quot;&amp;gt;Benglore&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;Delhi&amp;quot;&amp;gt;Delhi&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;Kolkata&amp;quot;&amp;gt;Kolkata&amp;lt;/option&amp;gt;&#10;            &amp;lt;option value=&amp;quot;Lakhnow&amp;quot;&amp;gt;Lakhnow&amp;lt;/option&amp;gt;&#10;          &amp;lt;/select&amp;gt;&#10;        &amp;lt;/div&amp;gt;&#10;      &amp;lt;/div&amp;gt;&#10;      &amp;lt;div className=&amp;quot;doctorList&amp;quot;&amp;gt;&#10;        &amp;lt;h2&amp;gt;Doctor List&amp;lt;/h2&amp;gt;&#10;        &amp;lt;div className=&amp;quot;cardContainer&amp;quot;&amp;gt;&#10;          {filteredDoctors.map((doctor, index) =&amp;gt; (&#10;            &amp;lt;div key={index} className=&amp;quot;card&amp;quot;&amp;gt;&#10;              &amp;lt;Link to='/details' style={{ textDecoration: &amp;quot;none&amp;quot;, color: &amp;quot;black&amp;quot; }} &amp;gt;&#10;                &amp;lt;img src={`data:image/jpeg;base64,${bufferToBase64(doctor.doc_pic)}`} alt={doctor.name} className=&amp;quot;image&amp;quot; /&amp;gt;&#10;                &amp;lt;h3&amp;gt;{doctor.name}&amp;lt;/h3&amp;gt;&#10;                &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Specialization:&amp;lt;/strong&amp;gt; {doctor.specialization}&amp;lt;/p&amp;gt;&#10;                &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Fees:&amp;lt;/strong&amp;gt; {doctor.fees}&amp;lt;/p&amp;gt;&#10;                &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Location:&amp;lt;/strong&amp;gt; {doctor.hospital_loc}&amp;lt;/p&amp;gt;&#10;                &amp;lt;p&amp;gt;{doctor.description}&amp;lt;/p&amp;gt;&#10;              &amp;lt;/Link&amp;gt;&#10;              &amp;lt;button onClick={() =&amp;gt; handleBookAppointment(doctor.doctor_id)} className=&amp;quot;bookButton&amp;quot; style={{ textDecoration: 'none' }}&amp;gt;Book Appointment&amp;lt;/button&amp;gt;&#10;            &amp;lt;/div&amp;gt;&#10;          ))}&#10;        &amp;lt;/div&amp;gt;&#10;      &amp;lt;/div&amp;gt;&#10;    &amp;lt;/div&amp;gt;&#10;  );&#10;};&#10;&#10;export default Doctors; when i click book appointment button i am able to store doctor_id in my local storage in browser like this clerk-db-jwt&#9;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJkZXYiOiJkdmJfMmVQT2tuNjFoQmlJYkllZmk2M0F0T3hMN3ZoIiwiaWQiOiJjbGllbnRfMmVQT201ZEh0bjROdHRHdHlvZ0pyNGhOU3FhIiwicm90YXRpbmdfdG9rZW4iOiJweHBldmp0dml6MTF6OGFwNG9sNnZhaXdyNGVkMHB3djRyN3lwYmo1In0.lBNQrHoQkKzXXQOmRWNOUKa_xl1C1RE8dGIS9J0brJvRsAoicsoSIiIb4m3n5fxLjkes6DyIcRLloAROMf94fmlzfpbfovDEC70ZNoHS5f_DThDYZD6hbpjJSQbeU3ZMUYZkkfVecjtkYw-kv4axwP4M95MBvsld_62cLyMwiDAx8GM4NOA-LkOZrUK_yfIHBFy66uABTNDz21vlIxOr0_HbGgm3XqwTAHis9-gaOBgWfDXnZMoeLz4xWxYtZpx1BiViayTanCLKNOP6tmkqW6R65t0MbkvAaMzDR_N3owzi2WdytVCWtMiGDMpPJL6VlT9Xm2pA3RCqFNM1k5WzcQ&#9;&#10;doctor_id&#9;3&#9;&#10;user&#9;{&amp;quot;login_id&amp;quot;:6,&amp;quot;name&amp;quot;:&amp;quot;Alex Brown&amp;quot;,&amp;quot;role&amp;quot;:&amp;quot;Patient&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;alex@example.com&amp;quot;}&#9;&#10;loglevel&#9;INFO&#9;&#10;ld:62913038bb88120c8d0102a7:$diagnostics&#9;{&amp;quot;dataSinceDate&amp;quot;:1717669159180,&amp;quot;droppedEvents&amp;quot;:0,&amp;quot;eventsInLastBatch&amp;quot;:0,&amp;quot;streamInits&amp;quot;:[]}&#9;&#10;and after that i navigate to my Appointment.js code import React, { useState, useEffect, useRef } from 'react';&#10;import { Steps } from 'antd';&#10;import { useNavigate } from 'react-router-dom';&#10;&#10;import chip from './images/chip.png'&#10;import './App.css';&#10;&#10;const { Step } = Steps;&#10;&#10;const AppointmentScheduler = () =&amp;gt; {&#10;  const [currentStep, setCurrentStep] = useState(0);&#10;  const [selectedDate, setSelectedDate] = useState(null);&#10;  const [selectedTime, setSelectedTime] = useState(null);&#10;&#10;  const navigate = useNavigate();&#10;  const [formValues, setFormValues] = useState({&#10;    firstName: '',&#10;    lastName: '',&#10;    email: '',&#10;    phone: '',&#10;    reasonForVisit: '',&#10;    description: '',&#10;    address: '',&#10;  });&#10;&#10;  const handleDateClick = (date) =&amp;gt; {&#10;    setSelectedDate(date);&#10;  };&#10;&#10;  const handleTimeClick = (time) =&amp;gt; {&#10;    setSelectedTime(time);&#10;  };&#10;&#10;  const handleInputChange = (e) =&amp;gt; {&#10;    const { name, value } = e.target;&#10;    setFormValues({&#10;      ...formValues,&#10;      [name]: value,&#10;    });&#10;  };&#10;&#10;  const handleNext = () =&amp;gt; {&#10;    if (currentStep === 0) {&#10;      if (!selectedDate || !selectedTime) {&#10;        alert(&amp;quot;Please select both a date and a time before proceeding.&amp;quot;);&#10;        return;&#10;      }&#10;    }&#10;&#10;    if (currentStep === 1) {&#10;      const { firstName, email, phone, reasonForVisit, description, address } = formValues;&#10;      if (!firstName || !email || !phone || !reasonForVisit || !description || !address) {&#10;        alert('Please fill out all required fields.');&#10;        return;&#10;      }&#10;    }&#10;&#10;    setCurrentStep(currentStep + 1);&#10;  };&#10;&#10;  const handlePrev = () =&amp;gt; {&#10;    setCurrentStep(currentStep - 1);&#10;  };&#10;&#10;  const handleBack = () =&amp;gt; {&#10;    navigate('/doctors');&#10;  }&#10;&#10;  const getNext8Days = () =&amp;gt; {&#10;    const dates = [];&#10;    for (let i = 0; i &amp;lt; 8; i++) {&#10;      const currentDate = new Date();&#10;      currentDate.setDate(currentDate.getDate() + i);&#10;      const formattedDate = currentDate.toLocaleDateString('en-US', {&#10;        year: 'numeric',&#10;        month: 'short',&#10;        day: 'numeric'&#10;      });&#10;      dates.push(formattedDate);&#10;    }&#10;    return dates;&#10;  };&#10;&#10;  const generateMorningSlots = () =&amp;gt; {&#10;    return ['09:00 AM', '10:00 AM', '11:00 AM', '12:00 PM', '01:00 PM'];&#10;  };&#10;  const generateEveningSlots = () =&amp;gt; {&#10;    return ['03:00 PM', '04:00 PM', '05:00 PM', '06:00 PM', '07:00 PM'];&#10;  };&#10;&#10;  const [currentCardBackground, setCurrentCardBackground] = useState(Math.floor(Math.random() * 25 + 1));&#10;  const [cardName, setCardName] = useState('');&#10;  const [cardNumber, setCardNumber] = useState('');&#10;  const [cardMonth, setCardMonth] = useState('');&#10;  const [cardYear, setCardYear] = useState('');&#10;  const [cardCvv, setCardCvv] = useState('');&#10;  const [isCardFlipped, setIsCardFlipped] = useState(false);&#10;  const [focusElementStyle, setFocusElementStyle] = useState(null);&#10;&#10;  const cardNumberInput = useRef(null);&#10;  const cardNameInput = useRef(null);&#10;  const cardMonthInput = useRef(null);&#10;  const cardYearInput = useRef(null);&#10;&#10;  useEffect(() =&amp;gt; {&#10;    if (cardNumberInput.current) {&#10;      setFocusElementStyle(cardNumberInput.current.getBoundingClientRect());&#10;    }&#10;  }, []);&#10;&#10;  const minCardYear = new Date().getFullYear();&#10;&#10;  const handleCardNumberChange = (e) =&amp;gt; {&#10;    let { value } = e.target;&#10;    value = value.replace(/\D/g, '').substring(0, 16);&#10;    value = value.replace(/(.{4})/g, '$1 ').trim();&#10;    setCardNumber(value);&#10;  };&#10;&#10;  const handleCardNameChange = (e) =&amp;gt; {&#10;    const { value } = e.target;&#10;    setCardName(value);&#10;  };&#10;&#10;  const handleCardMonthChange = (e) =&amp;gt; {&#10;    setCardMonth(e.target.value);&#10;  };&#10;&#10;  const handleCardYearChange = (e) =&amp;gt; {&#10;    setCardYear(e.target.value);&#10;  };&#10;&#10;  const handleCardCvvChange = (e) =&amp;gt; {&#10;    let { value } = e.target;&#10;    value = value.substring(0, 3);&#10;    setCardCvv(value);&#10;  };&#10;&#10;  const flipCard = (status) =&amp;gt; {&#10;    setIsCardFlipped(status);&#10;  };&#10;&#10;  const handleFocus = (position) =&amp;gt; {&#10;    setFocusElementStyle(position);&#10;  };&#10;&#10;  const handleBlur = () =&amp;gt; {&#10;    setFocusElementStyle(null);&#10;  };&#10;&#10;  return (&#10;    &amp;lt;div className=&amp;quot;container&amp;quot; style={{ marginBottom: '5rem', marginTop: '2rem' }}&amp;gt;&#10;      &amp;lt;Steps current={currentStep}&amp;gt;&#10;        &amp;lt;Step title=&amp;quot;Select Appointment Date &amp;amp; Time&amp;quot; /&amp;gt;&#10;        &amp;lt;Step title=&amp;quot;Patient Information&amp;quot; /&amp;gt;&#10;        &amp;lt;Step title=&amp;quot;Payment&amp;quot; /&amp;gt;&#10;      &amp;lt;/Steps&amp;gt;&#10;&#10;      {currentStep === 0 &amp;amp;&amp;amp; (&#10;        &amp;lt;&amp;gt;&#10;          &amp;lt;div className='appointment-schedule'&amp;gt;&#10;            &amp;lt;div className='container-ap'&amp;gt;&#10;              &amp;lt;div className='info-part'&amp;gt;&#10;                &amp;lt;p className='info-head'&amp;gt; Would you like to schedule an Interview? Pick a Date &amp;amp; Time &amp;lt;/p&amp;gt;&#10;                &amp;lt;div className='info-box'&amp;gt;&#10;                  &amp;lt;div className='info-item'&amp;gt;&#10;                    &amp;lt;svg stroke=&amp;quot;currentColor&amp;quot; fill=&amp;quot;currentColor&amp;quot; strokeWidth=&amp;quot;0&amp;quot; viewBox=&amp;quot;0 0 512 512&amp;quot; className=&amp;quot;icon&amp;quot; height=&amp;quot;1em&amp;quot; width=&amp;quot;1em&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;&#10;                      &amp;lt;path d=&amp;quot;M320 336c0 8.84-7.16 16-16 16h-96c-8.84 0-16-7.16-16-16v-48H0v144c0 25.6 22.4 48 48 48h416c25.6 0 48-22.4 48-48V288H320v48zm144-208h-80V80c0-25.6-22.4-48-48-48H176c-25.6 0-48 22.4-48 48v48H48c-25.6 0-48 22.4-48 48v80h512v-80c0-25.6-22.4-48-48-48zm-144 0H192V96h128v32z&amp;quot;&amp;gt;&amp;lt;/path&amp;gt;&#10;                    &amp;lt;/svg&amp;gt;&#10;                    &amp;lt;p&amp;gt;With Doctor&amp;lt;/p&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                  &amp;lt;div className='info-item'&amp;gt;&#10;                    &amp;lt;svg stroke=&amp;quot;currentColor&amp;quot; fill=&amp;quot;currentColor&amp;quot; strokeWidth=&amp;quot;0&amp;quot; viewBox=&amp;quot;0 0 512 512&amp;quot; className=&amp;quot;icon&amp;quot; height=&amp;quot;1em&amp;quot; width=&amp;quot;1em&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;&#10;                      &amp;lt;path d=&amp;quot;M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z&amp;quot;&amp;gt;&amp;lt;/path&amp;gt;&#10;                    &amp;lt;/svg&amp;gt;&#10;                    &amp;lt;p&amp;gt;30 Min&amp;lt;/p&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                  &amp;lt;div className='info-item'&amp;gt;&#10;                    &amp;lt;svg stroke=&amp;quot;currentColor&amp;quot; fill=&amp;quot;currentColor&amp;quot; strokeWidth=&amp;quot;0&amp;quot; viewBox=&amp;quot;0 0 512 512&amp;quot; className=&amp;quot;icon&amp;quot; height=&amp;quot;1em&amp;quot; width=&amp;quot;1em&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;&#10;                      &amp;lt;path d=&amp;quot;M444.52 3.52L28.74 195.42c-47.97 22.39-31.98 92.75 19.19 92.75h175.91v175.91c0 51.17 70.36 67.17 92.75 19.19l191.9-415.78c15.99-38.39-25.59-79.97-63.97-63.97z&amp;quot;&amp;gt;&amp;lt;/path&amp;gt;&#10;                    &amp;lt;/svg&amp;gt;&#10;                    &amp;lt;p&amp;gt;Sylhet, Bangladesh&amp;lt;br /&amp;gt;&amp;lt;span className=&amp;quot;form-text&amp;quot;&amp;gt;1020BD, Amertam, NorthEast, Srimongol&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                  &amp;lt;div className='info-item'&amp;gt;&#10;                    &amp;lt;svg stroke=&amp;quot;currentColor&amp;quot; fill=&amp;quot;currentColor&amp;quot; strokeWidth=&amp;quot;0&amp;quot; viewBox=&amp;quot;0 0 512 512&amp;quot; className=&amp;quot;icon&amp;quot; height=&amp;quot;1em&amp;quot; width=&amp;quot;1em&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;&#10;                      &amp;lt;path d=&amp;quot;M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.24-28.239 74.301-28.069 102.325.51 27.75 28.301 26.872 73.935-1.154 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.508 13.905 17.455 20.446 27.294 10.606l37.106-37.106c59.26-59.26 59.26-155.7-.001-214.961z&amp;quot;&amp;gt;&amp;lt;/path&amp;gt;&#10;                    &amp;lt;/svg&amp;gt;&#10;                    &amp;lt;p&amp;gt;Zoom Meeting&amp;lt;/p&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                  &amp;lt;div className='info-item'&amp;gt;&#10;                    &amp;lt;svg stroke=&amp;quot;currentColor&amp;quot; fill=&amp;quot;currentColor&amp;quot; stroke-width=&amp;quot;0&amp;quot; viewBox=&amp;quot;0 0 448 512&amp;quot; class=&amp;quot;icon&amp;quot; height=&amp;quot;1em&amp;quot; width=&amp;quot;1em&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;&amp;lt;path d=&amp;quot;M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm320-196c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM192 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM64 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z&amp;quot;&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;&#10;                    &amp;lt;p&amp;gt;Date, Time&amp;lt;/p&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;              &amp;lt;/div&amp;gt;&#10;              &amp;lt;div className='calender-div'&amp;gt;&#10;                &amp;lt;div className='calender-date'&amp;gt;&#10;                  &amp;lt;p className=&amp;quot;calender-p&amp;quot;&amp;gt;&#10;                    {selectedDate ? `Selected Date - ${selectedDate}` : &amp;quot;Select Appointment Date&amp;quot;}&#10;                  &amp;lt;/p&amp;gt;&#10;                  &amp;lt;div className=&amp;quot;date-picker&amp;quot;&amp;gt;&#10;                    {getNext8Days().map(date =&amp;gt; (&#10;                      &amp;lt;button&#10;                        key={date}&#10;                        className={`btn date-btn ${selectedDate === date ? 'active' : ''}`}&#10;                        onClick={() =&amp;gt; handleDateClick(date)}&#10;                      &amp;gt;&#10;                        {date}&#10;                      &amp;lt;/button&amp;gt;&#10;                    ))}&#10;                  &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;                &amp;lt;div className='calender-time'&amp;gt;&#10;                  &amp;lt;p className=&amp;quot;calender-p&amp;quot;&amp;gt;&#10;                    {selectedTime ? `Selected Time - ${selectedTime}` : &amp;quot;Select Appointment Time&amp;quot;}&#10;                  &amp;lt;/p&amp;gt;&#10;                  &amp;lt;div className=&amp;quot;date-picker&amp;quot;&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                      &amp;lt;p&amp;gt;Morning Time&amp;lt;/p&amp;gt;&#10;                      {generateMorningSlots().map(time =&amp;gt; (&#10;                        &amp;lt;button&#10;                          key={time}&#10;                          className={`btn time-btn ${selectedTime === time ? 'active' : ''}`}&#10;                          onClick={() =&amp;gt; handleTimeClick(time)}&#10;                        &amp;gt;&#10;                          {time}&#10;                        &amp;lt;/button&amp;gt;&#10;                      ))}&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                      &amp;lt;p&amp;gt;Evening Time&amp;lt;/p&amp;gt;&#10;                      {generateEveningSlots().map(time =&amp;gt; (&#10;                        &amp;lt;button&#10;                          key={time}&#10;                          className={`btn time-btn ${selectedTime === time ? 'active' : ''}`}&#10;                          onClick={() =&amp;gt; handleTimeClick(time)}&#10;                        &amp;gt;&#10;                          {time}&#10;                        &amp;lt;/button&amp;gt;&#10;                      ))}&#10;                    &amp;lt;/div&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;              &amp;lt;/div&amp;gt;&#10;            &amp;lt;/div&amp;gt;&#10;          &amp;lt;/div&amp;gt;&#10;          &amp;lt;div className=&amp;quot;appointment-btn&amp;quot;&amp;gt;&#10;            &amp;lt;button onClick={handleBack}&amp;gt;Back&amp;lt;/button&amp;gt;&#10;            &amp;lt;button type=&amp;quot;primary&amp;quot; onClick={handleNext} className=&amp;quot;next&amp;quot;&amp;gt;Next&amp;lt;/button&amp;gt;&#10;          &amp;lt;/div&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;      )}&#10;&#10;      {currentStep === 1 &amp;amp;&amp;amp; (&#10;        &amp;lt;&amp;gt;&#10;          &amp;lt;div className='appointment-schedule'&amp;gt;&#10;            &amp;lt;div className='container-ap'&amp;gt;&#10;              &amp;lt;div className='appointment-form'&amp;gt;&#10;                &amp;lt;form className='ap-form'&amp;gt;&#10;                  &amp;lt;label&amp;gt;Name&amp;lt;/label&amp;gt;&#10;                  &amp;lt;input&#10;                    className='ap-form-input'&#10;                    name=&amp;quot;firstName&amp;quot;&#10;                    value={formValues.firstName}&#10;                    onChange={(event) =&amp;gt; {&#10;                      const inputValue = event.target.value;&#10;                      const regex = /^[A-Za-z]*$/;&#10;                      if (regex.test(inputValue)) {&#10;                        handleInputChange(event);&#10;                      }&#10;                    }}&#10;                    required&#10;                  /&amp;gt;&#10;                  &amp;lt;label&amp;gt;Email&amp;lt;/label&amp;gt;&#10;                  &amp;lt;input&#10;                    className='ap-form-input'&#10;                    type=&amp;quot;email&amp;quot;&#10;                    name=&amp;quot;email&amp;quot;&#10;                    value={formValues.email}&#10;                    onChange={handleInputChange}&#10;                    pattern=&amp;quot;[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}&amp;quot;&#10;                    required&#10;                  /&amp;gt;&#10;                  &amp;lt;label&amp;gt;Mobile&amp;lt;/label&amp;gt;&#10;                  &amp;lt;input&#10;                    className='ap-form-input'&#10;                    name=&amp;quot;phone&amp;quot;&#10;                    value={formValues.phone}&#10;                    onChange={(event) =&amp;gt; {&#10;                      let inputValue = event.target.value;&#10;                      inputValue = inputValue.replace(/\D/g, '');&#10;                      inputValue = inputValue.slice(0, 10);&#10;                      handleInputChange({&#10;                        target: {&#10;                          name: 'phone',&#10;                          value: inputValue&#10;                        }&#10;                      });&#10;                    }}&#10;                    required&#10;                  /&amp;gt;&#10;                  &amp;lt;label&amp;gt;Reason For Visit&amp;lt;/label&amp;gt;&#10;                  &amp;lt;input&#10;                    className='ap-form-input'&#10;                    name=&amp;quot;reasonForVisit&amp;quot;&#10;                    value={formValues.reasonForVisit}&#10;                    onChange={(event) =&amp;gt; {&#10;                      const inputValue = event.target.value;&#10;                      const regex = /^[A-Za-z]*$/;&#10;                      if (regex.test(inputValue)) {&#10;                        handleInputChange(event);&#10;                      }&#10;                    }} required&#10;                  /&amp;gt;&#10;                &amp;lt;/form&amp;gt;&#10;              &amp;lt;/div&amp;gt;&#10;            &amp;lt;/div&amp;gt;&#10;            &amp;lt;div className=&amp;quot;appointment-btn&amp;quot;&amp;gt;&#10;              &amp;lt;button onClick={handlePrev}&amp;gt;Previous&amp;lt;/button&amp;gt;&#10;              &amp;lt;button type=&amp;quot;primary&amp;quot; onClick={handleNext} className=&amp;quot;next&amp;quot;&amp;gt;Next&amp;lt;/button&amp;gt;&#10;            &amp;lt;/div&amp;gt;&#10;          &amp;lt;/div&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;      )}&#10;      {currentStep === 2 &amp;amp;&amp;amp; (&#10;        &amp;lt;&amp;gt;&#10;          &amp;lt;div className='main-div-payment'&amp;gt;&#10;            &amp;lt;div className=&amp;quot;wrapper&amp;quot;&amp;gt;&#10;              &amp;lt;div className=&amp;quot;card-form&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;card-list&amp;quot;&amp;gt;&#10;                  &amp;lt;div className={`card-item ${isCardFlipped ? '-active' : ''}`}&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;card-item__side -front&amp;quot;&amp;gt;&#10;                      &amp;lt;div className={`card-item__focus ${focusElementStyle ? '-active' : ''}`} style={focusElementStyle}&amp;gt;&amp;lt;/div&amp;gt;&#10;                      &amp;lt;div className=&amp;quot;card-item__cover&amp;quot;&amp;gt;&#10;                        &amp;lt;img src={`https://raw.githubusercontent.com/muhammederdem/credit-card-form/master/src/assets/images/${currentCardBackground}.jpeg`} className=&amp;quot;card-item__bg&amp;quot; alt=&amp;quot;Card Background&amp;quot; /&amp;gt;&#10;                      &amp;lt;/div&amp;gt;&#10;                      &amp;lt;div className=&amp;quot;card-item__wrapper&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;card-item__top&amp;quot;&amp;gt;&#10;                          &amp;lt;img src={chip} alt=&amp;quot;Card Chip&amp;quot; className=&amp;quot;card-item__chip&amp;quot; /&amp;gt;&#10;                          &amp;lt;div className=&amp;quot;card-item__type&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                        &amp;lt;label className=&amp;quot;card-item__number&amp;quot;&amp;gt;{cardNumber || '#### #### #### ####'}&amp;lt;/label&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;card-item__content&amp;quot;&amp;gt;&#10;                          &amp;lt;label className=&amp;quot;card-item__info&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;card-item__holder&amp;quot;&amp;gt;Card Holder&amp;lt;/div&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;card-item__name&amp;quot;&amp;gt;{cardName || 'FULL NAME'}&amp;lt;/div&amp;gt;&#10;                          &amp;lt;/label&amp;gt;&#10;                          &amp;lt;div className=&amp;quot;card-item__date&amp;quot;&amp;gt;&#10;                            &amp;lt;label className=&amp;quot;card-item__dateTitle&amp;quot;&amp;gt;Expires&amp;lt;/label&amp;gt;&#10;                            &amp;lt;label className=&amp;quot;card-item__dateItem&amp;quot;&amp;gt;{cardMonth || 'MM'}/{cardYear || 'YY'}&amp;lt;/label&amp;gt;&#10;                          &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                      &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;card-item__side -back&amp;quot;&amp;gt;&#10;                      &amp;lt;div className=&amp;quot;card-item__cover&amp;quot;&amp;gt;&#10;                        &amp;lt;img src={`https://raw.githubusercontent.com/muhammederdem/credit-card-form/master/src/assets/images/${currentCardBackground}.jpeg`} className=&amp;quot;card-item__bg&amp;quot; alt=&amp;quot;Card Background&amp;quot; /&amp;gt;&#10;                      &amp;lt;/div&amp;gt;&#10;                      &amp;lt;div className=&amp;quot;card-item__band&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#10;                      &amp;lt;div className=&amp;quot;card-item__cvv&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;card-item__cvvTitle&amp;quot;&amp;gt;CVV&amp;lt;/div&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;card-item__cvvBand&amp;quot;&amp;gt;{cardCvv}&amp;lt;/div&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;card-item__type&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#10;                      &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;                &amp;lt;div className=&amp;quot;&amp;quot;&amp;gt;&#10;                  &amp;lt;div className=&amp;quot;card-form__inner&amp;quot;&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;card-input&amp;quot;&amp;gt;&#10;                      &amp;lt;label htmlFor=&amp;quot;cardNumber&amp;quot; className=&amp;quot;card-input__label&amp;quot;&amp;gt;Card Number&amp;lt;/label&amp;gt;&#10;                      &amp;lt;input&#10;                        type=&amp;quot;text&amp;quot;&#10;                        id=&amp;quot;cardNumber&amp;quot;&#10;                        className=&amp;quot;card-input__input&amp;quot;&#10;                        ref={cardNumberInput}&#10;                        value={cardNumber}&#10;                        onChange={handleCardNumberChange}&#10;                        onFocus={() =&amp;gt; setFocusElementStyle(cardNumberInput.current.getBoundingClientRect())}&#10;                        onBlur={handleBlur}&#10;                        autoComplete=&amp;quot;off&amp;quot;&#10;                      /&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;card-input&amp;quot;&amp;gt;&#10;                      &amp;lt;label htmlFor=&amp;quot;cardName&amp;quot; className=&amp;quot;card-input__label&amp;quot;&amp;gt;Card Holder&amp;lt;/label&amp;gt;&#10;                      &amp;lt;input&#10;                        type=&amp;quot;text&amp;quot;&#10;                        id=&amp;quot;cardName&amp;quot;&#10;                        className=&amp;quot;card-input__input&amp;quot;&#10;                        ref={cardNameInput}&#10;                        value={cardName}&#10;                        onChange={(event) =&amp;gt; {&#10;                          const inputValue = event.target.value;&#10;                          const regex = /^[A-Za-z\s]*$/;&#10;                          if (regex.test(inputValue)) {&#10;                            handleCardNameChange(event);&#10;                          }&#10;                        }}&#10;                        onFocus={() =&amp;gt; handleFocus(cardNameInput.current.getBoundingClientRect())}&#10;                        onBlur={handleBlur}&#10;                        autoComplete=&amp;quot;off&amp;quot;&#10;                      /&amp;gt;&#10;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;card-form__row&amp;quot;&amp;gt;&#10;                      &amp;lt;div className=&amp;quot;card-form__col&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;card-form__group&amp;quot;&amp;gt;&#10;                          &amp;lt;label htmlFor=&amp;quot;cardMonth&amp;quot; className=&amp;quot;card-input__label&amp;quot;&amp;gt;Expiration Date&amp;lt;/label&amp;gt;&#10;                          &amp;lt;select&#10;                            className=&amp;quot;card-input__input -select&amp;quot;&#10;                            id=&amp;quot;cardMonth&amp;quot;&#10;                            ref={cardMonthInput}&#10;                            value={cardMonth}&#10;                            onChange={handleCardMonthChange}&#10;                            onFocus={() =&amp;gt; handleFocus(cardMonthInput.current.getBoundingClientRect())}&#10;                            onBlur={handleBlur}&#10;                          &amp;gt;&#10;                            &amp;lt;option value=&amp;quot;&amp;quot; disabled&amp;gt;Month&amp;lt;/option&amp;gt;&#10;                            {[...Array(12).keys()].map((n) =&amp;gt; (&#10;                              &amp;lt;option key={n + 1} value={n + 1 &amp;lt; 10 ? '0' + (n + 1) : n + 1}&amp;gt;&#10;                                {n + 1 &amp;lt; 10 ? '0' + (n + 1) : n + 1}&#10;                              &amp;lt;/option&amp;gt;&#10;                            ))}&#10;                          &amp;lt;/select&amp;gt;&#10;                          &amp;lt;select&#10;                            className=&amp;quot;card-input__input -select&amp;quot;&#10;                            id=&amp;quot;cardYear&amp;quot;&#10;                            ref={cardYearInput}&#10;                            value={cardYear}&#10;                            onChange={handleCardYearChange}&#10;                            onFocus={() =&amp;gt; handleFocus(cardYearInput.current.getBoundingClientRect())}&#10;                            onBlur={handleBlur}&#10;                          &amp;gt;&#10;                            &amp;lt;option value=&amp;quot;&amp;quot; disabled&amp;gt;Year&amp;lt;/option&amp;gt;&#10;                            {[...Array(12).keys()].map((n) =&amp;gt; (&#10;                              &amp;lt;option key={minCardYear + n} value={minCardYear + n}&amp;gt;&#10;                                {minCardYear + n}&#10;                              &amp;lt;/option&amp;gt;&#10;                            ))}&#10;                          &amp;lt;/select&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                      &amp;lt;/div&amp;gt;&#10;                      &amp;lt;div className=&amp;quot;card-form__col -cvv&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;card-input&amp;quot;&amp;gt;&#10;                          &amp;lt;label htmlFor=&amp;quot;cardCvv&amp;quot; className=&amp;quot;card-input__label&amp;quot;&amp;gt;CVV&amp;lt;/label&amp;gt;&#10;                          &amp;lt;input&#10;                            type=&amp;quot;text&amp;quot;&#10;                            className=&amp;quot;card-input__input&amp;quot;&#10;                            id=&amp;quot;cardCvv&amp;quot;&#10;                            value={cardCvv}&#10;                            onChange={(event) =&amp;gt; {&#10;                              const inputValue = event.target.value;&#10;                              // Regular expression to match only numbers&#10;                              const regex = /^[0-9]*$/;&#10;                              if (regex.test(inputValue)) {&#10;                                handleCardCvvChange(event);&#10;                              }&#10;                            }}&#10;                            onFocus={() =&amp;gt; flipCard(true)}&#10;                            onBlur={() =&amp;gt; flipCard(false)}&#10;                            autoComplete=&amp;quot;off&amp;quot;&#10;                          /&amp;gt;&#10;&#10;                        &amp;lt;/div&amp;gt;&#10;                      &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;button className=&amp;quot;card-form__button&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;              &amp;lt;/div&amp;gt;&#10;            &amp;lt;/div&amp;gt;&#10;            &amp;lt;div className='appointment-schedule'&amp;gt;&#10;              &amp;lt;div className='container-ap'&amp;gt;&#10;                &amp;lt;div className='appointment-payment'&amp;gt;&#10;                  &amp;lt;div className=&amp;quot;ap-booking-details&amp;quot;&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;booking-item&amp;quot;&amp;gt;&#10;                      &amp;lt;ul className=&amp;quot;booking-date&amp;quot;&amp;gt;&#10;                        &amp;lt;li&amp;gt;Date &amp;lt;span&amp;gt;{selectedDate}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&#10;                        &amp;lt;li&amp;gt;Time &amp;lt;span&amp;gt;{selectedTime}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&#10;                      &amp;lt;/ul&amp;gt;&#10;                      &amp;lt;ul className=&amp;quot;booking-fee&amp;quot;&amp;gt;&#10;                        &amp;lt;li&amp;gt;Consulting Fee &amp;lt;span&amp;gt;$60&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&#10;                        &amp;lt;li&amp;gt;Booking Fee &amp;lt;span&amp;gt;$10&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&#10;                        &amp;lt;li&amp;gt;Vat (Including 15%) &amp;lt;span&amp;gt;$9&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&#10;                      &amp;lt;/ul&amp;gt;&#10;                      &amp;lt;ul className=&amp;quot;booking-total&amp;quot;&amp;gt;&#10;                        &amp;lt;li className=&amp;quot;booking-total-li&amp;quot;&amp;gt;&#10;                          &amp;lt;span&amp;gt;Total&amp;lt;/span&amp;gt;&#10;                          &amp;lt;span className=&amp;quot;total-cost&amp;quot;&amp;gt; $79&amp;lt;/span&amp;gt;&#10;                        &amp;lt;/li&amp;gt;&#10;                      &amp;lt;/ul&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;              &amp;lt;/div&amp;gt;&#10;            &amp;lt;/div&amp;gt;&#10;          &amp;lt;/div&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;      )}&#10;    &amp;lt;/div&amp;gt;&#10;  );&#10;};&#10;&#10;export default AppointmentScheduler;&#10;now i want is when i click Book appointment that doctor_id should be store in appointment table also and also patient_id of user which is currently login in appointment table here is my appointment table data SELECT * FROM `appointments`&#10; Profiling [ Edit inline ] [ Edit ] [ Explain SQL ] [ Create PHP code ] [ Refresh ]&#10;appointment_id&#9;receptionist_id&#9;doctor_id&#9;patient_id&#9;status&#9;notes&#9;created_at&#9;updated_at&#9;fees&#9;appointment_date&#9;appointment_time&#9;time_period&#9;&#10;and here is my login.js code // Login.js&#10;import React, { useState } from &amp;quot;react&amp;quot;;&#10;import { Link, useNavigate } from &amp;quot;react-router-dom&amp;quot;;&#10;import Validation from &amp;quot;./LoginValidation&amp;quot;;&#10;import axios from &amp;quot;axios&amp;quot;;&#10;import { useUser } from &amp;quot;./UserContext&amp;quot;;&#10;&#10;function Login() {&#10;  const [values, setValues] = useState({&#10;    email: &amp;quot;&amp;quot;,&#10;    password: &amp;quot;&amp;quot;,&#10;    role: &amp;quot;Doctor&amp;quot;, // Default role&#10;  });&#10;&#10;  const [errors, setErrors] = useState({});&#10;  const navigate = useNavigate();&#10;  const { login } = useUser(); // Get login function from context&#10;&#10;  const handleInput = (event) =&amp;gt; {&#10;    setValues((prev) =&amp;gt; ({ ...prev, [event.target.name]: event.target.value }));&#10;  };&#10;&#10;  const handleSubmit = (event) =&amp;gt; {&#10;    event.preventDefault();&#10;    const validationErrors = Validation(values);&#10;    setErrors(validationErrors);&#10;&#10;    if (Object.keys(validationErrors).length === 0) {&#10;      axios&#10;        .post(&amp;quot;http://localhost:8081/login&amp;quot;, values)&#10;        .then((res) =&amp;gt; {&#10;          if (res.data.status === &amp;quot;Success&amp;quot;) {&#10;            // Ensure the structure of the user object is correct&#10;            login(res.data.user);&#10;&#10;            if (values.role === &amp;quot;Doctor&amp;quot;) {&#10;              navigate(&amp;quot;/doctor-home&amp;quot;);&#10;            } else if (values.role === &amp;quot;Receptionist&amp;quot;) {&#10;              navigate(&amp;quot;/receptionist-home&amp;quot;);&#10;            } else {&#10;              navigate(&amp;quot;/home&amp;quot;);&#10;            }&#10;          } else {&#10;            alert(&amp;quot;No record exist&amp;quot;);&#10;          }&#10;        })&#10;        .catch((err) =&amp;gt; console.log(err));&#10;    }&#10;  };&#10;&#10;  return (&#10;    &amp;lt;div className=&amp;quot;d-flex justify-content-center align-items-center vh-100&amp;quot;&amp;gt;&#10;      &amp;lt;div className=&amp;quot;bg-white p-3 rounded w-25&amp;quot;&amp;gt;&#10;        &amp;lt;h2&amp;gt;Sign In&amp;lt;/h2&amp;gt;&#10;        &amp;lt;form onSubmit={handleSubmit}&amp;gt;&#10;          &amp;lt;div className=&amp;quot;mb-3&amp;quot;&amp;gt;&#10;            &amp;lt;label htmlFor=&amp;quot;email&amp;quot;&amp;gt;Email&amp;lt;/label&amp;gt;&#10;            &amp;lt;input&#10;              type=&amp;quot;email&amp;quot;&#10;              placeholder=&amp;quot;Enter Email&amp;quot;&#10;              name=&amp;quot;email&amp;quot;&#10;              onChange={handleInput}&#10;              className=&amp;quot;form-control rounded-0&amp;quot;&#10;            /&amp;gt;&#10;            {errors.email &amp;amp;&amp;amp; (&#10;              &amp;lt;span className=&amp;quot;text-danger&amp;quot;&amp;gt;{errors.email}&amp;lt;/span&amp;gt;&#10;            )}&#10;          &amp;lt;/div&amp;gt;&#10;          &amp;lt;div className=&amp;quot;mb-3&amp;quot;&amp;gt;&#10;            &amp;lt;label htmlFor=&amp;quot;password&amp;quot;&amp;gt;Password&amp;lt;/label&amp;gt;&#10;            &amp;lt;input&#10;              type=&amp;quot;password&amp;quot;&#10;              name=&amp;quot;password&amp;quot;&#10;              placeholder=&amp;quot;Enter Password&amp;quot;&#10;              onChange={handleInput}&#10;              className=&amp;quot;form-control rounded-0&amp;quot;&#10;            /&amp;gt;&#10;            {errors.password &amp;amp;&amp;amp; (&#10;              &amp;lt;span className=&amp;quot;text-danger&amp;quot;&amp;gt;{errors.password}&amp;lt;/span&amp;gt;&#10;            )}&#10;          &amp;lt;/div&amp;gt;&#10;          &amp;lt;div className=&amp;quot;mb-3&amp;quot;&amp;gt;&#10;            &amp;lt;label htmlFor=&amp;quot;role&amp;quot;&amp;gt;Role&amp;lt;/label&amp;gt;&#10;            &amp;lt;select&#10;              name=&amp;quot;role&amp;quot;&#10;              onChange={handleInput}&#10;              className=&amp;quot;form-control rounded-0&amp;quot;&#10;            &amp;gt;&#10;              &amp;lt;option value=&amp;quot;Doctor&amp;quot;&amp;gt;Doctor&amp;lt;/option&amp;gt;&#10;              &amp;lt;option value=&amp;quot;Patient&amp;quot;&amp;gt;Patient&amp;lt;/option&amp;gt;&#10;              &amp;lt;option value=&amp;quot;Receptionist&amp;quot;&amp;gt;Receptionist&amp;lt;/option&amp;gt;&#10;            &amp;lt;/select&amp;gt;&#10;          &amp;lt;/div&amp;gt;&#10;          &amp;lt;button type=&amp;quot;submit&amp;quot; className=&amp;quot;btn btn-success w-100&amp;quot;&amp;gt;&#10;            &amp;lt;strong&amp;gt;Log In&amp;lt;/strong&amp;gt;&#10;          &amp;lt;/button&amp;gt;&#10;          &amp;lt;p&amp;gt;You agree to TnC&amp;lt;/p&amp;gt;&#10;          &amp;lt;Link to=&amp;quot;/signup&amp;quot; className=&amp;quot;btn btn-default border w-100 bg-light&amp;quot;&amp;gt;&#10;            &amp;lt;strong&amp;gt;Create Account&amp;lt;/strong&amp;gt;&#10;          &amp;lt;/Link&amp;gt;&#10;          &amp;lt;br /&amp;gt;&#10;          &amp;lt;br /&amp;gt;&#10;          &amp;lt;Link&#10;            to=&amp;quot;/forgotpassword&amp;quot;&#10;            className=&amp;quot;btn btn-default border w-100 bg-light&amp;quot;&#10;          &amp;gt;&#10;            &amp;lt;strong&amp;gt;Forgot Password&amp;lt;/strong&amp;gt;&#10;          &amp;lt;/Link&amp;gt;&#10;        &amp;lt;/form&amp;gt;&#10;      &amp;lt;/div&amp;gt;&#10;    &amp;lt;/div&amp;gt;&#10;  );&#10;}&#10;&#10;export default Login;&#10;and here is my server.js code const express = require(&amp;quot;express&amp;quot;);&#10;const mysql = require(&amp;quot;mysql2&amp;quot;);&#10;const cors = require(&amp;quot;cors&amp;quot;);&#10;const dotenv = require(&amp;quot;dotenv&amp;quot;);&#10;&#10;// Load environment variables from .env file&#10;dotenv.config();&#10;&#10;const app = express();&#10;const port = process.env.PORT || 8081;&#10;&#10;app.use(cors());&#10;app.use(express.json());&#10;&#10;// Create a MySQL connection using environment variables&#10;const db = mysql.createConnection({&#10;  host: process.env.DB_HOST,&#10;  user: process.env.DB_USER,&#10;  password: process.env.DB_PASSWORD,&#10;  database: process.env.DB_DATABASE,&#10;});&#10;&#10;db.connect((err) =&amp;gt; {&#10;  if (err) {&#10;    console.error(&amp;quot;Error connecting to the database:&amp;quot;, err);&#10;  } else {&#10;    console.log(&amp;quot;Connected to the MySQL database.&amp;quot;);&#10;  }&#10;});&#10;&#10;const doctorRoutes = require(&amp;quot;./routes/doctorRoutes&amp;quot;);&#10;const patientRoutes = require(&amp;quot;./routes/patinetRoutes&amp;quot;);&#10;&#10;app.use(&amp;quot;/doctors&amp;quot;, doctorRoutes);&#10;app.use(&amp;quot;/patients&amp;quot;, patientRoutes);&#10;&#10;app.post(&amp;quot;/login&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;SELECT * FROM login WHERE `email`=? AND `password`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.email, req.body.password, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Database error&amp;quot; });&#10;      }&#10;      if (data.length &amp;gt; 0) {&#10;        const user = data[0];&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          user: {&#10;            login_id: user.login_id,&#10;            name: user.name,&#10;            role: user.role,&#10;            email: user.email,&#10;          },&#10;        });&#10;      } else {&#10;        return res.json({ status: &amp;quot;Failed&amp;quot;, message: &amp;quot;Invalid credentials&amp;quot; });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;&#10;app.post(&amp;quot;/signup&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;INSERT INTO login (`name`, `email`, `password`, `role`) VALUES (?)&amp;quot;;&#10;  const values = [&#10;    req.body.name,&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Error during signup&amp;quot; });&#10;    }&#10;    return res.json({ status: &amp;quot;Success&amp;quot;, message: &amp;quot;Signup successful&amp;quot; });&#10;  });&#10;});&#10;&#10;app.post(&amp;quot;/forgotpassword&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;UPDATE login SET `password`=? WHERE `email`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.password, req.body.email, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Error executing query:&amp;quot;, err);&#10;        return res.json({&#10;          status: &amp;quot;Error&amp;quot;,&#10;          message: &amp;quot;Error updating password&amp;quot;,&#10;        });&#10;      }&#10;      if (data.affectedRows &amp;gt; 0) {&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          message: &amp;quot;Password updated successfully&amp;quot;,&#10;        });&#10;      } else {&#10;        return res.json({&#10;          status: &amp;quot;Failed&amp;quot;,&#10;          message: &amp;quot;No user found with provided details&amp;quot;,&#10;        });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;// Fetch patient details by email&#10;app.get(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const sql = &amp;quot;SELECT * FROM patient WHERE email = ?&amp;quot;;&#10;&#10;  db.query(sql, [email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error fetching patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.length === 0) {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;&#10;    const patient = data[0];&#10;    return res.json(patient);&#10;  });&#10;});&#10;&#10;// Update patient details by email&#10;app.put(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const { name, email: newEmail, number, adhar_no, dob, gender, insurance, address } = req.body;&#10;&#10;  const sql = &amp;quot;UPDATE patient SET name =?, email =?, number =?, adhar_no =?, dob =?, gender =?, insurance =?, address =? WHERE email =?&amp;quot;;&#10;&#10;  db.query(sql, [name, newEmail, number, adhar_no, dob, gender, insurance, address, email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;    } else {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;  });&#10;});&#10;&#10;app.use(&amp;quot;/patients&amp;quot;, patientRoutes);&#10;&#10;app.listen(port, () =&amp;gt; console.log(`Server running on port ${port}`));&#10;" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="To store the `doctor_id` and `patient_id` in the `appointments` table when the &quot;Book Appointment&quot; button is clicked, you'll need to make an API call to your server from the `DoctorSearch.js` component. Here's how you can modify your code:&#10;&#10;1. In your `server.js` file, add a new route to handle the appointment creation:&#10;&#10;```javascript&#10;app.post('/appointments', (req, res) =&gt; {&#10;  const { doctor_id, patient_id, appointment_date, appointment_time } = req.body;&#10;&#10;  const sql = 'INSERT INTO appointments (doctor_id, patient_id, appointment_date, appointment_time) VALUES (?, ?, ?, ?)';&#10;  const values = [doctor_id, patient_id, appointment_date, appointment_time];&#10;&#10;  db.query(sql, values, (err, result) =&gt; {&#10;    if (err) {&#10;      console.error('Error creating appointment:', err);&#10;      return res.status(500).json({ error: 'Internal Server Error' });&#10;    }&#10;&#10;    return res.json({ message: 'Appointment created successfully' });&#10;  });&#10;});&#10;```&#10;&#10;2. In your `DoctorSearch.js` component, import `axios` and modify the `handleBookAppointment` function to make an API call to create the appointment:&#10;&#10;```javascript&#10;import axios from 'axios';&#10;&#10;const handleBookAppointment = async (doctorId) =&gt; {&#10;  if (doctorId) {&#10;    try {&#10;      const user = JSON.parse(localStorage.getItem('user'));&#10;      const patientId = user.login_id;&#10;&#10;      const appointmentData = {&#10;        doctor_id: doctorId,&#10;        patient_id: patientId,&#10;        appointment_date: selectedDate,&#10;        appointment_time: selectedTime,&#10;      };&#10;&#10;      await axios.post('http://localhost:8081/appointments', appointmentData);&#10;      localStorage.setItem('doctor_id', doctorId);&#10;      navigate('/appointment');&#10;    } catch (error) {&#10;      console.error('Error creating appointment:', error);&#10;    }&#10;  } else {&#10;    console.error('Doctor ID is undefined');&#10;  }&#10;};&#10;```&#10;&#10;In the modified `handleBookAppointment` function, we're doing the following:&#10;&#10;1. Retrieving the `user` object from the local storage and extracting the `patientId` from it.&#10;2. Creating an `appointmentData` object with the necessary data (`doctor_id`, `patient_id`, `appointment_date`, and `appointment_time`).&#10;3. Making a POST request to the `/appointments` endpoint on the server with the `appointmentData` object.&#10;4. If the appointment creation is successful, storing the `doctor_id` in the local storage and navigating to the `/appointment` route.&#10;&#10;Make sure to import `axios` at the top of the `DoctorSearch.js` file:&#10;&#10;```javascript&#10;import axios from 'axios';&#10;```&#10;&#10;With these changes, when the &quot;Book Appointment&quot; button is clicked, the `doctor_id` and `patient_id` (based on the currently logged-in user) will be stored in the `appointments` table along with the selected appointment date and time.&#10;&#10;Note: You'll need to ensure that the `user` object is correctly stored in the local storage after successful login. In your `Login.js` component, you can store the `user` object in the local storage after receiving the successful response from the server:&#10;&#10;```javascript&#10;axios&#10;  .post(&quot;http://localhost:8081/login&quot;, values)&#10;  .then((res) =&gt; {&#10;    if (res.data.status === &quot;Success&quot;) {&#10;      // Store the user object in local storage&#10;      localStorage.setItem('user', JSON.stringify(res.data.user));&#10;&#10;      // Ensure the structure of the user object is correct&#10;      login(res.data.user);&#10;&#10;      // Navigate based on the user's role&#10;      if (values.role === &quot;Doctor&quot;) {&#10;        navigate(&quot;/doctor-home&quot;);&#10;      } else if (values.role === &quot;Receptionist&quot;) {&#10;        navigate(&quot;/receptionist-home&quot;);&#10;      } else {&#10;        navigate(&quot;/home&quot;);&#10;      }&#10;    } else {&#10;      alert(&quot;No record exist&quot;);&#10;    }&#10;  })&#10;  .catch((err) =&gt; console.log(err));&#10;```&#10;&#10;With this change, the `user` object will be available in the local storage, and you can retrieve the `patientId` from it in the `handleBookAppointment` function." />
                    </message>
                    <message>
                      <speaker value="HUMAN" />
                      <text value="i am getting this error Server running on port 8081&#10;Connected to the MySQL database.&#10;Connected to the MySQL database.&#10;Error creating appointment: Error: The time slot is not available&#10;    at Packet.asError (A:\quater1\quater\backend\node_modules\mysql2\lib\packets\packet.js:728:17)&#10;    at Query.execute (A:\quater1\quater\backend\node_modules\mysql2\lib\commands\command.js:29:26)&#10;    at Connection.handlePacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:481:34)&#10;    at PacketParser.onPacket (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:97:12)&#10;    at PacketParser.executeStart (A:\quater1\quater\backend\node_modules\mysql2\lib\packet_parser.js:75:16)&#10;    at Socket.&amp;lt;anonymous&amp;gt; (A:\quater1\quater\backend\node_modules\mysql2\lib\connection.js:104:25)&#10;    at Socket.emit (node:events:514:28)&#10;    at addChunk (node:internal/streams/readable:545:12)&#10;    at readableAddChunkPushByteMode (node:internal/streams/readable:495:3)&#10;    at Readable.push (node:internal/streams/readable:375:5) {&#10;  code: 'ER_SIGNAL_EXCEPTION',&#10;  errno: 1644,&#10;  sqlState: '45000',&#10;  sqlMessage: 'The time slot is not available',&#10;  sql: &amp;quot;INSERT INTO appointments (doctor_id, patient_id, appointment_date, appointment_time) VALUES ('2', 6, 'Jun 6, 2024', '03:00 PM')&amp;quot;&#10;}&#10;here is my appointment.js code import React, { useState, useEffect, useRef } from 'react';&#10;import { Steps } from 'antd';&#10;import { useNavigate } from 'react-router-dom';&#10;import axios from 'axios';&#10;import chip from './images/chip.png'&#10;import './App.css';&#10;&#10;const { Step } = Steps;&#10;&#10;const AppointmentScheduler = () =&amp;gt; {&#10;  const [currentStep, setCurrentStep] = useState(0);&#10;  const [selectedDate, setSelectedDate] = useState(null);&#10;  const [selectedTime, setSelectedTime] = useState(null);&#10;&#10;  const navigate = useNavigate();&#10;  const [formValues, setFormValues] = useState({&#10;    firstName: '',&#10;    lastName: '',&#10;    email: '',&#10;    phone: '',&#10;    reasonForVisit: '',&#10;    description: '',&#10;    address: '',&#10;  });&#10;&#10;  const handleDateClick = (date) =&amp;gt; {&#10;    setSelectedDate(date);&#10;  };&#10;&#10;  const handleTimeClick = (time) =&amp;gt; {&#10;    setSelectedTime(time);&#10;  };&#10;&#10;  const handleInputChange = (e) =&amp;gt; {&#10;    const { name, value } = e.target;&#10;    setFormValues({&#10;      ...formValues,&#10;      [name]: value,&#10;    });&#10;  };&#10;&#10;const handleNext = async () =&amp;gt; {&#10;  // Retrieve patient data from localStorage&#10;  const user = JSON.parse(localStorage.getItem('user'));&#10;  const patientId = user?.login_id;&#10;  const name = user?.name;&#10;  const email = user?.email;&#10;&#10;  // Retrieve doctor_id from localStorage&#10;  const selectedDoctorId = localStorage.getItem('doctor_id');&#10;&#10;  if (!patientId) {&#10;    console.error('Patient ID not found.');&#10;    // Handle the case where patient ID is not available&#10;    return;&#10;  }&#10;&#10;  if (!selectedDoctorId) {&#10;    console.error('Doctor ID not found.');&#10;    // Handle the case where doctor ID is not available&#10;    return;&#10;  }&#10;&#10;  if (!selectedDate || !selectedTime) {&#10;    alert(&amp;quot;Please select both a date and a time before proceeding.&amp;quot;);&#10;    return;&#10;  }&#10;&#10;  try {&#10;    // Send form values along with selected date, time, doctor ID, and patient ID to the backend&#10;    await axios.post('http://localhost:8081/appointments', {&#10;      doctor_id: selectedDoctorId,&#10;      receptionist_id: 12,&#10;      patient_id: patientId,&#10;      status: 'pending',&#10;      notes: &amp;quot;Patient needs a follow-up.&amp;quot;,&#10;      fees: 10,&#10;      appointment_date: selectedDate,&#10;      appointment_time: selectedTime,&#10;      time_period: &amp;quot;30 minutes&amp;quot;,&#10;      patient_name: name,&#10;      patient_email: email&#10;    });&#10;    setCurrentStep(currentStep + 1);&#10;  } catch (error) {&#10;    console.error('Error creating appointment:', error);&#10;    // Handle error here&#10;  }&#10;};&#10;&#10;&#10;  const handlePrev = () =&amp;gt; {&#10;    setCurrentStep(currentStep - 1);&#10;  };&#10;&#10;  const handleBack = () =&amp;gt; {&#10;    navigate('/doctors');&#10;  }&#10;&#10;  const getNext8Days = () =&amp;gt; {&#10;    const dates = [];&#10;    for (let i = 0; i &amp;lt; 8; i++) {&#10;      const currentDate = new Date();&#10;      currentDate.setDate(currentDate.getDate() + i);&#10;      const formattedDate = currentDate.toLocaleDateString('en-US', {&#10;        year: 'numeric',&#10;        month: 'short',&#10;        day: 'numeric'&#10;      });&#10;      dates.push(formattedDate);&#10;    }&#10;    return dates;&#10;  };&#10;&#10;  const generateMorningSlots = () =&amp;gt; {&#10;    return ['09:00 AM', '10:00 AM', '11:00 AM', '12:00 PM', '01:00 PM'];&#10;  };&#10;  const generateEveningSlots = () =&amp;gt; {&#10;    return ['03:00 PM', '04:00 PM', '05:00 PM', '06:00 PM', '07:00 PM'];&#10;  };&#10;&#10;  const [currentCardBackground, setCurrentCardBackground] = useState(Math.floor(Math.random() * 25 + 1));&#10;  const [cardName, setCardName] = useState('');&#10;  const [cardNumber, setCardNumber] = useState('');&#10;  const [cardMonth, setCardMonth] = useState('');&#10;  const [cardYear, setCardYear] = useState('');&#10;  const [cardCvv, setCardCvv] = useState('');&#10;  const [isCardFlipped, setIsCardFlipped] = useState(false);&#10;  const [focusElementStyle, setFocusElementStyle] = useState(null);&#10;&#10;  const cardNumberInput = useRef(null);&#10;  const cardNameInput = useRef(null);&#10;  const cardMonthInput = useRef(null);&#10;  const cardYearInput = useRef(null);&#10;&#10;  useEffect(() =&amp;gt; {&#10;    if (cardNumberInput.current) {&#10;      setFocusElementStyle(cardNumberInput.current.getBoundingClientRect());&#10;    }&#10;  }, []);&#10;&#10;  const minCardYear = new Date().getFullYear();&#10;&#10;  const handleCardNumberChange = (e) =&amp;gt; {&#10;    let { value } = e.target;&#10;    value = value.replace(/\D/g, '').substring(0, 16);&#10;    value = value.replace(/(.{4})/g, '$1 ').trim();&#10;    setCardNumber(value);&#10;  };&#10;&#10;  const handleCardNameChange = (e) =&amp;gt; {&#10;    const { value } = e.target;&#10;    setCardName(value);&#10;  };&#10;&#10;  const handleCardMonthChange = (e) =&amp;gt; {&#10;    setCardMonth(e.target.value);&#10;  };&#10;&#10;  const handleCardYearChange = (e) =&amp;gt; {&#10;    setCardYear(e.target.value);&#10;  };&#10;&#10;  const handleCardCvvChange = (e) =&amp;gt; {&#10;    let { value } = e.target;&#10;    value = value.substring(0, 3);&#10;    setCardCvv(value);&#10;  };&#10;&#10;  const flipCard = (status) =&amp;gt; {&#10;    setIsCardFlipped(status);&#10;  };&#10;&#10;  const handleFocus = (position) =&amp;gt; {&#10;    setFocusElementStyle(position);&#10;  };&#10;&#10;  const handleBlur = () =&amp;gt; {&#10;    setFocusElementStyle(null);&#10;  };&#10;&#10;  return (&#10;    &amp;lt;div className=&amp;quot;container&amp;quot; style={{ marginBottom: '5rem', marginTop: '2rem' }}&amp;gt;&#10;      &amp;lt;Steps current={currentStep}&amp;gt;&#10;        &amp;lt;Step title=&amp;quot;Select Appointment Date &amp;amp; Time&amp;quot; /&amp;gt;&#10;        &amp;lt;Step title=&amp;quot;Patient Information&amp;quot; /&amp;gt;&#10;        &amp;lt;Step title=&amp;quot;Payment&amp;quot; /&amp;gt;&#10;      &amp;lt;/Steps&amp;gt;&#10;&#10;      {currentStep === 0 &amp;amp;&amp;amp; (&#10;        &amp;lt;&amp;gt;&#10;          &amp;lt;div className='appointment-schedule'&amp;gt;&#10;            &amp;lt;div className='container-ap'&amp;gt;&#10;              &amp;lt;div className='info-part'&amp;gt;&#10;                &amp;lt;p className='info-head'&amp;gt; Would you like to schedule an Interview? Pick a Date &amp;amp; Time &amp;lt;/p&amp;gt;&#10;                &amp;lt;div className='info-box'&amp;gt;&#10;                  &amp;lt;div className='info-item'&amp;gt;&#10;                    &amp;lt;svg stroke=&amp;quot;currentColor&amp;quot; fill=&amp;quot;currentColor&amp;quot; strokeWidth=&amp;quot;0&amp;quot; viewBox=&amp;quot;0 0 512 512&amp;quot; className=&amp;quot;icon&amp;quot; height=&amp;quot;1em&amp;quot; width=&amp;quot;1em&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;&#10;                      &amp;lt;path d=&amp;quot;M320 336c0 8.84-7.16 16-16 16h-96c-8.84 0-16-7.16-16-16v-48H0v144c0 25.6 22.4 48 48 48h416c25.6 0 48-22.4 48-48V288H320v48zm144-208h-80V80c0-25.6-22.4-48-48-48H176c-25.6 0-48 22.4-48 48v48H48c-25.6 0-48 22.4-48 48v80h512v-80c0-25.6-22.4-48-48-48zm-144 0H192V96h128v32z&amp;quot;&amp;gt;&amp;lt;/path&amp;gt;&#10;                    &amp;lt;/svg&amp;gt;&#10;                    &amp;lt;p&amp;gt;With Doctor&amp;lt;/p&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                  &amp;lt;div className='info-item'&amp;gt;&#10;                    &amp;lt;svg stroke=&amp;quot;currentColor&amp;quot; fill=&amp;quot;currentColor&amp;quot; strokeWidth=&amp;quot;0&amp;quot; viewBox=&amp;quot;0 0 512 512&amp;quot; className=&amp;quot;icon&amp;quot; height=&amp;quot;1em&amp;quot; width=&amp;quot;1em&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;&#10;                      &amp;lt;path d=&amp;quot;M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z&amp;quot;&amp;gt;&amp;lt;/path&amp;gt;&#10;                    &amp;lt;/svg&amp;gt;&#10;                    &amp;lt;p&amp;gt;30 Min&amp;lt;/p&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                  &amp;lt;div className='info-item'&amp;gt;&#10;                    &amp;lt;svg stroke=&amp;quot;currentColor&amp;quot; fill=&amp;quot;currentColor&amp;quot; strokeWidth=&amp;quot;0&amp;quot; viewBox=&amp;quot;0 0 512 512&amp;quot; className=&amp;quot;icon&amp;quot; height=&amp;quot;1em&amp;quot; width=&amp;quot;1em&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;&#10;                      &amp;lt;path d=&amp;quot;M444.52 3.52L28.74 195.42c-47.97 22.39-31.98 92.75 19.19 92.75h175.91v175.91c0 51.17 70.36 67.17 92.75 19.19l191.9-415.78c15.99-38.39-25.59-79.97-63.97-63.97z&amp;quot;&amp;gt;&amp;lt;/path&amp;gt;&#10;                    &amp;lt;/svg&amp;gt;&#10;                    &amp;lt;p&amp;gt;Sylhet, Bangladesh&amp;lt;br /&amp;gt;&amp;lt;span className=&amp;quot;form-text&amp;quot;&amp;gt;1020BD, Amertam, NorthEast, Srimongol&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                  &amp;lt;div className='info-item'&amp;gt;&#10;                    &amp;lt;svg stroke=&amp;quot;currentColor&amp;quot; fill=&amp;quot;currentColor&amp;quot; strokeWidth=&amp;quot;0&amp;quot; viewBox=&amp;quot;0 0 512 512&amp;quot; className=&amp;quot;icon&amp;quot; height=&amp;quot;1em&amp;quot; width=&amp;quot;1em&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;&#10;                      &amp;lt;path d=&amp;quot;M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.24-28.239 74.301-28.069 102.325.51 27.75 28.301 26.872 73.935-1.154 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.508 13.905 17.455 20.446 27.294 10.606l37.106-37.106c59.26-59.26 59.26-155.7-.001-214.961z&amp;quot;&amp;gt;&amp;lt;/path&amp;gt;&#10;                    &amp;lt;/svg&amp;gt;&#10;                    &amp;lt;p&amp;gt;Zoom Meeting&amp;lt;/p&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                  &amp;lt;div className='info-item'&amp;gt;&#10;                    &amp;lt;svg stroke=&amp;quot;currentColor&amp;quot; fill=&amp;quot;currentColor&amp;quot; stroke-width=&amp;quot;0&amp;quot; viewBox=&amp;quot;0 0 448 512&amp;quot; class=&amp;quot;icon&amp;quot; height=&amp;quot;1em&amp;quot; width=&amp;quot;1em&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;&amp;lt;path d=&amp;quot;M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm320-196c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM192 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40zM64 268c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zm0 128c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z&amp;quot;&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;&#10;                    &amp;lt;p&amp;gt;Date, Time&amp;lt;/p&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;              &amp;lt;/div&amp;gt;&#10;              &amp;lt;div className='calender-div'&amp;gt;&#10;                &amp;lt;div className='calender-date'&amp;gt;&#10;                  &amp;lt;p className=&amp;quot;calender-p&amp;quot;&amp;gt;&#10;                    {selectedDate ? `Selected Date - ${selectedDate}` : &amp;quot;Select Appointment Date&amp;quot;}&#10;                  &amp;lt;/p&amp;gt;&#10;                  &amp;lt;div className=&amp;quot;date-picker&amp;quot;&amp;gt;&#10;                    {getNext8Days().map(date =&amp;gt; (&#10;                      &amp;lt;button&#10;                        key={date}&#10;                        className={`btn date-btn ${selectedDate === date ? 'active' : ''}`}&#10;                        onClick={() =&amp;gt; handleDateClick(date)}&#10;                      &amp;gt;&#10;                        {date}&#10;                      &amp;lt;/button&amp;gt;&#10;                    ))}&#10;                  &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;                &amp;lt;div className='calender-time'&amp;gt;&#10;                  &amp;lt;p className=&amp;quot;calender-p&amp;quot;&amp;gt;&#10;                    {selectedTime ? `Selected Time - ${selectedTime}` : &amp;quot;Select Appointment Time&amp;quot;}&#10;                  &amp;lt;/p&amp;gt;&#10;                  &amp;lt;div className=&amp;quot;date-picker&amp;quot;&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                      &amp;lt;p&amp;gt;Morning Time&amp;lt;/p&amp;gt;&#10;                      {generateMorningSlots().map(time =&amp;gt; (&#10;                        &amp;lt;button&#10;                          key={time}&#10;                          className={`btn time-btn ${selectedTime === time ? 'active' : ''}`}&#10;                          onClick={() =&amp;gt; handleTimeClick(time)}&#10;                        &amp;gt;&#10;                          {time}&#10;                        &amp;lt;/button&amp;gt;&#10;                      ))}&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div&amp;gt;&#10;                      &amp;lt;p&amp;gt;Evening Time&amp;lt;/p&amp;gt;&#10;                      {generateEveningSlots().map(time =&amp;gt; (&#10;                        &amp;lt;button&#10;                          key={time}&#10;                          className={`btn time-btn ${selectedTime === time ? 'active' : ''}`}&#10;                          onClick={() =&amp;gt; handleTimeClick(time)}&#10;                        &amp;gt;&#10;                          {time}&#10;                        &amp;lt;/button&amp;gt;&#10;                      ))}&#10;                    &amp;lt;/div&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;              &amp;lt;/div&amp;gt;&#10;            &amp;lt;/div&amp;gt;&#10;          &amp;lt;/div&amp;gt;&#10;          &amp;lt;div className=&amp;quot;appointment-btn&amp;quot;&amp;gt;&#10;            &amp;lt;button onClick={handleBack}&amp;gt;Back&amp;lt;/button&amp;gt;&#10;            &amp;lt;button type=&amp;quot;primary&amp;quot; onClick={handleNext} className=&amp;quot;next&amp;quot;&amp;gt;Next&amp;lt;/button&amp;gt;&#10;          &amp;lt;/div&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;      )}&#10;&#10;      {currentStep === 1 &amp;amp;&amp;amp; (&#10;        &amp;lt;&amp;gt;&#10;          &amp;lt;div className='appointment-schedule'&amp;gt;&#10;            &amp;lt;div className='container-ap'&amp;gt;&#10;              &amp;lt;div className='appointment-form'&amp;gt;&#10;                &amp;lt;form className='ap-form'&amp;gt;&#10;                  &amp;lt;label&amp;gt;Name&amp;lt;/label&amp;gt;&#10;                  &amp;lt;input&#10;                    className='ap-form-input'&#10;                    name=&amp;quot;firstName&amp;quot;&#10;                    value={formValues.firstName}&#10;                    onChange={(event) =&amp;gt; {&#10;                      const inputValue = event.target.value;&#10;                      const regex = /^[A-Za-z]*$/;&#10;                      if (regex.test(inputValue)) {&#10;                        handleInputChange(event);&#10;                      }&#10;                    }}&#10;                    required&#10;                  /&amp;gt;&#10;                  &amp;lt;label&amp;gt;Email&amp;lt;/label&amp;gt;&#10;                  &amp;lt;input&#10;                    className='ap-form-input'&#10;                    type=&amp;quot;email&amp;quot;&#10;                    name=&amp;quot;email&amp;quot;&#10;                    value={formValues.email}&#10;                    onChange={handleInputChange}&#10;                    pattern=&amp;quot;[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}&amp;quot;&#10;                    required&#10;                  /&amp;gt;&#10;                  &amp;lt;label&amp;gt;Mobile&amp;lt;/label&amp;gt;&#10;                  &amp;lt;input&#10;                    className='ap-form-input'&#10;                    name=&amp;quot;phone&amp;quot;&#10;                    value={formValues.phone}&#10;                    onChange={(event) =&amp;gt; {&#10;                      let inputValue = event.target.value;&#10;                      inputValue = inputValue.replace(/\D/g, '');&#10;                      inputValue = inputValue.slice(0, 10);&#10;                      handleInputChange({&#10;                        target: {&#10;                          name: 'phone',&#10;                          value: inputValue&#10;                        }&#10;                      });&#10;                    }}&#10;                    required&#10;                  /&amp;gt;&#10;                  &amp;lt;label&amp;gt;Reason For Visit&amp;lt;/label&amp;gt;&#10;                  &amp;lt;input&#10;                    className='ap-form-input'&#10;                    name=&amp;quot;reasonForVisit&amp;quot;&#10;                    value={formValues.reasonForVisit}&#10;                    onChange={(event) =&amp;gt; {&#10;                      const inputValue = event.target.value;&#10;                      const regex = /^[A-Za-z]*$/;&#10;                      if (regex.test(inputValue)) {&#10;                        handleInputChange(event);&#10;                      }&#10;                    }} required&#10;                  /&amp;gt;&#10;                &amp;lt;/form&amp;gt;&#10;              &amp;lt;/div&amp;gt;&#10;            &amp;lt;/div&amp;gt;&#10;            &amp;lt;div className=&amp;quot;appointment-btn&amp;quot;&amp;gt;&#10;              &amp;lt;button onClick={handlePrev}&amp;gt;Previous&amp;lt;/button&amp;gt;&#10;              &amp;lt;button type=&amp;quot;primary&amp;quot; onClick={handleNext} className=&amp;quot;next&amp;quot;&amp;gt;Next&amp;lt;/button&amp;gt;&#10;            &amp;lt;/div&amp;gt;&#10;          &amp;lt;/div&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;      )}&#10;      {currentStep === 2 &amp;amp;&amp;amp; (&#10;        &amp;lt;&amp;gt;&#10;          &amp;lt;div className='main-div-payment'&amp;gt;&#10;            &amp;lt;div className=&amp;quot;wrapper&amp;quot;&amp;gt;&#10;              &amp;lt;div className=&amp;quot;card-form&amp;quot;&amp;gt;&#10;                &amp;lt;div className=&amp;quot;card-list&amp;quot;&amp;gt;&#10;                  &amp;lt;div className={`card-item ${isCardFlipped ? '-active' : ''}`}&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;card-item__side -front&amp;quot;&amp;gt;&#10;                      &amp;lt;div className={`card-item__focus ${focusElementStyle ? '-active' : ''}`} style={focusElementStyle}&amp;gt;&amp;lt;/div&amp;gt;&#10;                      &amp;lt;div className=&amp;quot;card-item__cover&amp;quot;&amp;gt;&#10;                        &amp;lt;img src={`https://raw.githubusercontent.com/muhammederdem/credit-card-form/master/src/assets/images/${currentCardBackground}.jpeg`} className=&amp;quot;card-item__bg&amp;quot; alt=&amp;quot;Card Background&amp;quot; /&amp;gt;&#10;                      &amp;lt;/div&amp;gt;&#10;                      &amp;lt;div className=&amp;quot;card-item__wrapper&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;card-item__top&amp;quot;&amp;gt;&#10;                          &amp;lt;img src={chip} alt=&amp;quot;Card Chip&amp;quot; className=&amp;quot;card-item__chip&amp;quot; /&amp;gt;&#10;                          &amp;lt;div className=&amp;quot;card-item__type&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                        &amp;lt;label className=&amp;quot;card-item__number&amp;quot;&amp;gt;{cardNumber || '#### #### #### ####'}&amp;lt;/label&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;card-item__content&amp;quot;&amp;gt;&#10;                          &amp;lt;label className=&amp;quot;card-item__info&amp;quot;&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;card-item__holder&amp;quot;&amp;gt;Card Holder&amp;lt;/div&amp;gt;&#10;                            &amp;lt;div className=&amp;quot;card-item__name&amp;quot;&amp;gt;{cardName || 'FULL NAME'}&amp;lt;/div&amp;gt;&#10;                          &amp;lt;/label&amp;gt;&#10;                          &amp;lt;div className=&amp;quot;card-item__date&amp;quot;&amp;gt;&#10;                            &amp;lt;label className=&amp;quot;card-item__dateTitle&amp;quot;&amp;gt;Expires&amp;lt;/label&amp;gt;&#10;                            &amp;lt;label className=&amp;quot;card-item__dateItem&amp;quot;&amp;gt;{cardMonth || 'MM'}/{cardYear || 'YY'}&amp;lt;/label&amp;gt;&#10;                          &amp;lt;/div&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                      &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;card-item__side -back&amp;quot;&amp;gt;&#10;                      &amp;lt;div className=&amp;quot;card-item__cover&amp;quot;&amp;gt;&#10;                        &amp;lt;img src={`https://raw.githubusercontent.com/muhammederdem/credit-card-form/master/src/assets/images/${currentCardBackground}.jpeg`} className=&amp;quot;card-item__bg&amp;quot; alt=&amp;quot;Card Background&amp;quot; /&amp;gt;&#10;                      &amp;lt;/div&amp;gt;&#10;                      &amp;lt;div className=&amp;quot;card-item__band&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#10;                      &amp;lt;div className=&amp;quot;card-item__cvv&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;card-item__cvvTitle&amp;quot;&amp;gt;CVV&amp;lt;/div&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;card-item__cvvBand&amp;quot;&amp;gt;{cardCvv}&amp;lt;/div&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;card-item__type&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#10;                      &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;                &amp;lt;div className=&amp;quot;&amp;quot;&amp;gt;&#10;                  &amp;lt;div className=&amp;quot;card-form__inner&amp;quot;&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;card-input&amp;quot;&amp;gt;&#10;                      &amp;lt;label htmlFor=&amp;quot;cardNumber&amp;quot; className=&amp;quot;card-input__label&amp;quot;&amp;gt;Card Number&amp;lt;/label&amp;gt;&#10;                      &amp;lt;input&#10;                        type=&amp;quot;text&amp;quot;&#10;                        id=&amp;quot;cardNumber&amp;quot;&#10;                        className=&amp;quot;card-input__input&amp;quot;&#10;                        ref={cardNumberInput}&#10;                        value={cardNumber}&#10;                        onChange={handleCardNumberChange}&#10;                        onFocus={() =&amp;gt; setFocusElementStyle(cardNumberInput.current.getBoundingClientRect())}&#10;                        onBlur={handleBlur}&#10;                        autoComplete=&amp;quot;off&amp;quot;&#10;                      /&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;card-input&amp;quot;&amp;gt;&#10;                      &amp;lt;label htmlFor=&amp;quot;cardName&amp;quot; className=&amp;quot;card-input__label&amp;quot;&amp;gt;Card Holder&amp;lt;/label&amp;gt;&#10;                      &amp;lt;input&#10;                        type=&amp;quot;text&amp;quot;&#10;                        id=&amp;quot;cardName&amp;quot;&#10;                        className=&amp;quot;card-input__input&amp;quot;&#10;                        ref={cardNameInput}&#10;                        value={cardName}&#10;                        onChange={(event) =&amp;gt; {&#10;                          const inputValue = event.target.value;&#10;                          const regex = /^[A-Za-z\s]*$/;&#10;                          if (regex.test(inputValue)) {&#10;                            handleCardNameChange(event);&#10;                          }&#10;                        }}&#10;                        onFocus={() =&amp;gt; handleFocus(cardNameInput.current.getBoundingClientRect())}&#10;                        onBlur={handleBlur}&#10;                        autoComplete=&amp;quot;off&amp;quot;&#10;                      /&amp;gt;&#10;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;card-form__row&amp;quot;&amp;gt;&#10;                      &amp;lt;div className=&amp;quot;card-form__col&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;card-form__group&amp;quot;&amp;gt;&#10;                          &amp;lt;label htmlFor=&amp;quot;cardMonth&amp;quot; className=&amp;quot;card-input__label&amp;quot;&amp;gt;Expiration Date&amp;lt;/label&amp;gt;&#10;                          &amp;lt;select&#10;                            className=&amp;quot;card-input__input -select&amp;quot;&#10;                            id=&amp;quot;cardMonth&amp;quot;&#10;                            ref={cardMonthInput}&#10;                            value={cardMonth}&#10;                            onChange={handleCardMonthChange}&#10;                            onFocus={() =&amp;gt; handleFocus(cardMonthInput.current.getBoundingClientRect())}&#10;                            onBlur={handleBlur}&#10;                          &amp;gt;&#10;                            &amp;lt;option value=&amp;quot;&amp;quot; disabled&amp;gt;Month&amp;lt;/option&amp;gt;&#10;                            {[...Array(12).keys()].map((n) =&amp;gt; (&#10;                              &amp;lt;option key={n + 1} value={n + 1 &amp;lt; 10 ? '0' + (n + 1) : n + 1}&amp;gt;&#10;                                {n + 1 &amp;lt; 10 ? '0' + (n + 1) : n + 1}&#10;                              &amp;lt;/option&amp;gt;&#10;                            ))}&#10;                          &amp;lt;/select&amp;gt;&#10;                          &amp;lt;select&#10;                            className=&amp;quot;card-input__input -select&amp;quot;&#10;                            id=&amp;quot;cardYear&amp;quot;&#10;                            ref={cardYearInput}&#10;                            value={cardYear}&#10;                            onChange={handleCardYearChange}&#10;                            onFocus={() =&amp;gt; handleFocus(cardYearInput.current.getBoundingClientRect())}&#10;                            onBlur={handleBlur}&#10;                          &amp;gt;&#10;                            &amp;lt;option value=&amp;quot;&amp;quot; disabled&amp;gt;Year&amp;lt;/option&amp;gt;&#10;                            {[...Array(12).keys()].map((n) =&amp;gt; (&#10;                              &amp;lt;option key={minCardYear + n} value={minCardYear + n}&amp;gt;&#10;                                {minCardYear + n}&#10;                              &amp;lt;/option&amp;gt;&#10;                            ))}&#10;                          &amp;lt;/select&amp;gt;&#10;                        &amp;lt;/div&amp;gt;&#10;                      &amp;lt;/div&amp;gt;&#10;                      &amp;lt;div className=&amp;quot;card-form__col -cvv&amp;quot;&amp;gt;&#10;                        &amp;lt;div className=&amp;quot;card-input&amp;quot;&amp;gt;&#10;                          &amp;lt;label htmlFor=&amp;quot;cardCvv&amp;quot; className=&amp;quot;card-input__label&amp;quot;&amp;gt;CVV&amp;lt;/label&amp;gt;&#10;                          &amp;lt;input&#10;                            type=&amp;quot;text&amp;quot;&#10;                            className=&amp;quot;card-input__input&amp;quot;&#10;                            id=&amp;quot;cardCvv&amp;quot;&#10;                            value={cardCvv}&#10;                            onChange={(event) =&amp;gt; {&#10;                              const inputValue = event.target.value;&#10;                              // Regular expression to match only numbers&#10;                              const regex = /^[0-9]*$/;&#10;                              if (regex.test(inputValue)) {&#10;                                handleCardCvvChange(event);&#10;                              }&#10;                            }}&#10;                            onFocus={() =&amp;gt; flipCard(true)}&#10;                            onBlur={() =&amp;gt; flipCard(false)}&#10;                            autoComplete=&amp;quot;off&amp;quot;&#10;                          /&amp;gt;&#10;&#10;                        &amp;lt;/div&amp;gt;&#10;                      &amp;lt;/div&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                    &amp;lt;button className=&amp;quot;card-form__button&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;              &amp;lt;/div&amp;gt;&#10;            &amp;lt;/div&amp;gt;&#10;            &amp;lt;div className='appointment-schedule'&amp;gt;&#10;              &amp;lt;div className='container-ap'&amp;gt;&#10;                &amp;lt;div className='appointment-payment'&amp;gt;&#10;                  &amp;lt;div className=&amp;quot;ap-booking-details&amp;quot;&amp;gt;&#10;                    &amp;lt;div className=&amp;quot;booking-item&amp;quot;&amp;gt;&#10;                      &amp;lt;ul className=&amp;quot;booking-date&amp;quot;&amp;gt;&#10;                        &amp;lt;li&amp;gt;Date &amp;lt;span&amp;gt;{selectedDate}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&#10;                        &amp;lt;li&amp;gt;Time &amp;lt;span&amp;gt;{selectedTime}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&#10;                      &amp;lt;/ul&amp;gt;&#10;                      &amp;lt;ul className=&amp;quot;booking-fee&amp;quot;&amp;gt;&#10;                        &amp;lt;li&amp;gt;Consulting Fee &amp;lt;span&amp;gt;$60&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&#10;                        &amp;lt;li&amp;gt;Booking Fee &amp;lt;span&amp;gt;$10&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&#10;                        &amp;lt;li&amp;gt;Vat (Including 15%) &amp;lt;span&amp;gt;$9&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&#10;                      &amp;lt;/ul&amp;gt;&#10;                      &amp;lt;ul className=&amp;quot;booking-total&amp;quot;&amp;gt;&#10;                        &amp;lt;li className=&amp;quot;booking-total-li&amp;quot;&amp;gt;&#10;                          &amp;lt;span&amp;gt;Total&amp;lt;/span&amp;gt;&#10;                          &amp;lt;span className=&amp;quot;total-cost&amp;quot;&amp;gt; $79&amp;lt;/span&amp;gt;&#10;                        &amp;lt;/li&amp;gt;&#10;                      &amp;lt;/ul&amp;gt;&#10;                    &amp;lt;/div&amp;gt;&#10;                  &amp;lt;/div&amp;gt;&#10;                &amp;lt;/div&amp;gt;&#10;              &amp;lt;/div&amp;gt;&#10;            &amp;lt;/div&amp;gt;&#10;          &amp;lt;/div&amp;gt;&#10;        &amp;lt;/&amp;gt;&#10;      )}&#10;    &amp;lt;/div&amp;gt;&#10;  );&#10;};&#10;&#10;export default AppointmentScheduler;&#10;and here is my server.js code const express = require(&amp;quot;express&amp;quot;);&#10;const mysql = require(&amp;quot;mysql2&amp;quot;);&#10;const cors = require(&amp;quot;cors&amp;quot;);&#10;const dotenv = require(&amp;quot;dotenv&amp;quot;);&#10;&#10;// Load environment variables from .env file&#10;dotenv.config();&#10;&#10;const app = express();&#10;const port = process.env.PORT || 8081;&#10;&#10;app.use(cors());&#10;app.use(express.json());&#10;&#10;// Create a MySQL connection using environment variables&#10;const db = mysql.createConnection({&#10;  host: process.env.DB_HOST,&#10;  user: process.env.DB_USER,&#10;  password: process.env.DB_PASSWORD,&#10;  database: process.env.DB_DATABASE,&#10;});&#10;&#10;db.connect((err) =&amp;gt; {&#10;  if (err) {&#10;    console.error(&amp;quot;Error connecting to the database:&amp;quot;, err);&#10;  } else {&#10;    console.log(&amp;quot;Connected to the MySQL database.&amp;quot;);&#10;  }&#10;});&#10;&#10;const doctorRoutes = require(&amp;quot;./routes/doctorRoutes&amp;quot;);&#10;const patientRoutes = require(&amp;quot;./routes/patinetRoutes&amp;quot;);&#10;&#10;app.use(&amp;quot;/doctors&amp;quot;, doctorRoutes);&#10;app.use(&amp;quot;/patients&amp;quot;, patientRoutes);&#10;&#10;app.post(&amp;quot;/login&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;SELECT * FROM login WHERE `email`=? AND `password`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.email, req.body.password, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Database error:&amp;quot;, err);&#10;        return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Database error&amp;quot; });&#10;      }&#10;      if (data.length &amp;gt; 0) {&#10;        const user = data[0];&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          user: {&#10;            login_id: user.login_id,&#10;            name: user.name,&#10;            role: user.role,&#10;            email: user.email,&#10;          },&#10;        });&#10;      } else {&#10;        return res.json({ status: &amp;quot;Failed&amp;quot;, message: &amp;quot;Invalid credentials&amp;quot; });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;&#10;app.post(&amp;quot;/signup&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql =&#10;    &amp;quot;INSERT INTO login (`name`, `email`, `password`, `role`) VALUES (?)&amp;quot;;&#10;  const values = [&#10;    req.body.name,&#10;    req.body.email,&#10;    req.body.password,&#10;    req.body.role,&#10;  ];&#10;&#10;  db.query(sql, [values], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      return res.json({ status: &amp;quot;Error&amp;quot;, message: &amp;quot;Error during signup&amp;quot; });&#10;    }&#10;    return res.json({ status: &amp;quot;Success&amp;quot;, message: &amp;quot;Signup successful&amp;quot; });&#10;  });&#10;});&#10;&#10;app.post(&amp;quot;/forgotpassword&amp;quot;, (req, res) =&amp;gt; {&#10;  const sql = &amp;quot;UPDATE login SET `password`=? WHERE `email`=? AND `role`=?&amp;quot;;&#10;  db.query(&#10;    sql,&#10;    [req.body.password, req.body.email, req.body.role],&#10;    (err, data) =&amp;gt; {&#10;      if (err) {&#10;        console.error(&amp;quot;Error executing query:&amp;quot;, err);&#10;        return res.json({&#10;          status: &amp;quot;Error&amp;quot;,&#10;          message: &amp;quot;Error updating password&amp;quot;,&#10;        });&#10;      }&#10;      if (data.affectedRows &amp;gt; 0) {&#10;        return res.json({&#10;          status: &amp;quot;Success&amp;quot;,&#10;          message: &amp;quot;Password updated successfully&amp;quot;,&#10;        });&#10;      } else {&#10;        return res.json({&#10;          status: &amp;quot;Failed&amp;quot;,&#10;          message: &amp;quot;No user found with provided details&amp;quot;,&#10;        });&#10;      }&#10;    }&#10;  );&#10;});&#10;&#10;// Fetch patient details by email&#10;app.get(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const sql = &amp;quot;SELECT * FROM patient WHERE email = ?&amp;quot;;&#10;&#10;  db.query(sql, [email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error fetching patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.length === 0) {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;&#10;    const patient = data[0];&#10;    return res.json(patient);&#10;  });&#10;});&#10;&#10;// Update patient details by email&#10;app.put(&amp;quot;/patients/email/:email&amp;quot;, (req, res) =&amp;gt; {&#10;  const email = req.params.email;&#10;  const { name, email: newEmail, number, adhar_no, dob, gender, insurance, address } = req.body;&#10;&#10;  const sql = &amp;quot;UPDATE patient SET name =?, email =?, number =?, adhar_no =?, dob =?, gender =?, insurance =?, address =? WHERE email =?&amp;quot;;&#10;&#10;  db.query(sql, [name, newEmail, number, adhar_no, dob, gender, insurance, address, email], (err, data) =&amp;gt; {&#10;    if (err) {&#10;      console.error(&amp;quot;Error updating patient details:&amp;quot;, err);&#10;      return res.status(500).json({ error: &amp;quot;Internal Server Error&amp;quot; });&#10;    }&#10;&#10;    if (data.affectedRows &amp;gt; 0) {&#10;      return res.json({ message: &amp;quot;Patient details updated successfully&amp;quot; });&#10;    } else {&#10;      return res.status(404).json({ error: &amp;quot;Patient not found&amp;quot; });&#10;    }&#10;  });&#10;});&#10;&#10;app.use(&amp;quot;/patients&amp;quot;, patientRoutes);&#10;&#10;function checkTimeSlotAvailability(doctor_id, appointment_date, appointment_time) {&#10;  return new Promise((resolve, reject) =&amp;gt; {&#10;    const sql = 'SELECT COUNT(*) as count FROM appointments WHERE doctor_id = ? AND appointment_date = ? AND appointment_time = ?';&#10;    db.query(sql, [doctor_id, appointment_date, appointment_time], (err, result) =&amp;gt; {&#10;      if (err) {&#10;        reject(err);&#10;      } else {&#10;        const count = result[0].count;&#10;        resolve(count === 0);&#10;      }&#10;    });&#10;  });&#10;}&#10;&#10;app.post('/appointments', async (req, res) =&amp;gt; {&#10;  const { doctor_id, patient_id, appointment_date, appointment_time } = req.body;&#10;&#10;  try {&#10;    const isTimeSlotAvailable = await checkTimeSlotAvailability(doctor_id, appointment_date, appointment_time);&#10;    if (!isTimeSlotAvailable) {&#10;      return res.status(400).json({ error: 'The time slot is not available' });&#10;    }&#10;&#10;    const sql = 'INSERT INTO appointments (doctor_id, patient_id, appointment_date, appointment_time) VALUES (?, ?, ?, ?)';&#10;    const values = [doctor_id, patient_id, appointment_date, appointment_time];&#10;&#10;    db.query(sql, values, (err, result) =&amp;gt; {&#10;      if (err) {&#10;        console.error('Error creating appointment:', err);&#10;        return res.status(500).json({ error: 'Internal Server Error' });&#10;      }&#10;&#10;      console.log('Appointment created successfully:', {&#10;        appointment_id: result.insertId,&#10;        doctor_id,&#10;        patient_id,&#10;        appointment_date,&#10;        appointment_time&#10;      });&#10;&#10;      return res.json({ message: 'Appointment created successfully' });&#10;    });&#10;  } catch (err) {&#10;    console.error('Error creating appointment:', err);&#10;    return res.status(500).json({ error: 'Internal Server Error' });&#10;  }&#10;});&#10;&#10;&#10;&#10;&#10;app.listen(port, () =&amp;gt; console.log(`Server running on port ${port}`));&#10;" />
                    </message>
                    <message>
                      <speaker value="ASSISTANT" />
                      <text value="The error you're receiving, `Error: The time slot is not available`, is being thrown by the server when you try to create an appointment for a time slot that is already booked.&#10;&#10;In your server code, you have a function `checkTimeSlotAvailability` that checks if a given time slot is available for a specific doctor on a particular date. If the time slot is already booked, it returns `false`, and the server responds with a 400 Bad Request error with the message &quot;The time slot is not available&quot;.&#10;&#10;```javascript&#10;function checkTimeSlotAvailability(doctor_id, appointment_date, appointment_time) {&#10;  return new Promise((resolve, reject) =&gt; {&#10;    const sql = 'SELECT COUNT(*) as count FROM appointments WHERE doctor_id = ? AND appointment_date = ? AND appointment_time = ?';&#10;    db.query(sql, [doctor_id, appointment_date, appointment_time], (err, result) =&gt; {&#10;      if (err) {&#10;        reject(err);&#10;      } else {&#10;        const count = result[0].count;&#10;        resolve(count === 0);&#10;      }&#10;    });&#10;  });&#10;}&#10;&#10;app.post('/appointments', async (req, res) =&gt; {&#10;  const { doctor_id, patient_id, appointment_date, appointment_time } = req.body;&#10;&#10;  try {&#10;    const isTimeSlotAvailable = await checkTimeSlotAvailability(doctor_id, appointment_date, appointment_time);&#10;    if (!isTimeSlotAvailable) {&#10;      return res.status(400).json({ error: 'The time slot is not available' });&#10;    }&#10;&#10;    // ... (rest of the code)&#10;  } catch (err) {&#10;    // ...&#10;  }&#10;});&#10;```&#10;&#10;To resolve this issue, you need to ensure that the time slot you're trying to book is available. You can do this by either:&#10;&#10;1. Checking the availability of the time slot on the client-side before sending the request to the server.&#10;2. Handling the error on the client-side when the server responds with a 400 Bad Request error and prompting the user to select a different time slot.&#10;&#10;Here's an example of how you can handle the error on the client-side in your `handleNext` function:&#10;&#10;```javascript&#10;const handleNext = async () =&gt; {&#10;  // ... (existing code)&#10;&#10;  try {&#10;    // Send form values along with selected date, time, doctor ID, and patient ID to the backend&#10;    await axios.post('http://localhost:8081/appointments', {&#10;      doctor_id: selectedDoctorId,&#10;      receptionist_id: 12,&#10;      patient_id: patientId,&#10;      status: 'pending',&#10;      notes: &quot;Patient needs a follow-up.&quot;,&#10;      fees: 10,&#10;      appointment_date: selectedDate,&#10;      appointment_time: selectedTime,&#10;      time_period: &quot;30 minutes&quot;,&#10;      patient_name: name,&#10;      patient_email: email&#10;    });&#10;    setCurrentStep(currentStep + 1);&#10;  } catch (error) {&#10;    if (error.response &amp;&amp; error.response.status === 400) {&#10;      // Handle the case when the time slot is not available&#10;      alert(error.response.data.error);&#10;    } else {&#10;      console.error('Error creating appointment:', error);&#10;      // Handle other errors here&#10;    }&#10;  }&#10;};&#10;```&#10;&#10;In this updated `handleNext` function, we're checking if the error response from the server has a status code of 400. If it does, we're displaying the error message from the server (`error.response.data.error`) to the user using an `alert`. You can replace the `alert` with a more user-friendly UI element or modal to prompt the user to select a different time slot.&#10;&#10;By handling the error on the client-side, you can provide a better user experience and prevent the user from attempting to book an unavailable time slot." />
                    </message>
                  </list>
                </messages>
                <updatedAt value="2024-06-06T16:33:44.956434" />
              </chat>
              <chat>
                <internalId value="00c5f39e-0f0b-43a9-9f5c-6438c244cab5" />
              </chat>
            </list>
          </chats>
          <defaultLlm>
            <llm>
              <model value="anthropic/claude-3-sonnet-20240229" />
              <provider value="Anthropic" />
              <title value="Claude 3 Sonnet" />
            </llm>
          </defaultLlm>
        </AccountData>
      </list>
    </accountData>
  </component>
</project>